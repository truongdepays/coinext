/**
 * @prettier
 */
/**
 * BitGoJS includes some custom hand-rolled bip32 derivation logic in `bitcoin.ts`, which sadly
 * has numerous bugs.
 *
 * One of the effects is that the methods accept invalid bip32 paths:
 * - the `m` prefix is ignored ('m/0' === '0')
 * - path components that cannot be parsed as base-10 numbers are mapped to `0` ('0/x' === '0/0')
 * - path components with trailing characters after numerals are accepted, trailing characters
 *   are ignored ('1x' === '1')
 *
 * This probably does not cover everything but it should cover most bugs encountered in our code.
 *
 * This method attempts to convert a "legacy path", which may be invalid, to a standard bip32 path:
 * meaning the result should be equivalent to the input path when passed to either our custom
 * derivation log or when passed to a standard bip32 library.
 *
 * @param path - legacy path
 * @return string - somewhat sanitized path that can be passed to standard bip32 libraries
 */
export declare function sanitizeLegacyPath(path: string): string;
//# sourceMappingURL=bip32path.d.ts.map