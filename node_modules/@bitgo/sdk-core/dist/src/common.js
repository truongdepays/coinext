"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateParams = exports.getNetwork = exports.setNetwork = exports.Environments = void 0;
/**
 * @prettier
 */
const _ = __importStar(require("lodash"));
const v2_1 = require("./v2");
Object.defineProperty(exports, "Environments", { enumerable: true, get: function () { return v2_1.Environments; } });
let bitcoinNetwork;
/**
 * Set the global Bitcoin network. Used for v1 only.
 *
 * @deprecated
 */
function setNetwork(network) {
    if (network === 'bitcoin') {
        bitcoinNetwork = 'bitcoin';
    }
    else {
        // test network
        bitcoinNetwork = 'testnet';
    }
}
exports.setNetwork = setNetwork;
/**
 * Get the global Bitcoin network. Used for v1 only.
 *
 * @deprecated
 */
function getNetwork() {
    return bitcoinNetwork;
}
exports.getNetwork = getNetwork;
/**
 * Helper function to validate the input parameters to an SDK method.
 * Only validates for strings - if parameter is different, check that manually
 *
 * @deprecated
 * @param params dictionary of parameter key-value pairs
 * @param expectedParams list of expected string parameters
 * @param optionalParams list of optional string parameters
 * @param optionalCallback if callback provided, must be a function
 * @returns true if validated, throws with reason otherwise
 */
function validateParams(
// eslint-disable-next-line @typescript-eslint/ban-types
params, expectedParams, optionalParams = [], optionalCallback) {
    if (!_.isObject(params)) {
        throw new Error('Must pass in parameters dictionary');
    }
    expectedParams = expectedParams || [];
    expectedParams.forEach(function (expectedParam) {
        if (!params[expectedParam]) {
            throw new Error('Missing parameter: ' + expectedParam);
        }
        if (!_.isString(params[expectedParam])) {
            throw new Error('Expecting parameter string: ' + expectedParam + ' but found ' + typeof params[expectedParam]);
        }
    });
    optionalParams.forEach(function (optionalParam) {
        if (params[optionalParam] && !_.isString(params[optionalParam])) {
            throw new Error('Expecting parameter string: ' + optionalParam + ' but found ' + typeof params[optionalParam]);
        }
    });
    if (optionalCallback && !_.isFunction(optionalCallback)) {
        throw new Error('illegal callback argument');
    }
    return true;
}
exports.validateParams = validateParams;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0dBRUc7QUFDSCwwQ0FBNEI7QUFDNUIsNkJBQStDO0FBR3RDLDZGQUhBLGlCQUFZLE9BR0E7QUFFckIsSUFBSSxjQUF5QixDQUFDO0FBRTlCOzs7O0dBSUc7QUFDSCxTQUFnQixVQUFVLENBQUMsT0FBa0I7SUFDM0MsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1FBQ3pCLGNBQWMsR0FBRyxTQUFTLENBQUM7S0FDNUI7U0FBTTtRQUNMLGVBQWU7UUFDZixjQUFjLEdBQUcsU0FBUyxDQUFDO0tBQzVCO0FBQ0gsQ0FBQztBQVBELGdDQU9DO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLFVBQVU7SUFDeEIsT0FBTyxjQUFjLENBQUM7QUFDeEIsQ0FBQztBQUZELGdDQUVDO0FBRUQ7Ozs7Ozs7Ozs7R0FVRztBQUNILFNBQWdCLGNBQWM7QUFDNUIsd0RBQXdEO0FBQ3hELE1BQWMsRUFDZCxjQUF3QixFQUN4QixpQkFBMkIsRUFBRSxFQUM3QixnQkFBa0Q7SUFFbEQsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0tBQ3ZEO0lBRUQsY0FBYyxHQUFHLGNBQWMsSUFBSSxFQUFFLENBQUM7SUFFdEMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVLGFBQWE7UUFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixHQUFHLGFBQWEsQ0FBQyxDQUFDO1NBQ3hEO1FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUU7WUFDdEMsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsR0FBRyxhQUFhLEdBQUcsYUFBYSxHQUFHLE9BQU8sTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7U0FDaEg7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBVSxhQUFhO1FBQzVDLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRTtZQUMvRCxNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixHQUFHLGFBQWEsR0FBRyxhQUFhLEdBQUcsT0FBTyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztTQUNoSDtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxnQkFBZ0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtRQUN2RCxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7S0FDOUM7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFqQ0Qsd0NBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgRW52aXJvbm1lbnRzLCBWMU5ldHdvcmsgfSBmcm9tICcuL3YyJztcblxuLy8gcmUtZXhwb3J0IGZyb20gaGVyZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcmVhc29uc1xuZXhwb3J0IHsgRW52aXJvbm1lbnRzIH07XG5cbmxldCBiaXRjb2luTmV0d29yazogVjFOZXR3b3JrO1xuXG4vKipcbiAqIFNldCB0aGUgZ2xvYmFsIEJpdGNvaW4gbmV0d29yay4gVXNlZCBmb3IgdjEgb25seS5cbiAqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0TmV0d29yayhuZXR3b3JrOiBWMU5ldHdvcmspOiB2b2lkIHtcbiAgaWYgKG5ldHdvcmsgPT09ICdiaXRjb2luJykge1xuICAgIGJpdGNvaW5OZXR3b3JrID0gJ2JpdGNvaW4nO1xuICB9IGVsc2Uge1xuICAgIC8vIHRlc3QgbmV0d29ya1xuICAgIGJpdGNvaW5OZXR3b3JrID0gJ3Rlc3RuZXQnO1xuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSBnbG9iYWwgQml0Y29pbiBuZXR3b3JrLiBVc2VkIGZvciB2MSBvbmx5LlxuICpcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXR3b3JrKCk6IFYxTmV0d29yayB7XG4gIHJldHVybiBiaXRjb2luTmV0d29yaztcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gdmFsaWRhdGUgdGhlIGlucHV0IHBhcmFtZXRlcnMgdG8gYW4gU0RLIG1ldGhvZC5cbiAqIE9ubHkgdmFsaWRhdGVzIGZvciBzdHJpbmdzIC0gaWYgcGFyYW1ldGVyIGlzIGRpZmZlcmVudCwgY2hlY2sgdGhhdCBtYW51YWxseVxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBAcGFyYW0gcGFyYW1zIGRpY3Rpb25hcnkgb2YgcGFyYW1ldGVyIGtleS12YWx1ZSBwYWlyc1xuICogQHBhcmFtIGV4cGVjdGVkUGFyYW1zIGxpc3Qgb2YgZXhwZWN0ZWQgc3RyaW5nIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSBvcHRpb25hbFBhcmFtcyBsaXN0IG9mIG9wdGlvbmFsIHN0cmluZyBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0gb3B0aW9uYWxDYWxsYmFjayBpZiBjYWxsYmFjayBwcm92aWRlZCwgbXVzdCBiZSBhIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB0cnVlIGlmIHZhbGlkYXRlZCwgdGhyb3dzIHdpdGggcmVhc29uIG90aGVyd2lzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQYXJhbXMoXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gIHBhcmFtczogb2JqZWN0LFxuICBleHBlY3RlZFBhcmFtczogc3RyaW5nW10sXG4gIG9wdGlvbmFsUGFyYW1zOiBzdHJpbmdbXSA9IFtdLFxuICBvcHRpb25hbENhbGxiYWNrPzogPFI+KGVycjogRXJyb3IsIHJlczogUikgPT4gdm9pZFxuKTogYm9vbGVhbiB7XG4gIGlmICghXy5pc09iamVjdChwYXJhbXMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHBhc3MgaW4gcGFyYW1ldGVycyBkaWN0aW9uYXJ5Jyk7XG4gIH1cblxuICBleHBlY3RlZFBhcmFtcyA9IGV4cGVjdGVkUGFyYW1zIHx8IFtdO1xuXG4gIGV4cGVjdGVkUGFyYW1zLmZvckVhY2goZnVuY3Rpb24gKGV4cGVjdGVkUGFyYW0pIHtcbiAgICBpZiAoIXBhcmFtc1tleHBlY3RlZFBhcmFtXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHBhcmFtZXRlcjogJyArIGV4cGVjdGVkUGFyYW0pO1xuICAgIH1cbiAgICBpZiAoIV8uaXNTdHJpbmcocGFyYW1zW2V4cGVjdGVkUGFyYW1dKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RpbmcgcGFyYW1ldGVyIHN0cmluZzogJyArIGV4cGVjdGVkUGFyYW0gKyAnIGJ1dCBmb3VuZCAnICsgdHlwZW9mIHBhcmFtc1tleHBlY3RlZFBhcmFtXSk7XG4gICAgfVxuICB9KTtcblxuICBvcHRpb25hbFBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb25hbFBhcmFtKSB7XG4gICAgaWYgKHBhcmFtc1tvcHRpb25hbFBhcmFtXSAmJiAhXy5pc1N0cmluZyhwYXJhbXNbb3B0aW9uYWxQYXJhbV0pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGluZyBwYXJhbWV0ZXIgc3RyaW5nOiAnICsgb3B0aW9uYWxQYXJhbSArICcgYnV0IGZvdW5kICcgKyB0eXBlb2YgcGFyYW1zW29wdGlvbmFsUGFyYW1dKTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChvcHRpb25hbENhbGxiYWNrICYmICFfLmlzRnVuY3Rpb24ob3B0aW9uYWxDYWxsYmFjaykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2lsbGVnYWwgY2FsbGJhY2sgYXJndW1lbnQnKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuIl19