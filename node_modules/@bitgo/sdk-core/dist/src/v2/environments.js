"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Environments = exports.AliasEnvironments = exports.hardcodedPublicKeys = void 0;
exports.hardcodedPublicKeys = Object.freeze({
    serverXpub: {
        prod: 'xpub661MyMwAqRbcEtUgu9HF8ai4ipuVKKHBzUqks4jSFypW8dwwQL1zygLgQx99NmC7zJJznSiwKG6RQfVjAKMtCsx8VjR6kQW8x7HrkXFZdnQ',
        test: 'xpub661MyMwAqRbcErFqVXGiUFv9YeoPbhN72UiNCUdj9nj3T6M8h7iKNmbCYpMVWVZP7LA2ma3HWcPngz1gRTm4FPdtm9mHfrNvU93MCoszsGL',
    },
    hsmXpub: {
        prod: 'xpub661MyMwAqRbcGEtTFgMAoxMFoqsRdDaiaR63byNfZdV7cBZFvovQSNJ5bpyeoQtuKVgXBk6sFQ7TtvyWqadt41DnKwveYgM5KoU2EKYjdY2',
        test: 'xpub661MyMwAqRbcGFKe4Bqvk4Sgric4gNFC8pUbw4tUkVjZxubjCA522gPzc1YaXb3bQVmDWc7CjG8AGNWRpcdAU38RETBh8n2bnqEU4kbV4oK',
        dev: 'xpub661MyMwAqRbcFWzoz8qnYRDYEFQpPLYwxVFoG6WLy3ck5ZupRGJTG4ju6yGb7Dj3ey6GsC4kstLRER2nKzgjLtmxyPgC4zHy7kVhUt6yfGn',
    },
});
// alias environments are environment names which are aliases of a supported environment
exports.AliasEnvironments = {
    production: 'prod',
    msProd: 'prod',
    msTest: 'test',
    msDev: 'dev',
    msLatest: 'latest',
};
const mainnetBase = {
    network: 'bitcoin',
    signingAddress: '1BitGo3gxRZ6mQSEH52dvCKSUgVCAH4Rja',
    serverXpub: exports.hardcodedPublicKeys.serverXpub.prod,
    hsmXpub: exports.hardcodedPublicKeys.hsmXpub.prod,
    btcExplorerBaseUrl: 'https://blockstream.info/api',
    etherscanBaseUrl: 'https://api.etherscan.io',
    etherscanApiToken: process.env.ETHERSCAN_API_TOKEN,
    eth2ExplorerBaseUrl: 'https://beaconscan.com/api',
    eosNodeUrls: ['https://bp.cryptolions.io', 'https://api.eosnewyork.io', 'https://api.eosdetroit.io'],
    nearNodeUrls: ['https://rpc.mainnet.near.org'],
    tronNodes: {
        full: 'https://api.trongrid.io',
        solidity: 'https://api.trongrid.io',
    },
    hmacVerificationEnforced: true,
};
const testnetBase = {
    network: 'testnet',
    signingAddress: 'msignBdFXteehDEgB6DNm7npRt7AcEZJP3',
    serverXpub: exports.hardcodedPublicKeys.serverXpub.test,
    hsmXpub: exports.hardcodedPublicKeys.hsmXpub.test,
    btcExplorerBaseUrl: 'https://blockstream.info/testnet/api',
    etherscanBaseUrl: 'https://api-goerli.etherscan.io',
    etherscanApiToken: process.env.ETHERSCAN_API_TOKEN,
    eth2ExplorerBaseUrl: 'https://beaconscan.com/api',
    // https://monitor.jungletestnet.io/#apiendpoints for more endpoints
    eosNodeUrls: [
        'https://jungle3.cryptolions.io:443',
        'https://jungle3.eosdac.io:443',
        'https://jungleapi.nodeone.io:443',
    ],
    nearNodeUrls: ['https://rpc.testnet.near.org'],
    tronNodes: {
        full: 'http://47.252.81.135:8090',
        solidity: 'http://47.252.81.135:8091',
    },
    hmacVerificationEnforced: true,
};
const devBase = Object.assign({}, testnetBase, {
    hsmXpub: exports.hardcodedPublicKeys.hsmXpub.dev,
    hmacVerificationEnforced: false,
});
// eslint-disable-next-line no-redeclare
exports.Environments = {
    prod: Object.assign({}, mainnetBase, {
        uri: 'https://app.bitgo.com',
        stellarFederationServerUrl: 'https://app.bitgo.com/api/v2/xlm/federation',
    }),
    test: Object.assign({}, testnetBase, {
        uri: 'https://app.bitgo-test.com',
        stellarFederationServerUrl: 'https://app.bitgo-test.com/api/v2/txlm/federation',
    }),
    dev: Object.assign({}, devBase, {
        uri: 'https://app.bitgo-dev.com',
        stellarFederationServerUrl: 'https://app.bitgo-dev.com/api/v2/txlm/federation',
    }),
    latest: Object.assign({}, devBase, {
        uri: 'https://app.bitgo-latest.com',
        stellarFederationServerUrl: 'https://app.bitgo-latest.com/api/v2/xlm/federation',
    }),
    staging: Object.assign({}, mainnetBase, {
        uri: 'https://staging.bitgo.com',
        stellarFederationServerUrl: 'https://staging.bitgo.com/api/v2/xlm/federation',
    }),
    local: Object.assign({}, devBase, {
        uri: 'https://localhost:3000',
        stellarFederationServerUrl: 'https://localhost:3000/api/v2/txlm/federation',
    }),
    localNonSecure: Object.assign({}, devBase, {
        uri: 'http://localhost:3000',
        stellarFederationServerUrl: 'http://localhost:3000/api/v2/txlm/federation',
    }),
    mock: Object.assign({}, devBase, {
        uri: 'https://bitgo.fakeurl',
        stellarFederationServerUrl: 'https://bitgo.fakeurl/api/v2/txlm/federation',
        etherscanBaseUrl: 'https://api-goerli.etherscan.fakeurl',
        etherscanApiToken: process.env.ETHERSCAN_API_TOKEN,
        eth2ExplorerBaseUrl: 'https://beaconscan.com/api',
    }),
    adminProd: Object.assign({}, mainnetBase, {
        uri: 'https://admin.bitgo.com',
        stellarFederationServerUrl: 'https://admin.bitgo.com/api/v2/xlm/federation',
    }),
    adminTest: Object.assign({}, testnetBase, {
        uri: 'https://admin.bitgo-test.com',
        stellarFederationServerUrl: 'https://admin.bitgo-test.com/api/v2/txlm/federation',
    }),
    adminDev: Object.assign({}, devBase, {
        uri: 'https://admin.bitgo-dev.com',
        stellarFederationServerUrl: 'https://admin.bitgo-dev.com/api/v2/txlm/federation',
    }),
    adminLatest: Object.assign({}, devBase, {
        uri: 'https://admin.bitgo-latest.com',
        stellarFederationServerUrl: 'https://admin.bitgo-latest.com/api/v2/xlm/federation',
    }),
    custom: Object.assign({}, mainnetBase, {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        uri: process.env.BITGO_CUSTOM_ROOT_URI,
        network: process.env.BITGO_CUSTOM_BITCOIN_NETWORK,
        hsmXpub: exports.hardcodedPublicKeys.hsmXpub.dev,
        btcExplorerBaseUrl: process.env.BITGO_CUSTOM_BITCOIN_NETWORK !== 'bitcoin'
            ? 'https://blockstream.info/testnet/api'
            : 'https://blockstream.info/api',
        etherscanBaseUrl: process.env.BITGO_CUSTOM_ETHEREUM_NETWORK !== 'ethereum'
            ? 'https://api-goerli.etherscan.io'
            : 'https://api.etherscan.io',
        stellarFederationServerUrl: process.env.BITGO_CUSTOM_STELLAR_NETWORK !== 'stellar'
            ? `https://${process.env.BITGO_CUSTOM_ROOT_URI}/api/v2/txlm/federation`
            : `https://${process.env.BITGO_CUSTOM_ROOT_URI}/api/v2/xlm/federation`,
        serverXpub: process.env.BITGO_CUSTOM_BITCOIN_NETWORK !== 'bitcoin'
            ? exports.hardcodedPublicKeys.serverXpub.test
            : exports.hardcodedPublicKeys.serverXpub.prod,
    }),
    branch: Object.assign({}, devBase, {
        uri: 'https://app.bitgo-dev.com',
        stellarFederationServerUrl: 'https://app.bitgo-dev.com/api/v2/txlm/federation',
    }),
};
//# sourceMappingURL=data:application/json;base64,