"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseHttpClient = exports.mapSeries = exports.ApiRequestError = void 0;
const superagent = require("superagent");
const Bluebird = require("bluebird");
class ApiRequestError extends Error {
    constructor(url, reason) {
        super(`error in API request: ${url}: ${reason}`);
        this.url = url;
        this.reason = reason;
    }
    static forRequest(req, reason) {
        return new ApiRequestError(req.toString(), reason);
    }
    static forResponse(res, reason) {
        return new ApiRequestError(res.header, reason);
    }
}
exports.ApiRequestError = ApiRequestError;
function mapSeries(arr, f) {
    return Bluebird.mapSeries(arr, f);
}
exports.mapSeries = mapSeries;
class BaseHttpClient {
    constructor(baseUrl) {
        this.baseUrl = baseUrl;
        if (baseUrl) {
            if (!baseUrl.startsWith('https://')) {
                throw new Error(`baseUrl must start with https://`);
            }
            if (baseUrl.endsWith(`/`)) {
                throw new Error(`baseUrl must not end with slash (/)`);
            }
        }
    }
    withBaseUrl(baseUrl) {
        return new BaseHttpClient(baseUrl);
    }
    async request(method, path, requestBody) {
        if (!path.startsWith(path)) {
            throw new Error(`path must start with '/' character`);
        }
        if (!this.baseUrl) {
            throw new Error(`no baseUrl set`);
        }
        const url = this.baseUrl + path;
        let response;
        try {
            response = await superagent(method, url).send(requestBody);
        }
        catch (e) {
            console.error(e);
            throw new ApiRequestError(url, e);
        }
        if (!response.ok) {
            throw new ApiRequestError(url, `status code ${response.statusCode}`);
        }
        let body;
        switch (response.type) {
            case 'application/json':
                body = response.body;
                break;
            case 'text/plain':
                body = response.text;
                break;
            default:
                throw new ApiRequestError(url, `unexpected response content-type ${response.type}`);
        }
        return {
            map(f) {
                try {
                    return f(body);
                }
                catch (e) {
                    throw new ApiRequestError(url, e);
                }
            },
        };
    }
    async get(path) {
        return this.request('get', path, undefined);
    }
}
exports.BaseHttpClient = BaseHttpClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZUh0dHBDbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvQmFzZUh0dHBDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUNBQXlDO0FBQ3pDLHFDQUFxQztBQUVyQyxNQUFhLGVBQWdCLFNBQVEsS0FBSztJQUN4QyxZQUFtQixHQUFXLEVBQVMsTUFBc0I7UUFDM0QsS0FBSyxDQUFDLHlCQUF5QixHQUFHLEtBQUssTUFBTSxFQUFFLENBQUMsQ0FBQztRQURoQyxRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQVMsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7SUFFN0QsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBdUIsRUFBRSxNQUFzQjtRQUMvRCxPQUFPLElBQUksZUFBZSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUF3QixFQUFFLE1BQXNCO1FBQ2pFLE9BQU8sSUFBSSxlQUFlLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNqRCxDQUFDO0NBQ0Y7QUFaRCwwQ0FZQztBQWVELFNBQWdCLFNBQVMsQ0FBTyxHQUFRLEVBQUUsQ0FBa0M7SUFDMUUsT0FBTyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNwQyxDQUFDO0FBRkQsOEJBRUM7QUFFRCxNQUFhLGNBQWM7SUFDekIsWUFBbUIsT0FBZ0I7UUFBaEIsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNqQyxJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNuQyxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7YUFDckQ7WUFDRCxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQzthQUN4RDtTQUNGO0lBQ0gsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFlO1FBQ3pCLE9BQU8sSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPLENBQUksTUFBc0IsRUFBRSxJQUFZLEVBQUUsV0FBZ0M7UUFDckYsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ25DO1FBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDaEMsSUFBSSxRQUE2QixDQUFDO1FBQ2xDLElBQUk7WUFDRixRQUFRLEdBQUcsTUFBTSxVQUFVLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFzQyxDQUFDLENBQUM7U0FDdkY7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsTUFBTSxJQUFJLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBVSxDQUFDLENBQUM7U0FDNUM7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRTtZQUNoQixNQUFNLElBQUksZUFBZSxDQUFDLEdBQUcsRUFBRSxlQUFlLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQ3RFO1FBRUQsSUFBSSxJQUFPLENBQUM7UUFDWixRQUFRLFFBQVEsQ0FBQyxJQUFJLEVBQUU7WUFDckIsS0FBSyxrQkFBa0I7Z0JBQ3JCLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO2dCQUNyQixNQUFNO1lBQ1IsS0FBSyxZQUFZO2dCQUNmLElBQUksR0FBRyxRQUFRLENBQUMsSUFBb0IsQ0FBQztnQkFDckMsTUFBTTtZQUNSO2dCQUNFLE1BQU0sSUFBSSxlQUFlLENBQUMsR0FBRyxFQUFFLG9DQUFvQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUN2RjtRQUVELE9BQU87WUFDTCxHQUFHLENBQUksQ0FBaUI7Z0JBQ3RCLElBQUk7b0JBQ0YsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ2hCO2dCQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUNWLE1BQU0sSUFBSSxlQUFlLENBQUMsR0FBRyxFQUFFLENBQVUsQ0FBQyxDQUFDO2lCQUM1QztZQUNILENBQUM7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFHLENBQUksSUFBWTtRQUN2QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM5QyxDQUFDO0NBQ0Y7QUE3REQsd0NBNkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgc3VwZXJhZ2VudCBmcm9tICdzdXBlcmFnZW50JztcbmltcG9ydCAqIGFzIEJsdWViaXJkIGZyb20gJ2JsdWViaXJkJztcblxuZXhwb3J0IGNsYXNzIEFwaVJlcXVlc3RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IocHVibGljIHVybDogc3RyaW5nLCBwdWJsaWMgcmVhc29uOiBFcnJvciB8IHN0cmluZykge1xuICAgIHN1cGVyKGBlcnJvciBpbiBBUEkgcmVxdWVzdDogJHt1cmx9OiAke3JlYXNvbn1gKTtcbiAgfVxuXG4gIHN0YXRpYyBmb3JSZXF1ZXN0KHJlcTogc3VwZXJhZ2VudC5SZXF1ZXN0LCByZWFzb246IEVycm9yIHwgc3RyaW5nKTogQXBpUmVxdWVzdEVycm9yIHtcbiAgICByZXR1cm4gbmV3IEFwaVJlcXVlc3RFcnJvcihyZXEudG9TdHJpbmcoKSwgcmVhc29uKTtcbiAgfVxuXG4gIHN0YXRpYyBmb3JSZXNwb25zZShyZXM6IHN1cGVyYWdlbnQuUmVzcG9uc2UsIHJlYXNvbjogRXJyb3IgfCBzdHJpbmcpOiBBcGlSZXF1ZXN0RXJyb3Ige1xuICAgIHJldHVybiBuZXcgQXBpUmVxdWVzdEVycm9yKHJlcy5oZWFkZXIsIHJlYXNvbik7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgUmVxdWVzdE9wdGlvbnMgPSB7XG4gIHJldHJ5PzogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgUmVzcG9uc2U8VD4gPSB7XG4gIG1hcDxWPihmOiAoYm9keTogVCkgPT4gVik6IFY7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEh0dHBDbGllbnQge1xuICB3aXRoQmFzZVVybChiYXNlVXJsOiBzdHJpbmcpOiBIdHRwQ2xpZW50O1xuICBnZXQ8VD4ocGF0aDogc3RyaW5nKTogUHJvbWlzZTxSZXNwb25zZTxUPj47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBTZXJpZXM8VCwgVT4oYXJyOiBUW10sIGY6ICh2OiBULCBpOiBudW1iZXIpID0+IFByb21pc2U8VT4pOiBQcm9taXNlPFVbXT4ge1xuICByZXR1cm4gQmx1ZWJpcmQubWFwU2VyaWVzKGFyciwgZik7XG59XG5cbmV4cG9ydCBjbGFzcyBCYXNlSHR0cENsaWVudCBpbXBsZW1lbnRzIEh0dHBDbGllbnQge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgYmFzZVVybD86IHN0cmluZykge1xuICAgIGlmIChiYXNlVXJsKSB7XG4gICAgICBpZiAoIWJhc2VVcmwuc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGJhc2VVcmwgbXVzdCBzdGFydCB3aXRoIGh0dHBzOi8vYCk7XG4gICAgICB9XG4gICAgICBpZiAoYmFzZVVybC5lbmRzV2l0aChgL2ApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgYmFzZVVybCBtdXN0IG5vdCBlbmQgd2l0aCBzbGFzaCAoLylgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB3aXRoQmFzZVVybChiYXNlVXJsOiBzdHJpbmcpOiBCYXNlSHR0cENsaWVudCB7XG4gICAgcmV0dXJuIG5ldyBCYXNlSHR0cENsaWVudChiYXNlVXJsKTtcbiAgfVxuXG4gIGFzeW5jIHJlcXVlc3Q8VD4obWV0aG9kOiAnZ2V0JyB8ICdwb3N0JywgcGF0aDogc3RyaW5nLCByZXF1ZXN0Qm9keTogdW5rbm93biB8IHVuZGVmaW5lZCk6IFByb21pc2U8UmVzcG9uc2U8VD4+IHtcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aChwYXRoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBwYXRoIG11c3Qgc3RhcnQgd2l0aCAnLycgY2hhcmFjdGVyYCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5iYXNlVXJsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vIGJhc2VVcmwgc2V0YCk7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IHRoaXMuYmFzZVVybCArIHBhdGg7XG4gICAgbGV0IHJlc3BvbnNlOiBzdXBlcmFnZW50LlJlc3BvbnNlO1xuICAgIHRyeSB7XG4gICAgICByZXNwb25zZSA9IGF3YWl0IHN1cGVyYWdlbnQobWV0aG9kLCB1cmwpLnNlbmQocmVxdWVzdEJvZHkgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB0aHJvdyBuZXcgQXBpUmVxdWVzdEVycm9yKHVybCwgZSBhcyBFcnJvcik7XG4gICAgfVxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBBcGlSZXF1ZXN0RXJyb3IodXJsLCBgc3RhdHVzIGNvZGUgJHtyZXNwb25zZS5zdGF0dXNDb2RlfWApO1xuICAgIH1cblxuICAgIGxldCBib2R5OiBUO1xuICAgIHN3aXRjaCAocmVzcG9uc2UudHlwZSkge1xuICAgICAgY2FzZSAnYXBwbGljYXRpb24vanNvbic6XG4gICAgICAgIGJvZHkgPSByZXNwb25zZS5ib2R5O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RleHQvcGxhaW4nOlxuICAgICAgICBib2R5ID0gcmVzcG9uc2UudGV4dCBhcyB1bmtub3duIGFzIFQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEFwaVJlcXVlc3RFcnJvcih1cmwsIGB1bmV4cGVjdGVkIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSAke3Jlc3BvbnNlLnR5cGV9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1hcDxWPihmOiAoYm9keTogVCkgPT4gVik6IFYge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmKGJvZHkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEFwaVJlcXVlc3RFcnJvcih1cmwsIGUgYXMgRXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBhc3luYyBnZXQ8VD4ocGF0aDogc3RyaW5nKTogUHJvbWlzZTxSZXNwb25zZTxUPj4ge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ2dldCcsIHBhdGgsIHVuZGVmaW5lZCk7XG4gIH1cbn1cbiJdfQ==