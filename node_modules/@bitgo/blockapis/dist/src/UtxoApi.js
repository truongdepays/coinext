"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchTransactionSpends = exports.fetchInputs = void 0;
const utxolib = require("@bitgo/utxo-lib");
const BaseHttpClient_1 = require("./BaseHttpClient");
/**
 * Helper to efficiently fetch output data.
 * Typical we can query output data for all outputs of a transaction, so we first fetch all
 * the output list via `f` and then pick the output data from the result.
 * @param outpoints
 * @param f - maps txid to a list of outputs with type TOut
 * @return list of TOut corresponding to outputs
 */
async function mapInputs(outpoints, f) {
    const txids = [...new Set(outpoints.map((i) => i.txid))];
    const txMap = new Map(await BaseHttpClient_1.mapSeries(txids, async (txid) => [txid, await f(txid)]));
    return outpoints.map((i) => {
        const arr = txMap.get(i.txid);
        if (arr) {
            if (i.vout in arr) {
                return arr[i.vout];
            }
            throw new Error(`could not find output ${i.vout}`);
        }
        throw new Error(`could not find tx ${i.txid}`);
    });
}
/**
 * Fetch transaction inputs from transaction input list
 * @param ins
 * @param api
 * @param network
 */
async function fetchInputs(ins, api, network) {
    return mapInputs(ins.map((input) => utxolib.bitgo.getOutputIdForInput(input)), async (txid) => utxolib.bitgo.createTransactionFromHex(await api.getTransactionHex(txid), network).outs);
}
exports.fetchInputs = fetchInputs;
/**
 * Fetch transaction spend status outpoints.
 */
async function fetchTransactionSpends(outpoints, api) {
    return mapInputs(outpoints, async (txid) => await api.getTransactionSpends(txid));
}
exports.fetchTransactionSpends = fetchTransactionSpends;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXR4b0FwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9VdHhvQXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUEyQztBQUMzQyxxREFBNkM7QUFnQzdDOzs7Ozs7O0dBT0c7QUFDSCxLQUFLLFVBQVUsU0FBUyxDQUN0QixTQUFxQyxFQUNyQyxDQUFvQztJQUVwQyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLDBCQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JGLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1FBQ3pCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLElBQUksR0FBRyxFQUFFO1lBQ1AsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLEdBQUcsRUFBRTtnQkFDakIsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3BCO1lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7U0FDcEQ7UUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNJLEtBQUssVUFBVSxXQUFXLENBQy9CLEdBQXNCLEVBQ3RCLEdBQVksRUFDWixPQUF3QjtJQUV4QixPQUFPLFNBQVMsQ0FDZCxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQzVELEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsd0JBQXdCLENBQUMsTUFBTSxHQUFHLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUN4RyxDQUFDO0FBQ0osQ0FBQztBQVRELGtDQVNDO0FBRUQ7O0dBRUc7QUFDSSxLQUFLLFVBQVUsc0JBQXNCLENBQzFDLFNBQXFDLEVBQ3JDLEdBQVk7SUFFWixPQUFPLFNBQVMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNwRixDQUFDO0FBTEQsd0RBS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB1dHhvbGliIGZyb20gJ0BiaXRnby91dHhvLWxpYic7XG5pbXBvcnQgeyBtYXBTZXJpZXMgfSBmcm9tICcuL0Jhc2VIdHRwQ2xpZW50JztcbmltcG9ydCB7IFRyYW5zYWN0aW9uQXBpIH0gZnJvbSAnLi9UcmFuc2FjdGlvbkFwaSc7XG5cbmV4cG9ydCB0eXBlIE91dHB1dFNwZW5kID1cbiAgfCB7XG4gICAgICB0eGlkOiBzdHJpbmc7XG4gICAgICB2aW46IG51bWJlcjtcbiAgICB9XG4gIHwgeyB0eGlkOiB1bmRlZmluZWQ7IHZpbjogdW5kZWZpbmVkIH07XG5cbi8qKlxuICogTWV0aG9kcyBzcGVjaWZpYyB0byBVVFhPLWJhc2VkIGJsb2NrY2hhaW5zXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXR4b0FwaSBleHRlbmRzIFRyYW5zYWN0aW9uQXBpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB0eGlkXG4gICAqIEByZXR1cm4gdHJhbnNhY3Rpb24gaW5wdXRzXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbklucHV0cyh0eGlkOiBzdHJpbmcpOiBQcm9taXNlPHV0eG9saWIuYml0Z28uVW5zcGVudFtdPjtcblxuICAvKipcbiAgICogQHBhcmFtIHR4aWRcbiAgICovXG4gIGdldFRyYW5zYWN0aW9uU3BlbmRzKHR4aWQ6IHN0cmluZyk6IFByb21pc2U8T3V0cHV0U3BlbmRbXT47XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBhZGRyZXNzXG4gICAqIEByZXR1cm4gdW5zcGVudCBvdXRwdXRzIGZvciBhZGRyZXNzZXNcbiAgICovXG4gIGdldFVuc3BlbnRzRm9yQWRkcmVzc2VzKGFkZHJlc3M6IHN0cmluZ1tdKTogUHJvbWlzZTx1dHhvbGliLmJpdGdvLlVuc3BlbnRbXT47XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGVmZmljaWVudGx5IGZldGNoIG91dHB1dCBkYXRhLlxuICogVHlwaWNhbCB3ZSBjYW4gcXVlcnkgb3V0cHV0IGRhdGEgZm9yIGFsbCBvdXRwdXRzIG9mIGEgdHJhbnNhY3Rpb24sIHNvIHdlIGZpcnN0IGZldGNoIGFsbFxuICogdGhlIG91dHB1dCBsaXN0IHZpYSBgZmAgYW5kIHRoZW4gcGljayB0aGUgb3V0cHV0IGRhdGEgZnJvbSB0aGUgcmVzdWx0LlxuICogQHBhcmFtIG91dHBvaW50c1xuICogQHBhcmFtIGYgLSBtYXBzIHR4aWQgdG8gYSBsaXN0IG9mIG91dHB1dHMgd2l0aCB0eXBlIFRPdXRcbiAqIEByZXR1cm4gbGlzdCBvZiBUT3V0IGNvcnJlc3BvbmRpbmcgdG8gb3V0cHV0c1xuICovXG5hc3luYyBmdW5jdGlvbiBtYXBJbnB1dHM8VE91dD4oXG4gIG91dHBvaW50czogdXR4b2xpYi5iaXRnby5UeE91dFBvaW50W10sXG4gIGY6ICh0eGlkOiBzdHJpbmcpID0+IFByb21pc2U8VE91dFtdPlxuKTogUHJvbWlzZTxUT3V0W10+IHtcbiAgY29uc3QgdHhpZHMgPSBbLi4ubmV3IFNldChvdXRwb2ludHMubWFwKChpKSA9PiBpLnR4aWQpKV07XG4gIGNvbnN0IHR4TWFwID0gbmV3IE1hcChhd2FpdCBtYXBTZXJpZXModHhpZHMsIGFzeW5jICh0eGlkKSA9PiBbdHhpZCwgYXdhaXQgZih0eGlkKV0pKTtcbiAgcmV0dXJuIG91dHBvaW50cy5tYXAoKGkpID0+IHtcbiAgICBjb25zdCBhcnIgPSB0eE1hcC5nZXQoaS50eGlkKTtcbiAgICBpZiAoYXJyKSB7XG4gICAgICBpZiAoaS52b3V0IGluIGFycikge1xuICAgICAgICByZXR1cm4gYXJyW2kudm91dF07XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvdWxkIG5vdCBmaW5kIG91dHB1dCAke2kudm91dH1gKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBjb3VsZCBub3QgZmluZCB0eCAke2kudHhpZH1gKTtcbiAgfSk7XG59XG5cbi8qKlxuICogRmV0Y2ggdHJhbnNhY3Rpb24gaW5wdXRzIGZyb20gdHJhbnNhY3Rpb24gaW5wdXQgbGlzdFxuICogQHBhcmFtIGluc1xuICogQHBhcmFtIGFwaVxuICogQHBhcmFtIG5ldHdvcmtcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoSW5wdXRzKFxuICBpbnM6IHV0eG9saWIuVHhJbnB1dFtdLFxuICBhcGk6IFV0eG9BcGksXG4gIG5ldHdvcms6IHV0eG9saWIuTmV0d29ya1xuKTogUHJvbWlzZTx1dHhvbGliLlR4T3V0cHV0W10+IHtcbiAgcmV0dXJuIG1hcElucHV0cyhcbiAgICBpbnMubWFwKChpbnB1dCkgPT4gdXR4b2xpYi5iaXRnby5nZXRPdXRwdXRJZEZvcklucHV0KGlucHV0KSksXG4gICAgYXN5bmMgKHR4aWQpID0+IHV0eG9saWIuYml0Z28uY3JlYXRlVHJhbnNhY3Rpb25Gcm9tSGV4KGF3YWl0IGFwaS5nZXRUcmFuc2FjdGlvbkhleCh0eGlkKSwgbmV0d29yaykub3V0c1xuICApO1xufVxuXG4vKipcbiAqIEZldGNoIHRyYW5zYWN0aW9uIHNwZW5kIHN0YXR1cyBvdXRwb2ludHMuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaFRyYW5zYWN0aW9uU3BlbmRzKFxuICBvdXRwb2ludHM6IHV0eG9saWIuYml0Z28uVHhPdXRQb2ludFtdLFxuICBhcGk6IFV0eG9BcGlcbik6IFByb21pc2U8T3V0cHV0U3BlbmRbXT4ge1xuICByZXR1cm4gbWFwSW5wdXRzKG91dHBvaW50cywgYXN5bmMgKHR4aWQpID0+IGF3YWl0IGFwaS5nZXRUcmFuc2FjdGlvblNwZW5kcyh0eGlkKSk7XG59XG4iXX0=