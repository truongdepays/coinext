"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockchairApi = void 0;
const bitgo_1 = require("@bitgo/utxo-lib/dist/src/bitgo");
const BaseHttpClient_1 = require("../BaseHttpClient");
const ApiBuilder_1 = require("../ApiBuilder");
class ErrorKeyNotInResponse extends Error {
    constructor(key) {
        super(`key ${key} not in response`);
    }
}
function unwrapRecord(body, key) {
    if (!(key in body.data)) {
        throw new ErrorKeyNotInResponse(key);
    }
    return body.data[key];
}
class BlockchairApi {
    constructor(client, apiToken) {
        this.client = client;
        this.apiToken = apiToken !== null && apiToken !== void 0 ? apiToken : process.env.BLOCKCHAIR_TOKEN;
    }
    static forCoin(coinName, params = {}) {
        // https://blockchair.com/api/docs#link_M0
        let blockchain;
        switch (coinName) {
            case 'btc':
                blockchain = 'bitcoin';
                break;
            case 'tbtc':
                blockchain = 'bitcoin/testnet';
                break;
            case 'bsv':
                blockchain = 'bitcoin-sv';
                break;
            case 'bch':
                blockchain = 'bitcoin-cash';
                break;
            case 'bcha':
                blockchain = 'ecash';
                break;
            case 'ltc':
                blockchain = 'litecoin';
                break;
            case 'dash':
                blockchain = 'dash';
                break;
            case 'zec':
                blockchain = 'zcash';
                break;
            default:
                throw new ApiBuilder_1.ApiNotImplementedError(coinName);
        }
        const { httpClient = new BaseHttpClient_1.BaseHttpClient() } = params;
        return new BlockchairApi(httpClient.withBaseUrl(`https://api.blockchair.com/${blockchain}`), params.apiToken);
    }
    get(path) {
        return this.client.get(path + (this.apiToken ? `?key=${this.apiToken}` : ''));
    }
    async getAddressInfo(address) {
        if (!address || address.length === 0) {
            throw new Error('invalid address');
        }
        // https://blockchair.com/api/docs#link_300
        return (await this.get(`/dashboards/address/${address}`)).map((body) => {
            return {
                txCount: body.data[address].address.transaction_count,
                balance: body.data[address].address.balance,
            };
        });
    }
    async getUnspentsForAddresses(addr) {
        if (addr.length > 100) {
            throw new Error(`invalid size`);
        }
        // https://blockchair.com/api/docs#link_300
        return (await this.get(`/dashboards/addresses/${addr.join(',')}`)).map((body) => {
            return addr.flatMap((a) => {
                return body.data.utxo.map((unspent) => {
                    return {
                        id: bitgo_1.formatOutputId({ txid: unspent.transaction_hash, vout: unspent.index }),
                        address: a,
                        value: unspent.value,
                    };
                });
            });
        });
    }
    async getTransaction(txid) {
        return (await this.get(`/dashboards/transaction/${txid}`)).map((body) => {
            return unwrapRecord(body, txid);
        });
    }
    async getTransactionStatus(txid) {
        let transaction;
        try {
            transaction = (await this.getTransaction(txid)).transaction;
        }
        catch (e) {
            if (e instanceof ErrorKeyNotInResponse) {
                return { found: false };
            }
            throw e;
        }
        const { block_id, time } = transaction;
        const date = new Date(Date.parse(time.replace(' ', 'T') + '.000Z' /* force UTC parsing */));
        return block_id === -1
            ? { found: true, confirmed: false }
            : {
                found: true,
                confirmed: true,
                blockHeight: block_id,
                date,
            };
    }
    async getTransactionInputs(txid) {
        return (await this.getTransaction(txid)).inputs.map((i) => {
            return {
                id: bitgo_1.formatOutputId({ txid: i.transaction_hash, vout: i.index }),
                address: i.recipient,
                value: i.value,
            };
        });
    }
    async getTransactionSpends(txid) {
        return (await this.getTransaction(txid)).outputs.map((o) => o.spending_transaction_hash
            ? {
                txid: o.spending_transaction_hash,
                vin: o.spending_index,
            }
            : { txid: undefined, vin: undefined });
    }
    async getTransactionHex(txid) {
        return (await this.get(`/raw/transaction/${txid}`)).map((body) => {
            return unwrapRecord(body, txid).raw_transaction;
        });
    }
}
exports.BlockchairApi = BlockchairApi;
//# sourceMappingURL=data:application/json;base64,