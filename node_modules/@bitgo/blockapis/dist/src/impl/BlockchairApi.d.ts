import { Unspent } from '@bitgo/utxo-lib/dist/src/bitgo';
import { HttpClient, Response } from '../BaseHttpClient';
import { AddressApi, AddressInfo } from '../AddressApi';
import { OutputSpend, UtxoApi } from '../UtxoApi';
import { TransactionStatus } from '../TransactionApi';
declare type BlockchairUnspent = {
    transaction_hash: string;
    index: number;
    recipient: string;
    value: number;
    block_id: number;
    script_hex: string;
    spending_transaction_hash: string;
    spending_index: number;
};
declare type BlockchairTransaction = {
    transaction: {
        /**
          The block number it's included in.
          If the transaction is in the mempool, data.{:hash}áµ¢.transaction.block_id yields -1
        */
        block_id: number;
        /**
         * Like https://tc39.es/ecma262/#sec-date-time-string-format but with a space instead of 'T'
         * YYYY-MM-DD HH:mm:ss
         */
        time: string;
    };
    inputs: BlockchairUnspent[];
    outputs: BlockchairUnspent[];
};
export declare class BlockchairApi implements AddressApi, UtxoApi {
    client: HttpClient;
    protected readonly apiToken?: string;
    static forCoin(coinName: string, params?: {
        apiToken?: string;
        httpClient?: HttpClient;
    }): BlockchairApi;
    constructor(client: HttpClient, apiToken?: string);
    get<T>(path: string): Promise<Response<T>>;
    getAddressInfo(address: string): Promise<AddressInfo>;
    getUnspentsForAddresses(addr: string[]): Promise<Unspent[]>;
    getTransaction(txid: string): Promise<BlockchairTransaction>;
    getTransactionStatus(txid: string): Promise<TransactionStatus>;
    getTransactionInputs(txid: string): Promise<Unspent[]>;
    getTransactionSpends(txid: string): Promise<OutputSpend[]>;
    getTransactionHex(txid: string): Promise<string>;
}
export {};
//# sourceMappingURL=BlockchairApi.d.ts.map