"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
var coinModules = __importStar(require(".."));
var statics_1 = require("@bitgo/statics");
var errors_1 = require("../coin/baseCoin/errors");
/**
 * Register the factory method for coin utils methods
 * throw if coin not supported
 * @param {String} coinName
 * @returns {BaseUtils}
 */
function register(coinName) {
    var sanitizedCoinName = statics_1.coins.get(coinName.trim().toLowerCase()).family;
    var key = Object.keys(coinModules)
        .filter(function (k) { return coinModules[k].Utils; })
        .find(function (k) { return k.trim().toLowerCase() === sanitizedCoinName; });
    if (key) {
        return new coinModules[key].Utils();
    }
    throw new errors_1.NotSupported(coinName + " util factory not supported");
}
exports.register = register;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhDQUFrQztBQUVsQywwQ0FBdUM7QUFDdkMsa0RBQXVEO0FBRXZEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsUUFBUSxDQUFDLFFBQWdCO0lBQ3ZDLElBQU0saUJBQWlCLEdBQUcsZUFBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDMUUsSUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDakMsTUFBTSxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBcEIsQ0FBb0IsQ0FBQztTQUNuQyxJQUFJLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLEtBQUssaUJBQWlCLEVBQTVDLENBQTRDLENBQUMsQ0FBQztJQUM3RCxJQUFJLEdBQUcsRUFBRTtRQUNQLE9BQU8sSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDckM7SUFDRCxNQUFNLElBQUkscUJBQVksQ0FBSSxRQUFRLGdDQUE2QixDQUFDLENBQUM7QUFDbkUsQ0FBQztBQVRELDRCQVNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY29pbk1vZHVsZXMgZnJvbSAnLi4nO1xuaW1wb3J0IHsgQmFzZVV0aWxzIH0gZnJvbSAnLi4vY29pbi9iYXNlQ29pbic7XG5pbXBvcnQgeyBjb2lucyB9IGZyb20gJ0BiaXRnby9zdGF0aWNzJztcbmltcG9ydCB7IE5vdFN1cHBvcnRlZCB9IGZyb20gJy4uL2NvaW4vYmFzZUNvaW4vZXJyb3JzJztcblxuLyoqXG4gKiBSZWdpc3RlciB0aGUgZmFjdG9yeSBtZXRob2QgZm9yIGNvaW4gdXRpbHMgbWV0aG9kc1xuICogdGhyb3cgaWYgY29pbiBub3Qgc3VwcG9ydGVkXG4gKiBAcGFyYW0ge1N0cmluZ30gY29pbk5hbWVcbiAqIEByZXR1cm5zIHtCYXNlVXRpbHN9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlcihjb2luTmFtZTogc3RyaW5nKTogQmFzZVV0aWxzIHtcbiAgY29uc3Qgc2FuaXRpemVkQ29pbk5hbWUgPSBjb2lucy5nZXQoY29pbk5hbWUudHJpbSgpLnRvTG93ZXJDYXNlKCkpLmZhbWlseTtcbiAgY29uc3Qga2V5ID0gT2JqZWN0LmtleXMoY29pbk1vZHVsZXMpXG4gICAgLmZpbHRlcigoaykgPT4gY29pbk1vZHVsZXNba10uVXRpbHMpXG4gICAgLmZpbmQoKGspID0+IGsudHJpbSgpLnRvTG93ZXJDYXNlKCkgPT09IHNhbml0aXplZENvaW5OYW1lKTtcbiAgaWYgKGtleSkge1xuICAgIHJldHVybiBuZXcgY29pbk1vZHVsZXNba2V5XS5VdGlscygpO1xuICB9XG4gIHRocm93IG5ldyBOb3RTdXBwb3J0ZWQoYCR7Y29pbk5hbWV9IHV0aWwgZmFjdG9yeSBub3Qgc3VwcG9ydGVkYCk7XG59XG4iXX0=