"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBase58 = exports.bigIntToHex = exports.toHex = exports.isValidBLSPublicKey = exports.isValidBLSPrivateKey = exports.isValidEd25519PublicKey = exports.isValidEd25519SecretKey = exports.isValidEd25519Seed = exports.isValidPrv = exports.isValidPub = exports.isValidXprv = exports.isValidXpub = exports.rawPrvToExtendedKeys = exports.xprvToRawPrv = exports.xpubToUncompressedPub = void 0;
var bip32 = __importStar(require("bip32"));
var bitcoinjs_lib_1 = require("bitcoinjs-lib");
var nacl = __importStar(require("tweetnacl"));
var hex = __importStar(require("@stablelib/hex"));
var bls = __importStar(require("noble-bls12-381"));
var ethereumjs_utils_old_1 = require("ethereumjs-utils-old");
var utils_1 = require("../coin/hbar/utils");
var bs58_1 = __importDefault(require("bs58"));
/**
 * @param {string} xpub - a base-58 encoded extended public key (BIP32)
 * @returns {string} the uncompressed public key in hexadecimal
 */
function xpubToUncompressedPub(xpub) {
    if (!isValidXpub(xpub)) {
        throw new Error('invalid xpub');
    }
    return bitcoinjs_lib_1.ECPair.fromPublicKey(bip32.fromBase58(xpub, bitcoinjs_lib_1.networks.bitcoin).publicKey, {
        compressed: false,
    }).publicKey.toString('hex');
}
exports.xpubToUncompressedPub = xpubToUncompressedPub;
/**
 * @param {string} xprv - base58-encoded extended private key (BIP32)
 * @returns {string} the hex-encoded raw private key
 */
function xprvToRawPrv(xprv) {
    if (!isValidXprv(xprv)) {
        throw new Error('invalid xprv');
    }
    var privateKey = bip32.fromBase58(xprv, bitcoinjs_lib_1.networks.bitcoin).privateKey;
    if (!privateKey) {
        throw new Error('invalid xprv');
    }
    return privateKey.toString('hex');
}
exports.xprvToRawPrv = xprvToRawPrv;
/**
 * @param {string} prv - Private key in hex format to get the extended keys for
 * @returns {ExtendedKeys} xprv and xpub in string format
 */
function rawPrvToExtendedKeys(prv) {
    var hd = bip32.fromPrivateKey(Buffer.from(prv, 'hex'), Buffer.alloc(32));
    return {
        xprv: hd.toBase58(),
        xpub: hd.neutered().toBase58(),
    };
}
exports.rawPrvToExtendedKeys = rawPrvToExtendedKeys;
/**
 * Whether the input is a valid BIP32 xpub or not
 *
 * @param xpub
 */
function isValidXpub(xpub) {
    if (xpub.substr(0, 4) !== 'xpub') {
        // check for xpub formats we don't support, such as tpub
        return false;
    }
    try {
        bip32.fromBase58(xpub, bitcoinjs_lib_1.networks.bitcoin);
    }
    catch (err) {
        return false;
    }
    // if HD generation didn't throw, it is a valid xpub
    return true;
}
exports.isValidXpub = isValidXpub;
/**
 * Whether the input is a valid BIP32 xprv or not
 *
 * @param xprv
 */
function isValidXprv(xprv) {
    if (xprv.substr(0, 4) !== 'xprv') {
        // check for xprv formats we don't support
        return false;
    }
    try {
        bip32.fromBase58(xprv, bitcoinjs_lib_1.networks.bitcoin);
    }
    catch (err) {
        return false;
    }
    // if HD generation didn't throw, it is a valid xprv
    return true;
}
exports.isValidXprv = isValidXprv;
/**
 * Whether the input is a valid secp256k1 public key
 *
 * @param pub
 */
function isValidPub(pub) {
    try {
        bitcoinjs_lib_1.ECPair.fromPublicKey(Buffer.from(pub, 'hex'));
    }
    catch (e) {
        return false;
    }
    return true;
}
exports.isValidPub = isValidPub;
/**
 * Whether the input is a valid secp256k1 private key
 *
 * @param prv
 */
function isValidPrv(prv) {
    try {
        bitcoinjs_lib_1.ECPair.fromPrivateKey(Buffer.from(prv, 'hex'));
    }
    catch (e) {
        return false;
    }
    return true;
}
exports.isValidPrv = isValidPrv;
/**
 * Whether the input is a valid ed25519 private key
 *
 * @param {string} prv A hexadecimal private key to validate
 * @returns {boolean} Whether the input is a valid public key or not
 */
function isValidEd25519Seed(prv) {
    try {
        var decodedPrv = utils_1.toUint8Array(prv);
        return decodedPrv.length === nacl.sign.seedLength;
    }
    catch (e) {
        return false;
    }
}
exports.isValidEd25519Seed = isValidEd25519Seed;
/**
 * Whether the input is a valid ed25519 private key
 *
 * @param {string} prv A hexadecimal private key to validate
 * @returns {boolean} Whether the input is a valid public key or not
 */
function isValidEd25519SecretKey(prv) {
    try {
        var decodedPrv = utils_1.toUint8Array(prv);
        return decodedPrv.length === nacl.sign.secretKeyLength;
    }
    catch (e) {
        return false;
    }
}
exports.isValidEd25519SecretKey = isValidEd25519SecretKey;
/**
 * Whether the input is a valid ed25519 public key
 *
 * @param {string} pub A hexadecimal public key to validate
 * @returns {boolean} Whether the input is a valid public key or not
 */
function isValidEd25519PublicKey(pub) {
    try {
        var decodedPub = new Uint8Array(Buffer.from(pub, 'hex'));
        return decodedPub.length === nacl.sign.publicKeyLength;
    }
    catch (e) {
        return false;
    }
}
exports.isValidEd25519PublicKey = isValidEd25519PublicKey;
/**
 * Whether the input is a valid BLS private key
 *
 * @param {string} prv a private key to validate
 * @returns {boolean} Whether the input is a valid private key or not
 */
function isValidBLSPrivateKey(prv) {
    try {
        return bls.Fr.isValid(BigInt(prv));
    }
    catch (e) {
        return false;
    }
}
exports.isValidBLSPrivateKey = isValidBLSPrivateKey;
/**
 * Whether input is a valid BLS public key
 *
 * @param {string} pub the public key to validate
 * @returns {boolean} Whether input is a valid public key or not
 */
function isValidBLSPublicKey(pub) {
    try {
        bls.PointG1.fromCompressedHex(ethereumjs_utils_old_1.stripHexPrefix(pub)).assertValidity();
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.isValidBLSPublicKey = isValidBLSPublicKey;
/**
 * Returns an hex string of the given buffer
 *
 * @param {Buffer | Uint8Array} buffer - the buffer to be converted to hex
 * @returns {string} - the hex value
 */
function toHex(buffer) {
    return hex.encode(buffer, true);
}
exports.toHex = toHex;
/**
 * Returns an hex string of the given bigint
 *
 * @param {bigint} bigint - the bigint to be converted to hex
 * @returns {string} - the hex value
 */
function bigIntToHex(bigint) {
    var hex = bigint.toString(16);
    return '0x' + '0'.slice(0, hex.length % 2) + hex;
}
exports.bigIntToHex = bigIntToHex;
/**
 * Check if base58 decoded string is equale to length
 *
 * @param {string} value - string to be checked
 * @param {number} length - expected decoded length
 * @return {boolean} if the string can decoded as base58 and match the expected length
 */
function isBase58(value, length) {
    try {
        return !!value && bs58_1.default.decode(value).length === length;
    }
    catch (e) {
        return false;
    }
}
exports.isBase58 = isBase58;
//# sourceMappingURL=data:application/json;base64,