"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = exports.getBuilder = exports.supportedCoins = exports.Near = exports.Dot = exports.Sol = exports.Algo = exports.Stx = exports.Xrp = exports.Cspr = exports.Hbar = exports.Celo = exports.Rbtc = exports.AvaxC = exports.Etc = exports.Eth2 = exports.Eth = exports.Xtz = exports.Trx = exports.BaseCoin = exports.Ed25519KeyDeriver = exports.crypto = exports.Ed25519BIP32 = exports.Eddsa = void 0;
var statics_1 = require("@bitgo/statics");
var errors_1 = require("./coin/baseCoin/errors");
var tss_1 = __importDefault(require("./mpc/tss"));
exports.Eddsa = tss_1.default;
var hdTree_1 = require("./mpc/hdTree");
Object.defineProperty(exports, "Ed25519BIP32", { enumerable: true, get: function () { return hdTree_1.Ed25519BIP32; } });
var crypto = __importStar(require("./utils/crypto"));
exports.crypto = crypto;
var ed25519KeyDeriver_1 = require("./utils/ed25519KeyDeriver");
Object.defineProperty(exports, "Ed25519KeyDeriver", { enumerable: true, get: function () { return ed25519KeyDeriver_1.Ed25519KeyDeriver; } });
// coins
var BaseCoin = __importStar(require("./coin/baseCoin"));
exports.BaseCoin = BaseCoin;
var Trx = __importStar(require("./coin/trx"));
exports.Trx = Trx;
var Xtz = __importStar(require("./coin/xtz"));
exports.Xtz = Xtz;
var Eth = __importStar(require("./coin/eth"));
exports.Eth = Eth;
var Eth2 = __importStar(require("./coin/eth2"));
exports.Eth2 = Eth2;
var Etc = __importStar(require("./coin/etc"));
exports.Etc = Etc;
var AvaxC = __importStar(require("./coin/avaxc"));
exports.AvaxC = AvaxC;
var Rbtc = __importStar(require("./coin/rbtc"));
exports.Rbtc = Rbtc;
var Celo = __importStar(require("./coin/celo"));
exports.Celo = Celo;
var Hbar = __importStar(require("./coin/hbar"));
exports.Hbar = Hbar;
var Cspr = __importStar(require("./coin/cspr"));
exports.Cspr = Cspr;
var Xrp = __importStar(require("./coin/xrp"));
exports.Xrp = Xrp;
var Stx = __importStar(require("./coin/stx"));
exports.Stx = Stx;
var Algo = __importStar(require("./coin/algo"));
exports.Algo = Algo;
var Sol = __importStar(require("./coin/sol"));
exports.Sol = Sol;
var Dot = __importStar(require("./coin/dot"));
exports.Dot = Dot;
var Near = __importStar(require("./coin/near"));
exports.Near = Near;
var coinBuilderMap = {
    trx: Trx.WrappedBuilder,
    ttrx: Trx.WrappedBuilder,
    xtz: Xtz.TransactionBuilder,
    txtz: Xtz.TransactionBuilder,
    etc: Etc.TransactionBuilder,
    tetc: Etc.TransactionBuilder,
    eth: Eth.TransactionBuilder,
    teth: Eth.TransactionBuilder,
    gteth: Eth.TransactionBuilder,
    rbtc: Rbtc.TransactionBuilder,
    trbtc: Rbtc.TransactionBuilder,
    celo: Celo.TransactionBuilder,
    tcelo: Celo.TransactionBuilder,
    avaxc: AvaxC.TransactionBuilder,
    tavaxc: AvaxC.TransactionBuilder,
    hbar: Hbar.TransactionBuilderFactory,
    thbar: Hbar.TransactionBuilderFactory,
    cspr: Cspr.TransactionBuilderFactory,
    tcspr: Cspr.TransactionBuilderFactory,
    xrp: Xrp.TransactionBuilderFactory,
    txrp: Xrp.TransactionBuilderFactory,
    stx: Stx.TransactionBuilderFactory,
    tstx: Stx.TransactionBuilderFactory,
    algo: Algo.TransactionBuilderFactory,
    talgo: Algo.TransactionBuilderFactory,
    sol: Sol.TransactionBuilderFactory,
    tsol: Sol.TransactionBuilderFactory,
    dot: Dot.TransactionBuilderFactory,
    tdot: Dot.TransactionBuilderFactory,
    near: Near.TransactionBuilderFactory,
};
/**
 * Get the list of coin tickers supported by this library.
 */
exports.supportedCoins = Object.keys(coinBuilderMap);
/**
 * Get a transaction builder for the given coin.
 *
 * @param {string} coinName One of the {@code supportedCoins}
 * @returns {any} An instance of a {@code TransactionBuilder}
 */
function getBuilder(coinName) {
    var builderClass = coinBuilderMap[coinName];
    if (!builderClass) {
        throw new errors_1.BuildTransactionError("Coin " + coinName + " not supported");
    }
    return new builderClass(statics_1.coins.get(coinName));
}
exports.getBuilder = getBuilder;
/**
 * Register a new coin instance with its builder factory
 *
 * @param {string} coinName coin name as it was registered in @bitgo/statics
 * @param {any} builderFactory the builder factory class for that coin
 * @returns {any} the factory instance for the registered coin
 */
function register(coinName, builderFactory) {
    var coinConfig = statics_1.coins.get(coinName);
    var factory = new builderFactory(coinConfig);
    // coinBuilderMap[coinName] = factory;
    coinBuilderMap[coinName] = builderFactory; // For now register the constructor function until reimplement getBuilder method
    return factory;
}
exports.register = register;
//# sourceMappingURL=data:application/json;base64,