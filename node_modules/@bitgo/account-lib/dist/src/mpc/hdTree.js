"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ed25519BIP32 = void 0;
/**
 * An interface for calculating a subkey in an HD key scheme.
 */
var crypto_1 = require("crypto");
var curves_1 = require("./curves");
var util_1 = require("./util");
// 2^256
var base = BigInt('0x010000000000000000000000000000000000000000000000000000000000000000');
function deriveEd25519Helper(index, chaincode, pk, sk) {
    if (index === void 0) { index = 0; }
    var zmac = crypto_1.createHmac('sha512', util_1.bigIntToBufferBE(chaincode, 32));
    var imac = crypto_1.createHmac('sha512', util_1.bigIntToBufferBE(chaincode, 32));
    var seri = Buffer.alloc(4);
    seri.writeUInt32LE(index, 0);
    if (((index >>> 0) & 0x80000000) === 0) {
        // Normal derivation:
        // Z = HMAC-SHA512(Key = cpar, Data = 0x02 || serP(point(kpar)) || ser32(i)).
        // I = HMAC-SHA512(Key = cpar, Data = 0x03 || serP(point(kpar)) || ser32(i)).
        zmac.update('\x02');
        zmac.update(util_1.bigIntToBufferLE(pk, 32));
        zmac.update(seri);
        imac.update('\x03');
        imac.update(util_1.bigIntToBufferLE(pk, 32));
        imac.update(seri);
    }
    else {
        if (sk === undefined) {
            throw new Error("Can't performed hardened derivation without private key");
        }
        // Hardened derivation:
        // Z = HMAC-SHA512(Key = cpar, Data = 0x00 || ser256(left(kpar)) || ser32(i)).
        // I = HMAC-SHA512(Key = cpar, Data = 0x01 || ser256(left(kpar)) || ser32(i)).
        zmac.update('\x00');
        zmac.update(util_1.bigIntToBufferLE(sk, 32));
        zmac.update(seri);
        imac.update('\x01');
        imac.update(util_1.bigIntToBufferLE(sk, 32));
        imac.update(seri);
    }
    return [zmac.digest(), imac.digest()];
}
var Ed25519BIP32 = /** @class */ (function () {
    function Ed25519BIP32() {
    }
    Ed25519BIP32.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!Ed25519BIP32.initialized) return [3 /*break*/, 2];
                        return [4 /*yield*/, curves_1.Ed25519Curve.initialize()];
                    case 1:
                        _a.sent();
                        Ed25519BIP32.initialized = true;
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    Ed25519BIP32.prototype.publicDerive = function (keychain, path) {
        var indices = path
            .replace(/^m\//, '')
            .split('/')
            .map(function (index) { return parseInt(index, 10); });
        function deriveIndex(acc, index) {
            var pk = acc[0], chaincode = acc[1];
            var _a = deriveEd25519Helper(index, chaincode, pk), zout = _a[0], iout = _a[1];
            var zl = zout.slice(0, 32);
            // left = kl + 8 * trunc28(zl)
            var t = BigInt(8) * util_1.bigIntFromBufferLE(zl.slice(0, 28));
            var left = Ed25519BIP32.curve.pointAdd(pk, Ed25519BIP32.curve.basePointMult(t));
            return [left, util_1.bigIntFromBufferBE(iout.slice(32))];
        }
        var subkey = indices.reduce(deriveIndex, deriveIndex([keychain.pk, keychain.chaincode], indices.shift()));
        return { pk: subkey[0], chaincode: subkey[1] };
    };
    Ed25519BIP32.prototype.privateDerive = function (keychain, path) {
        var indices = path
            .replace(/^m\//, '')
            .split('/')
            .map(function (index) { return parseInt(index, 10); });
        function deriveIndex(acc, index) {
            var pk = acc[0], sk = acc[1], prefix = acc[2], chaincode = acc[3];
            var _a = deriveEd25519Helper(index, chaincode, pk, sk), zout = _a[0], iout = _a[1];
            var zl = zout.slice(0, 32);
            var zr = zout.slice(32);
            // left = kl + 8 * trunc28(zl)
            var t = BigInt(8) * util_1.bigIntFromBufferLE(zl.slice(0, 28));
            var left_pk = Ed25519BIP32.curve.pointAdd(pk, Ed25519BIP32.curve.basePointMult(t));
            var left_sk = Ed25519BIP32.curve.scalarAdd(sk, t);
            // right = zr + kr
            var right = (prefix + util_1.bigIntFromBufferBE(zr)) % base;
            return [left_pk, left_sk, right, util_1.bigIntFromBufferBE(iout.slice(32))];
        }
        var _a = indices.reduce(deriveIndex, deriveIndex([keychain.pk, keychain.sk, keychain.prefix, keychain.chaincode], indices.shift())), pk = _a[0], sk = _a[1], prefix = _a[2], chaincode = _a[3];
        return { pk: pk, sk: sk, prefix: prefix, chaincode: chaincode };
    };
    Ed25519BIP32.curve = new curves_1.Ed25519Curve();
    Ed25519BIP32.initialized = false;
    return Ed25519BIP32;
}());
exports.Ed25519BIP32 = Ed25519BIP32;
//# sourceMappingURL=data:application/json;base64,