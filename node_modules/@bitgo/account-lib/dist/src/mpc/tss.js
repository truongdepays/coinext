"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Module provides functions for MPC using threshold signature scheme (TSS). It contains
 * functions for key generation and message signing with EdDSA.
 *
 *
 * ======================
 * EdDSA Key Generation
 * ======================
 * 1. Each signer generates their own key share, which involves a private u-share and a public y-share.
 * 2. Signers distribute their y-share to other signers.
 * 3. After exchanging y-shares the next phase is to combine key shares. Each signer combines their u-share
 *    with the y-shares received from other signers in order to generate a p-share for themselves. We
 *    also save j-shares for other signers.
 * 4. At this point the players do not distribute any shares and the first phase of the
 *    signing protocol is complete.
 *
 * ======================
 * EdDSA Signing
 * ======================
 * 1. The parties from key generation decide they want to sign something. They begin the signing protocol
 *    by generating shares of an ephemeral key.
 *
 *    a) Each signer uses his p-share and the j-shares stored for other players to generate his signing share.
 *    b) This results in each signer having a private x-share and public r-shares.
 *
 * 2. Signers distribute their r-shares to other signers.
 * 3. After exchanging r-shares, each signer signs their share of the ephemeral key using their private
 *    x-share with the r-shares from other signers.
 * 4. This results in each signer having a public g-share which they send to the other signers.
 * 5. After the signers broadcast their g-shares, the final signature can be re-constructed independently.
 */
var assert = require('assert');
var crypto_1 = require("crypto");
var curves_1 = require("./curves");
var shamir_1 = __importDefault(require("./shamir"));
var util_1 = require("./util");
// 2^256
var base = BigInt('0x010000000000000000000000000000000000000000000000000000000000000000');
var Eddsa = /** @class */ (function () {
    function Eddsa(hdTree) {
        this.hdTree = hdTree;
    }
    Eddsa.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!Eddsa.initialized) return [3 /*break*/, 2];
                        return [4 /*yield*/, curves_1.Ed25519Curve.initialize()];
                    case 1:
                        _a.sent();
                        Eddsa.initialized = true;
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    Eddsa.prototype.keyShare = function (index, threshold, numShares, seed) {
        assert(index > 0 && index <= numShares);
        if (seed && seed.length != 64) {
            throw new Error('Seed must have length 64');
        }
        var seedchain = seed !== null && seed !== void 0 ? seed : crypto_1.randomBytes(64);
        var actualSeed = seedchain.slice(0, 32);
        var chaincode = seedchain.slice(32);
        var h = crypto_1.createHash('sha512').update(actualSeed).digest();
        var u = util_1.clamp(util_1.bigIntFromBufferLE(h.slice(0, 32)));
        var y = Eddsa.curve.basePointMult(u);
        var split_u = Eddsa.shamir.split(u, threshold, numShares);
        var P_i = {
            i: index,
            t: threshold,
            n: numShares,
            y: util_1.bigIntToBufferLE(y, 32).toString('hex'),
            seed: actualSeed.toString('hex'),
            chaincode: chaincode.toString('hex'),
        };
        var shares = {
            uShare: P_i,
            yShares: {},
        };
        for (var ind in split_u) {
            var i = parseInt(ind, 10);
            if (i === index) {
                continue;
            }
            shares.yShares[i] = {
                i: i,
                j: P_i.i,
                y: util_1.bigIntToBufferLE(y, 32).toString('hex'),
                u: util_1.bigIntToBufferLE(split_u[ind], 32).toString('hex'),
                chaincode: chaincode.toString('hex'),
            };
        }
        return shares;
    };
    Eddsa.prototype.keyCombine = function (uShare, yShares) {
        var h = crypto_1.createHash('sha512').update(Buffer.from(uShare.seed, 'hex')).digest();
        var u = util_1.clamp(util_1.bigIntFromBufferLE(h.slice(0, 32)));
        var yValues = __spreadArray([uShare], yShares).map(function (share) { return util_1.bigIntFromBufferLE(Buffer.from(share.y, 'hex')); });
        var y = yValues.reduce(function (partial, share) { return Eddsa.curve.pointAdd(partial, share); });
        var chaincodes = __spreadArray([uShare], yShares).map(function (_a) {
            var chaincode = _a.chaincode;
            return util_1.bigIntFromBufferBE(Buffer.from(chaincode, 'hex'));
        });
        var chaincode = chaincodes.reduce(function (acc, chaincode) { return (acc + chaincode) % base; });
        var P_i = {
            i: uShare.i,
            t: uShare.t,
            n: uShare.n,
            y: util_1.bigIntToBufferLE(y, 32).toString('hex'),
            u: util_1.bigIntToBufferLE(u, 32).toString('hex'),
            prefix: h.slice(32).toString('hex'),
            chaincode: util_1.bigIntToBufferBE(chaincode, 32).toString('hex'),
        };
        var players = {
            pShare: P_i,
            jShares: {},
        };
        for (var ind = 0; ind < yShares.length; ind++) {
            var P_j = yShares[ind];
            players.jShares[P_j.j] = {
                i: P_j.j,
                j: P_i.i,
            };
        }
        return players;
    };
    /**
     * Derives a child public key from common keychain
     *
     * @param commonKeychain - common keychain as a hex string
     * @param path - bip32 path
     * @return {string} public key as a hex string
     */
    Eddsa.prototype.deriveUnhardened = function (commonKeychain, path) {
        if (this.hdTree === undefined) {
            throw new Error("Can't derive key without HDTree implementation");
        }
        var keychain = Buffer.from(commonKeychain, 'hex');
        var derivedPublicKeychain = this.hdTree.publicDerive({
            pk: util_1.bigIntFromBufferLE(keychain.slice(0, 32)),
            chaincode: util_1.bigIntFromBufferBE(keychain.slice(32)),
        }, path);
        return util_1.bigIntToBufferLE(derivedPublicKeychain.pk, 32).toString('hex');
    };
    Eddsa.prototype.keyDerive = function (uShare, yShares, path) {
        if (this.hdTree === undefined) {
            throw new Error("Can't derive key without HDTree implementation");
        }
        var h = crypto_1.createHash('sha512').update(Buffer.from(uShare.seed, 'hex')).digest();
        var yValues = __spreadArray([uShare], yShares).map(function (share) { return util_1.bigIntFromBufferLE(Buffer.from(share.y, 'hex')); });
        var y = yValues.reduce(function (partial, share) { return Eddsa.curve.pointAdd(partial, share); });
        var u = util_1.clamp(util_1.bigIntFromBufferLE(h.slice(0, 32)));
        var prefix = util_1.bigIntFromBufferBE(h.slice(32));
        var contribChaincode = util_1.bigIntFromBufferBE(Buffer.from(uShare.chaincode, 'hex'));
        var chaincodes = __spreadArray([
            contribChaincode
        ], yShares.map(function (_a) {
            var chaincode = _a.chaincode;
            return util_1.bigIntFromBufferBE(Buffer.from(chaincode, 'hex'));
        }));
        var chaincode = chaincodes.reduce(function (acc, chaincode) { return (acc + chaincode) % base; });
        // Derive subkey.
        var subkey = this.hdTree.privateDerive({ pk: y, sk: u, prefix: prefix, chaincode: chaincode }, path);
        // Calculate new public key contribution.
        var contribY = Eddsa.curve.basePointMult(subkey.sk);
        // Calculate new chaincode contribution.
        var chaincodeDelta = (base + subkey.chaincode - chaincode) % base;
        contribChaincode = (contribChaincode + chaincodeDelta) % base;
        // Calculate new u values.
        var split_u = Eddsa.shamir.split(subkey.sk, uShare.t, uShare.n);
        var P_i = {
            i: uShare.i,
            t: uShare.t,
            n: uShare.n,
            y: util_1.bigIntToBufferLE(subkey.pk, 32).toString('hex'),
            u: util_1.bigIntToBufferLE(subkey.sk, 32).toString('hex'),
            prefix: util_1.bigIntToBufferBE(subkey.prefix, 32).toString('hex'),
            chaincode: util_1.bigIntToBufferBE(subkey.chaincode, 32).toString('hex'),
        };
        var shares = {
            pShare: P_i,
            yShares: {},
        };
        for (var ind = 0; ind < yShares.length; ind++) {
            var P_j = yShares[ind];
            shares.yShares[P_j.j] = {
                i: P_j.j,
                j: P_i.i,
                y: util_1.bigIntToBufferLE(contribY, 32).toString('hex'),
                u: util_1.bigIntToBufferLE(split_u[P_j.j], 32).toString('hex'),
                chaincode: util_1.bigIntToBufferBE(contribChaincode, 32).toString('hex'),
            };
        }
        return shares;
    };
    Eddsa.prototype.signShare = function (message, pShare, jShares) {
        var indices = __spreadArray([pShare], jShares).map(function (_a) {
            var i = _a.i;
            return i;
        });
        var split_u = Eddsa.shamir.split(util_1.bigIntFromBufferLE(Buffer.from(pShare.u, 'hex')), pShare.t, pShare.n);
        // Generate nonce contribution.
        var prefix = Buffer.from(pShare.prefix, 'hex');
        var randomBuffer = crypto_1.randomBytes(32);
        var digest = crypto_1.createHash('sha512')
            .update(Buffer.concat([prefix, message, randomBuffer]))
            .digest();
        var r = Eddsa.curve.scalarReduce(util_1.bigIntFromBufferLE(digest));
        var R = Eddsa.curve.basePointMult(r);
        var split_r = Eddsa.shamir.split(r, indices.length, indices.length, indices);
        var P_i = {
            i: pShare.i,
            y: pShare.y,
            u: util_1.bigIntToBufferLE(split_u[pShare.i], 32).toString('hex'),
            r: util_1.bigIntToBufferLE(split_r[pShare.i], 32).toString('hex'),
            R: util_1.bigIntToBufferLE(R, 32).toString('hex'),
        };
        var resultShares = {
            xShare: P_i,
            rShares: {},
        };
        for (var ind = 0; ind < jShares.length; ind++) {
            var S_j = jShares[ind];
            resultShares.rShares[S_j.i] = {
                i: S_j.i,
                j: pShare.i,
                u: util_1.bigIntToBufferLE(split_u[S_j.i], 32).toString('hex'),
                r: util_1.bigIntToBufferLE(split_r[S_j.i], 32).toString('hex'),
                R: util_1.bigIntToBufferLE(R, 32).toString('hex'),
            };
        }
        return resultShares;
    };
    Eddsa.prototype.sign = function (message, playerShare, rShares, yShares) {
        if (yShares === void 0) { yShares = []; }
        var S_i = playerShare;
        var uValues = __spreadArray(__spreadArray([playerShare], rShares), yShares).map(function (_a) {
            var u = _a.u;
            return util_1.bigIntFromBufferLE(Buffer.from(u, 'hex'));
        });
        var x = uValues.reduce(function (acc, u) { return Eddsa.curve.scalarAdd(acc, u); });
        var RValues = __spreadArray([playerShare], rShares).map(function (_a) {
            var R = _a.R;
            return util_1.bigIntFromBufferLE(Buffer.from(R, 'hex'));
        });
        var R = RValues.reduce(function (partial, share) { return Eddsa.curve.pointAdd(partial, share); });
        var rValues = __spreadArray([playerShare], rShares).map(function (_a) {
            var r = _a.r;
            return util_1.bigIntFromBufferLE(Buffer.from(r, 'hex'));
        });
        var r = rValues.reduce(function (partial, share) { return Eddsa.curve.scalarAdd(partial, share); });
        var combinedBuffer = Buffer.concat([util_1.bigIntToBufferLE(R, 32), Buffer.from(S_i.y, 'hex'), message]);
        var digest = crypto_1.createHash('sha512').update(combinedBuffer).digest();
        var k = Eddsa.curve.scalarReduce(util_1.bigIntFromBufferLE(digest));
        var gamma = Eddsa.curve.scalarAdd(r, Eddsa.curve.scalarMult(k, x));
        var result = {
            i: playerShare.i,
            y: playerShare.y,
            gamma: util_1.bigIntToBufferLE(gamma, 32).toString('hex'),
            R: util_1.bigIntToBufferLE(R, 32).toString('hex'),
        };
        return result;
    };
    Eddsa.prototype.signCombine = function (shares) {
        var y = shares[0].y;
        var R = shares[0].R;
        var resultShares = {};
        for (var ind in shares) {
            var S_i = shares[ind];
            resultShares[S_i.i] = util_1.bigIntFromBufferLE(Buffer.from(S_i.gamma, 'hex'));
        }
        var sigma = Eddsa.shamir.combine(resultShares);
        var result = {
            y: y,
            R: R,
            sigma: util_1.bigIntToBufferLE(sigma, 32).toString('hex'),
        };
        return result;
    };
    Eddsa.prototype.verify = function (message, signature) {
        var publicKey = util_1.bigIntFromBufferLE(Buffer.from(signature.y, 'hex'));
        var signedMessage = Buffer.concat([
            Buffer.from(signature.R, 'hex'),
            Buffer.from(signature.sigma, 'hex'),
            message,
        ]);
        return Eddsa.curve.verify(publicKey, signedMessage);
    };
    Eddsa.curve = new curves_1.Ed25519Curve();
    Eddsa.shamir = new shamir_1.default(Eddsa.curve);
    Eddsa.initialized = false;
    return Eddsa;
}());
exports.default = Eddsa;
//# sourceMappingURL=data:application/json;base64,