import Curve from './curves';
export default class Shamir {
    curve: Curve;
    constructor(curve: Curve);
    /**
     * Perform Shamir sharing on the secret `secret` to the degree `threshold - 1` split `numShares`
     * ways. The split secret requires `threshold` shares to be reconstructed.
     *
     * @param secret secret to split
     * @param threshold share threshold required to reconstruct secret
     * @param numShares total number of shares to split to split secret into
     * @param indices
     * @returns Dictionary of shares. Each key is an int in the range 1<=x<=numShares
     * representing that share's free term.
     */
    split(secret: bigint, threshold: number, numShares: number, indices?: Array<number>): Record<number, bigint>;
    /**
     * Reconstitute a secret from a dictionary of shares. The number of shares must
     * be equal to `t` to reconstitute the original secret.
     *
     * @param shares dictionary of shares. each key is the free term of the share
     * @returns secret
     */
    combine(shares: Record<number, bigint>): bigint;
}
//# sourceMappingURL=shamir.d.ts.map