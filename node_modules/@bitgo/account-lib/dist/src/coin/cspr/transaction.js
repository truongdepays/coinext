"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
var _ = __importStar(require("lodash"));
var casper_js_sdk_1 = require("casper-js-sdk");
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var keyPair_1 = require("./keyPair");
var constants_1 = require("./constants");
var utils_1 = require("./utils");
var Transaction = /** @class */ (function (_super) {
    __extends(Transaction, _super);
    function Transaction(_coinConfig) {
        return _super.call(this, _coinConfig) || this;
    }
    /** @inheritdoc */
    Transaction.prototype.canSign = function (key) {
        return true;
    };
    Transaction.prototype.sign = function (keyPair) {
        var keys = keyPair.getKeys();
        if (!keys.prv) {
            throw new errors_1.SigningError('Missing private key');
        }
        if (this._deploy.approvals.some(function (ap) { return !ap.signer.startsWith(constants_1.SECP256K1_PREFIX) || !utils_1.isValidPublicKey(utils_1.removeAlgoPrefixFromHexValue(ap.signer)); })) {
            throw new errors_1.SigningError('Invalid deploy. Already signed with an invalid key');
        }
        var secpKeys = new casper_js_sdk_1.Keys.Secp256K1(Uint8Array.from(Buffer.from(keys.pub, 'hex')), Uint8Array.from(Buffer.from(keys.prv, 'hex')));
        var signedDeploy = casper_js_sdk_1.DeployUtil.signDeploy(this._deploy, secpKeys);
        this._signatures.push(signedDeploy.approvals[signedDeploy.approvals.length - 1].signature);
    };
    /**
     * Add a signature to this transaction and to and its deploy
     *
     * @param {string} signature The signature to add, in string hex format
     * @param {KeyPair} keyPair The key pair that created the signature
     */
    Transaction.prototype.addSignature = function (signature, keyPair) {
        var pub = keyPair.getKeys().pub;
        var signatureBuffer = Uint8Array.from(Buffer.from(signature, 'hex'));
        var pubKeyBuffer = Uint8Array.from(Buffer.from(pub, 'hex'));
        var parsedPublicKey = casper_js_sdk_1.Keys.Secp256K1.parsePublicKey(pubKeyBuffer, 'raw');
        var pubKeyHex = casper_js_sdk_1.Keys.Secp256K1.accountHex(parsedPublicKey);
        if (utils_1.removeAlgoPrefixFromHexValue(pubKeyHex) !== pub) {
            throw new errors_1.SigningError('Signer does not match signature');
        }
        var signedDeploy = casper_js_sdk_1.DeployUtil.setSignature(this._deploy, signatureBuffer, casper_js_sdk_1.CLPublicKey.fromSecp256K1(parsedPublicKey));
        var approval = _.last(signedDeploy.approvals);
        if (utils_1.removeAlgoPrefixFromHexValue(approval.signature) !== signature) {
            throw new errors_1.SigningError('Invalid signature');
        }
        this._signatures.push(signature);
    };
    /** @inheritdoc */
    Transaction.prototype.toBroadcastFormat = function () {
        if (!this.casperTx) {
            throw new errors_1.InvalidTransactionError('Empty transaction');
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var txJson = casper_js_sdk_1.DeployUtil.deployToJson(this.casperTx);
        // The new casper lib is converting the TTL from miliseconds to another date format, in this case 1 day
        // we need to leave it as ms for the HSM to be able to parse it
        txJson.deploy.header.ttl = this.casperTx.header.ttl + "ms";
        this.setOwnersInJson(txJson);
        this.setTransfersFieldsInJson(txJson);
        this.setDelegateFieldsInJson(txJson);
        return JSON.stringify(txJson);
    };
    /** @inheritdoc */
    Transaction.prototype.toJson = function () {
        var _a;
        var deployPayment = (_a = this._deploy.payment.asModuleBytes()) === null || _a === void 0 ? void 0 : _a.getArgByName('amount');
        if (!deployPayment) {
            throw new errors_1.InvalidTransactionError('Undefined fee');
        }
        var owner1Index = 0;
        var owner2Index = 1;
        var owner3Index = 2;
        var sourcePublicKey = Buffer.from(this._deploy.header.account.value()).toString('hex');
        var sourceAddress = new keyPair_1.KeyPair({ pub: sourcePublicKey }).getAddress();
        var result = {
            hash: Buffer.from(this._deploy.hash).toString('hex'),
            fee: { gasLimit: deployPayment.value().toString(), gasPrice: this._deploy.header.gasPrice.toString() },
            from: sourceAddress,
            startTime: new Date(this._deploy.header.timestamp).toISOString(),
            expiration: this._deploy.header.ttl,
            deployType: this._deploy.session.getArgByName(constants_1.TRANSACTION_TYPE).value(),
        };
        var transactionType = utils_1.getDeployType(this._deploy.session);
        switch (transactionType) {
            case baseCoin_1.TransactionType.Send:
                result.to = utils_1.getTransferDestinationAddress(this._deploy.session);
                result.amount = utils_1.getTransferAmount(this._deploy.session);
                result.transferId = utils_1.getTransferId(this._deploy.session);
                break;
            case baseCoin_1.TransactionType.WalletInitialization:
                result.owner1 = this.casperTx.session.getArgByName(constants_1.OWNER_PREFIX + owner1Index).value();
                result.owner2 = this.casperTx.session.getArgByName(constants_1.OWNER_PREFIX + owner2Index).value();
                result.owner3 = this.casperTx.session.getArgByName(constants_1.OWNER_PREFIX + owner3Index).value();
                break;
            case baseCoin_1.TransactionType.StakingLock:
                result.fromDelegate = utils_1.getDelegatorAddress(this.casperTx.session);
                result.validator = utils_1.getValidatorAddress(this.casperTx.session);
                result.amount = utils_1.getDelegateAmount(this.casperTx.session);
                break;
            case baseCoin_1.TransactionType.StakingUnlock:
                result.fromDelegate = utils_1.getDelegatorAddress(this.casperTx.session);
                result.validator = utils_1.getValidatorAddress(this.casperTx.session);
                result.amount = utils_1.getDelegateAmount(this.casperTx.session);
                break;
        }
        return result;
    };
    /**
     * Set the transaction type
     *
     * @param {TransactionType} transactionType The transaction type to be set
     */
    Transaction.prototype.setTransactionType = function (transactionType) {
        this._type = transactionType;
    };
    /**
     * Retrieve signatures from the deploy instance and load them into the signatures list
     */
    Transaction.prototype.loadPreviousSignatures = function () {
        var _this = this;
        if (this._deploy.approvals && this._deploy.approvals.length > 0) {
            this._deploy.approvals.forEach(function (approval) {
                _this._signatures.push(approval.signature);
            });
        }
    };
    /**
     * Set owners inside a json representing a wallet initialization tx.
     *
     * @param {Record<string, any>} txJson json to modify
     */
    Transaction.prototype.setOwnersInJson = function (txJson) {
        var _this = this;
        if (utils_1.getDeployType(this.casperTx.session) === baseCoin_1.TransactionType.WalletInitialization) {
            var argName_1 = 0;
            var argValue_1 = 1;
            var owner0 = 0;
            var owner1 = 1;
            var owner2 = 2;
            var ownersValues_1 = new Map();
            ownersValues_1.set(constants_1.TRANSACTION_TYPE, this.casperTx.session.getArgByName(constants_1.TRANSACTION_TYPE).value());
            [owner0, owner1, owner2].forEach(function (index) {
                ownersValues_1.set(constants_1.OWNER_PREFIX + index, _this.casperTx.session.getArgByName(constants_1.OWNER_PREFIX + index).value());
            });
            txJson['deploy']['session']['ModuleBytes']['args'].forEach(function (arg) {
                if (ownersValues_1.has(arg[argName_1])) {
                    arg[argValue_1]['parsed'] = ownersValues_1.get(arg[argName_1]);
                }
            });
        }
    };
    /**
     * Set transfer fields inside a json representing a transfer tx.
     *
     * @param {Record<string, any>} txJson json to modify
     */
    Transaction.prototype.setTransfersFieldsInJson = function (txJson) {
        if (utils_1.getDeployType(this.casperTx.session) === baseCoin_1.TransactionType.Send) {
            var argName_2 = 0;
            var argValue_2 = 1;
            var transferValues_1 = new Map();
            transferValues_1.set(constants_1.TRANSACTION_TYPE, this.casperTx.session.getArgByName(constants_1.TRANSACTION_TYPE).value());
            transferValues_1.set('amount', utils_1.getTransferAmount(this.casperTx.session));
            transferValues_1.set('to_address', utils_1.getTransferDestinationAddress(this.casperTx.session));
            var transferId = utils_1.getTransferId(this.casperTx.session);
            if (transferId !== undefined) {
                transferValues_1.set('id', transferId.toString());
            }
            txJson['deploy']['session']['Transfer']['args'].forEach(function (arg) {
                if (transferValues_1.has(arg[argName_2])) {
                    arg[argValue_2]['parsed'] = transferValues_1.get(arg[argName_2]);
                }
            });
        }
    };
    /**
     * Set delegate / undelegate fields inside a json representing the tx.
     *
     * @param {Record<string, any>} txJson json to modify
     */
    Transaction.prototype.setDelegateFieldsInJson = function (txJson) {
        if (utils_1.getDeployType(this.casperTx.session) === baseCoin_1.TransactionType.StakingLock ||
            utils_1.getDeployType(this.casperTx.session) === baseCoin_1.TransactionType.StakingUnlock) {
            var argName_3 = 0;
            var argValue_3 = 1;
            var delegateValues_1 = new Map();
            delegateValues_1.set(constants_1.TRANSACTION_TYPE, this.casperTx.session.getArgByName(constants_1.TRANSACTION_TYPE).value());
            delegateValues_1.set('amount', utils_1.getDelegateAmount(this.casperTx.session));
            delegateValues_1.set(constants_1.DELEGATE_FROM_ADDRESS, utils_1.getDelegatorAddress(this.casperTx.session));
            delegateValues_1.set(constants_1.DELEGATE_VALIDATOR, utils_1.getValidatorAddress(this.casperTx.session));
            txJson.deploy.session.ModuleBytes.args.forEach(function (arg) {
                if (delegateValues_1.has(arg[argName_3])) {
                    arg[argValue_3]['parsed'] = delegateValues_1.get(arg[argName_3]);
                }
            });
        }
    };
    Object.defineProperty(Transaction.prototype, "casperTx", {
        get: function () {
            return this._deploy;
        },
        set: function (deploy) {
            this._deploy = deploy;
        },
        enumerable: false,
        configurable: true
    });
    return Transaction;
}(baseCoin_1.BaseTransaction));
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,