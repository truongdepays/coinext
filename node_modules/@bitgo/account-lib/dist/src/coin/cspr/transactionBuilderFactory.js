"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilderFactory = void 0;
var casper_js_sdk_1 = require("casper-js-sdk");
var errors_1 = require("../baseCoin/errors");
var baseCoin_1 = require("../baseCoin");
var walletInitializationBuilder_1 = require("./walletInitializationBuilder");
var transferBuilder_1 = require("./transferBuilder");
var transaction_1 = require("./transaction");
var utils_1 = require("./utils");
var delegateBuilder_1 = require("./delegateBuilder");
var undelegateBuilder_1 = require("./undelegateBuilder");
var TransactionBuilderFactory = /** @class */ (function (_super) {
    __extends(TransactionBuilderFactory, _super);
    function TransactionBuilderFactory(_coinConfig) {
        return _super.call(this, _coinConfig) || this;
    }
    /** @inheritdoc */
    TransactionBuilderFactory.prototype.getWalletInitializationBuilder = function (tx) {
        return this.initializeBuilder(tx, new walletInitializationBuilder_1.WalletInitializationBuilder(this._coinConfig));
    };
    /**
     * Initialize an undelegate builder
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @returns {UndelegateBuilder} the builder initialized
     */
    TransactionBuilderFactory.prototype.getUndelegateBuilder = function (tx) {
        return this.initializeBuilder(tx, new undelegateBuilder_1.UndelegateBuilder(this._coinConfig));
    };
    /**
     * Initialize an delegate builder
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @returns {DelegateBuilder} the builder initialized
     */
    TransactionBuilderFactory.prototype.getDelegateBuilder = function (tx) {
        return this.initializeBuilder(tx, new delegateBuilder_1.DelegateBuilder(this._coinConfig));
    };
    /** @inheritDoc */
    TransactionBuilderFactory.prototype.getTransferBuilder = function (tx) {
        return this.initializeBuilder(tx, new transferBuilder_1.TransferBuilder(this._coinConfig));
    };
    /** @inheritDoc */
    TransactionBuilderFactory.prototype.from = function (raw) {
        this.validateRawTransaction(raw);
        var tx = new transaction_1.Transaction(this._coinConfig);
        var deployJson = JSON.parse(raw);
        try {
            tx.casperTx = casper_js_sdk_1.DeployUtil.deployFromJson(deployJson).unwrap();
        }
        catch (e) {
            throw new errors_1.InvalidTransactionError('Invalid transaction: ' + e);
        }
        var casperDeployType = utils_1.getDeployType(tx.casperTx.session);
        switch (casperDeployType) {
            case baseCoin_1.TransactionType.Send:
                return this.getTransferBuilder(tx);
            case baseCoin_1.TransactionType.WalletInitialization:
                return this.getWalletInitializationBuilder(tx);
            case baseCoin_1.TransactionType.StakingLock:
                return this.getDelegateBuilder(tx);
            case baseCoin_1.TransactionType.StakingUnlock:
                return this.getUndelegateBuilder(tx);
            default:
                throw new errors_1.InvalidTransactionError('Invalid transaction ' + tx.casperTx);
        }
    };
    /**
     * Initialize the builder with the given transaction
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @param {TransactionBuilder} builder - the builder to be initialized
     * @returns {TransactionBuilder} the builder initialized
     */
    TransactionBuilderFactory.prototype.initializeBuilder = function (tx, builder) {
        if (tx) {
            builder.initBuilder(tx);
        }
        return builder;
    };
    /**
     * Check the raw transaction has a valid format in the blockchain context, throw otherwise.
     *
     * @param {any} rawTransaction - Transaction in any format
     */
    TransactionBuilderFactory.prototype.validateRawTransaction = function (rawTransaction) {
        if (!rawTransaction) {
            throw new errors_1.ParseTransactionError('Invalid raw transaction: Undefined');
        }
        try {
            JSON.parse(rawTransaction);
        }
        catch (e) {
            throw new errors_1.ParseTransactionError('Invalid raw transaction format');
        }
    };
    return TransactionBuilderFactory;
}(baseCoin_1.BaseTransactionBuilderFactory));
exports.TransactionBuilderFactory = TransactionBuilderFactory;
//# sourceMappingURL=data:application/json;base64,