import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseKey } from '../baseCoin/iface';
import { TransactionBuilder } from './transactionBuilder';
import { Transaction } from './transaction';
export declare class UndelegateBuilder extends TransactionBuilder {
    private _validator;
    private _action;
    private _amount;
    private _contract;
    /**
     * Public constructor.
     *
     * @param {CoinConfig} _coinConfig Coin configuration object
     */
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    /** @inheritdoc */
    initBuilder(tx: Transaction): void;
    /** @inheritdoc */
    protected signImplementation(key: BaseKey): Transaction;
    /**
     * Build args needed to create a session, then we can send this session with the contract
     *
     * @returns {DelegateUndelegateContractArgs} contracts args to create a session
     */
    private buildUndelegateParameters;
    /**
     * Set the destination address where the funds will be sent,
     *
     * @param {string} address the 68 bits address to transfer funds to
     * @returns {UndelegateBuilder} the builder with the new parameter set
     */
    validator(address: string): this;
    /**
     * Set the amount to be transferred
     *
     * @param {string} amount amount to transfer
     * @returns {UndelegateBuilder} the builder with the new parameter set
     */
    amount(amount: string): this;
    /**
     * Validate mandatory fields in the class
     *
     * @throws {Error} In case of missing or invalid fields
     */
    validateMandatoryFields(): void;
}
//# sourceMappingURL=undelegateBuilder.d.ts.map