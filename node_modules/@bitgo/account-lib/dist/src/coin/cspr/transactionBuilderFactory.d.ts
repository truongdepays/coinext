import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseTransactionBuilderFactory } from '../baseCoin';
import { WalletInitializationBuilder } from './walletInitializationBuilder';
import { TransferBuilder } from './transferBuilder';
import { TransactionBuilder } from './transactionBuilder';
import { Transaction } from './transaction';
import { DelegateBuilder } from './delegateBuilder';
import { UndelegateBuilder } from './undelegateBuilder';
export declare class TransactionBuilderFactory extends BaseTransactionBuilderFactory {
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    getWalletInitializationBuilder(tx?: Transaction): WalletInitializationBuilder;
    /**
     * Initialize an undelegate builder
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @returns {UndelegateBuilder} the builder initialized
     */
    getUndelegateBuilder(tx?: Transaction): UndelegateBuilder;
    /**
     * Initialize an delegate builder
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @returns {DelegateBuilder} the builder initialized
     */
    getDelegateBuilder(tx?: Transaction): DelegateBuilder;
    /** @inheritDoc */
    getTransferBuilder(tx?: Transaction): TransferBuilder;
    /** @inheritDoc */
    from(raw: string): TransactionBuilder;
    /**
     * Initialize the builder with the given transaction
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @param {TransactionBuilder} builder - the builder to be initialized
     * @returns {TransactionBuilder} the builder initialized
     */
    private initializeBuilder;
    /**
     * Check the raw transaction has a valid format in the blockchain context, throw otherwise.
     *
     * @param {any} rawTransaction - Transaction in any format
     */
    private validateRawTransaction;
}
//# sourceMappingURL=transactionBuilderFactory.d.ts.map