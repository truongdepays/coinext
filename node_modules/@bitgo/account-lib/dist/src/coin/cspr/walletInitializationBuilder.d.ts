import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { TransactionBuilder } from './transactionBuilder';
import { Transaction } from './transaction';
export declare class WalletInitializationBuilder extends TransactionBuilder {
    private _owners;
    private _contract;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    /**
     * Build args needed to create a session, then we can send this session with the contract
     *
     * @returns {WalletInitContractArgs} contracts args to create a session
     */
    private buildWalletParameters;
    /** @inheritdoc */
    initBuilder(tx: Transaction): void;
    /**
     * Set one of the owners of the multisig wallet.
     *
     * @param {string} address The public key of the owner's account
     * @returns {WalletInitializationBuilder} This wallet initialization builder
     */
    owner(address: string): this;
    validateMandatoryFields(): void;
}
//# sourceMappingURL=walletInitializationBuilder.d.ts.map