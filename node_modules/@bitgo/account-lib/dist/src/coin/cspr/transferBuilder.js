"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferBuilder = void 0;
var casper_js_sdk_1 = require("casper-js-sdk");
var errors_1 = require("../baseCoin/errors");
var baseCoin_1 = require("../baseCoin");
var transactionBuilder_1 = require("./transactionBuilder");
var constants_1 = require("./constants");
var utils_1 = require("./utils");
var TransferBuilder = /** @class */ (function (_super) {
    __extends(TransferBuilder, _super);
    function TransferBuilder(_coinConfig) {
        return _super.call(this, _coinConfig) || this;
    }
    /** @inheritdoc */
    TransferBuilder.prototype.buildImplementation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var extraArguments;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        extraArguments = new Map();
                        if (this._toAddress) {
                            extraArguments.set(constants_1.TRANSACTION_TYPE, casper_js_sdk_1.CLValueBuilder.string(baseCoin_1.TransactionType[baseCoin_1.TransactionType.Send]));
                            extraArguments.set(constants_1.TRANSFER_TO_ADDRESS, casper_js_sdk_1.CLValueBuilder.string(this._toAddress));
                        }
                        this._session = {
                            amount: this._amount,
                            target: casper_js_sdk_1.CLPublicKey.fromHex(this._toAddress),
                            id: this._transferId,
                            extraArguments: extraArguments,
                        };
                        this.transaction.setTransactionType(baseCoin_1.TransactionType.Send);
                        return [4 /*yield*/, _super.prototype.buildImplementation.call(this)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** @inheritdoc */
    TransferBuilder.prototype.initBuilder = function (tx) {
        _super.prototype.initBuilder.call(this, tx);
        this.transaction.setTransactionType(baseCoin_1.TransactionType.Send);
        this.to(utils_1.getTransferDestinationAddress(tx.casperTx.session));
        this.amount(utils_1.getTransferAmount(tx.casperTx.session));
        var transferId = utils_1.getTransferId(tx.casperTx.session);
        if (transferId !== undefined) {
            this.transferId(transferId);
        }
    };
    /** @inheritdoc */
    TransferBuilder.prototype.signImplementation = function (key) {
        if (this._multiSignerKeyPairs.length >= transactionBuilder_1.DEFAULT_M) {
            throw new errors_1.SigningError('A maximum of ' + transactionBuilder_1.DEFAULT_M + ' can sign the transaction.');
        }
        return _super.prototype.signImplementation.call(this, key);
    };
    // region Transfer fields
    /**
     * Set the destination address where the funds will be sent,
     *
     * @param {string} address the address to transfer funds to
     * @returns {TransferBuilder} the builder with the new parameter set
     */
    TransferBuilder.prototype.to = function (address) {
        if (!utils_1.isValidAddress(address)) {
            throw new errors_1.InvalidParameterValueError('Invalid address');
        }
        this._toAddress = address;
        return this;
    };
    /**
     * Set the amount to be transferred
     *
     * @param {string} amount amount to transfer in motes (1 Cspr equals 1,000,000,000 motes)
     * @returns {TransferBuilder} the builder with the new parameter set
     */
    TransferBuilder.prototype.amount = function (amount) {
        if (!utils_1.isValidTransferAmount(amount)) {
            throw new errors_1.InvalidParameterValueError('Invalid amount');
        }
        this._amount = amount;
        return this;
    };
    /**
     * Set transfer id that acts as a transaction identifier (similar to memo id for Stellar)
     *
     * @param {number} id transfer id
     * @returns {TransferBuilder} the builder with the new parameter set
     */
    TransferBuilder.prototype.transferId = function (id) {
        if (!utils_1.isValidTransferId(id)) {
            throw new errors_1.InvalidParameterValueError('Invalid transfer id');
        }
        this._transferId = id;
        return this;
    };
    // endregion
    // region Validators
    TransferBuilder.prototype.validateMandatoryFields = function () {
        if (!this._toAddress) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing to');
        }
        if (!utils_1.isValidAddress(this._toAddress)) {
            throw new errors_1.InvalidParameterValueError('Invalid to address');
        }
        if (!this._amount) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing amount');
        }
        if (!utils_1.isValidTransferAmount(this._amount)) {
            throw new errors_1.InvalidParameterValueError('Invalid amount');
        }
        _super.prototype.validateMandatoryFields.call(this);
    };
    return TransferBuilder;
}(transactionBuilder_1.TransactionBuilder));
exports.TransferBuilder = TransferBuilder;
//# sourceMappingURL=data:application/json;base64,