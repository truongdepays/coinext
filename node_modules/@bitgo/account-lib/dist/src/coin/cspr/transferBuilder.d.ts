import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseKey } from '../baseCoin/iface';
import { TransactionBuilder } from './transactionBuilder';
import { Transaction } from './transaction';
export declare class TransferBuilder extends TransactionBuilder {
    private _toAddress;
    private _amount;
    private _transferId;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    /** @inheritdoc */
    initBuilder(tx: Transaction): void;
    /** @inheritdoc */
    protected signImplementation(key: BaseKey): Transaction;
    /**
     * Set the destination address where the funds will be sent,
     *
     * @param {string} address the address to transfer funds to
     * @returns {TransferBuilder} the builder with the new parameter set
     */
    to(address: string): this;
    /**
     * Set the amount to be transferred
     *
     * @param {string} amount amount to transfer in motes (1 Cspr equals 1,000,000,000 motes)
     * @returns {TransferBuilder} the builder with the new parameter set
     */
    amount(amount: string): this;
    /**
     * Set transfer id that acts as a transaction identifier (similar to memo id for Stellar)
     *
     * @param {number} id transfer id
     * @returns {TransferBuilder} the builder with the new parameter set
     */
    transferId(id: number): this;
    validateMandatoryFields(): void;
}
//# sourceMappingURL=transferBuilder.d.ts.map