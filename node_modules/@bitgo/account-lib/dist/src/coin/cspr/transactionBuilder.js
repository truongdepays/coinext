"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = exports.DEFAULT_N = exports.DEFAULT_M = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var casper_js_sdk_1 = require("casper-js-sdk");
var lodash_1 = __importDefault(require("lodash"));
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var transaction_1 = require("./transaction");
var keyPair_1 = require("./keyPair");
var utils_1 = require("./utils");
var constants_1 = require("./constants");
exports.DEFAULT_M = 3;
exports.DEFAULT_N = 2;
var TransactionBuilder = /** @class */ (function (_super) {
    __extends(TransactionBuilder, _super);
    function TransactionBuilder(_coinConfig) {
        var _this = _super.call(this, _coinConfig) || this;
        _this.transaction = new transaction_1.Transaction(_coinConfig);
        _this._multiSignerKeyPairs = [];
        _this._signatures = [];
        _this._chainName = _this.coinName() === 'cspr' ? constants_1.DEFAULT_CHAIN_NAMES.mainnet : constants_1.DEFAULT_CHAIN_NAMES.testnet;
        return _this;
    }
    // region Base Builder
    /** @inheritdoc */
    TransactionBuilder.prototype.buildImplementation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var deployParams, session, payment, cTransaction;
            return __generator(this, function (_a) {
                deployParams = this.getDeployParams();
                session = this.getSession();
                payment = casper_js_sdk_1.DeployUtil.standardPayment(lodash_1.default.parseInt(this._fee.gasLimit));
                cTransaction = this.transaction.casperTx || casper_js_sdk_1.DeployUtil.makeDeploy(deployParams, session, payment);
                // Cannot add arguments to an already signed deploy.
                if (cTransaction.approvals.length === 0) {
                    this._session.extraArguments.forEach(function (extraArgument, extraArgumentName) {
                        if (!cTransaction.session.getArgByName(extraArgumentName)) {
                            cTransaction = casper_js_sdk_1.DeployUtil.addArgToDeploy(cTransaction, extraArgumentName, extraArgument);
                        }
                    });
                }
                this.transaction.casperTx = cTransaction;
                this.processSigning();
                return [2 /*return*/, this.transaction];
            });
        });
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.fromImplementation = function (rawTransaction) {
        var tx = new transaction_1.Transaction(this._coinConfig);
        var jsonTransaction = JSON.parse(rawTransaction);
        tx.casperTx = casper_js_sdk_1.DeployUtil.deployFromJson(jsonTransaction).unwrap();
        this.initBuilder(tx);
        return this.transaction;
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.signImplementation = function (key) {
        this.checkDuplicatedKeys(key);
        var signer = new keyPair_1.KeyPair({ prv: key.key });
        // Signing the transaction is an operation that relies on all the data being set,
        // so we set the source here and leave the actual signing for the build step
        this._multiSignerKeyPairs.push(signer);
        return this.transaction;
    };
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    TransactionBuilder.prototype.initBuilder = function (tx) {
        this.transaction = tx;
        this.transaction.loadPreviousSignatures();
        var txData = tx.toJson();
        this.fee(txData.fee);
        this.source({ address: txData.from });
        this.expiration(txData.expiration || constants_1.TRANSACTION_EXPIRATION);
    };
    // endregion
    // region Common builder methods
    /**
     * Set the transaction fees
     *
     * @param {BaseFee} fee The maximum gas to pay
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.fee = function (fee) {
        this.validateValue(new bignumber_js_1.default(fee.gasLimit));
        this._fee = fee;
        return this;
    };
    /**
     * Set the transaction source
     *
     * @param {BaseAddress} address The source account
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.source = function (address) {
        this.validateAddress(address);
        this._source = address;
        return this;
    };
    /**
     * Set the transaction expirationTime
     *
     * @param {string} expirationTime The transaction expirationTime
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.expiration = function (expirationTime) {
        var transactionExpiration = new bignumber_js_1.default(expirationTime);
        if (transactionExpiration.isNaN() || transactionExpiration.isGreaterThan(constants_1.TRANSACTION_EXPIRATION)) {
            throw new errors_1.BuildTransactionError('Invalid transaction expiration');
        }
        this.validateValue(transactionExpiration);
        this._expiration = transactionExpiration.toNumber();
        return this;
    };
    /**
     * Set an external transaction signature
     *
     * @param {string} signature Hex encoded signature string
     * @param {KeyPair} keyPair The public key keypair that was used to create the signature
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.signature = function (signature, keyPair) {
        // if we already have a signature for this key pair, just update it
        for (var _i = 0, _a = this._signatures; _i < _a.length; _i++) {
            var oldSignature = _a[_i];
            if (oldSignature.keyPair.getKeys().pub === keyPair.getKeys().pub) {
                oldSignature.signature = signature;
                return this;
            }
        }
        // otherwise add the new signature
        this._signatures.push({ signature: signature, keyPair: keyPair });
        return this;
    };
    TransactionBuilder.prototype.nodeChainName = function (chainName) {
        this._chainName = chainName;
        return this;
    };
    // endregion
    // region Validators
    /** @inheritdoc */
    TransactionBuilder.prototype.validateAddress = function (address) {
        if (!utils_1.isValidAddress(address.address)) {
            throw new errors_1.BuildTransactionError('Invalid address ' + address.address);
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateKey = function (key) {
        if (!new keyPair_1.KeyPair({ prv: key.key })) {
            throw new errors_1.BuildTransactionError('Invalid key');
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateRawTransaction = function (rawTransaction) {
        if (!rawTransaction) {
            throw new errors_1.InvalidTransactionError('Raw transaction is empty');
        }
        try {
            casper_js_sdk_1.DeployUtil.deployFromJson(JSON.parse(rawTransaction));
        }
        catch (e) {
            throw new errors_1.ParseTransactionError('There was an error parsing the JSON string');
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateTransaction = function (transaction) {
        this.validateMandatoryFields();
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateValue = function (value) {
        if (value.isLessThan(0)) {
            throw new errors_1.BuildTransactionError('Value cannot be less than zero');
        }
    };
    /**
     * Validates that the mandatory fields are defined
     */
    TransactionBuilder.prototype.validateMandatoryFields = function () {
        this.validateFee();
        this.validateSource();
    };
    /**
     * Validates that the fee field is defined
     */
    TransactionBuilder.prototype.validateFee = function () {
        if (this._fee === undefined) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing fee');
        }
        if (!this._fee.gasLimit) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing gas limit');
        }
        try {
            this.validateValue(new bignumber_js_1.default(this._fee.gasLimit));
        }
        catch (e) {
            throw new errors_1.BuildTransactionError('Invalid gas limit');
        }
    };
    /**
     * Validates that the source field is defined
     */
    TransactionBuilder.prototype.validateSource = function () {
        if (this._source === undefined) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing source');
        }
        this.validateAddress(this._source);
    };
    /**
     * Validates that the given key is not already in this._multiSignerKeyPairs
     *
     * @param {BaseKey} key - The key to check
     */
    TransactionBuilder.prototype.checkDuplicatedKeys = function (key) {
        this._multiSignerKeyPairs.forEach(function (_sourceKeyPair) {
            if (_sourceKeyPair.getKeys().prv === key.key) {
                throw new errors_1.SigningError('Repeated sign: ' + key.key);
            }
            // Try to get extended keys in order to validate them
            var xprv;
            try {
                xprv = _sourceKeyPair.getExtendedKeys().xprv;
            }
            catch (err) {
                return;
            }
            if (xprv && xprv === key.key) {
                throw new errors_1.SigningError('Repeated sign: ' + key.key);
            }
        });
    };
    Object.defineProperty(TransactionBuilder.prototype, "transaction", {
        // endregion
        // region Getters and Setters
        /** @inheritdoc */
        get: function () {
            return this._transaction;
        },
        /** @inheritdoc */
        set: function (transaction) {
            this._transaction = transaction;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionBuilder.prototype, "chainName", {
        /**
         * Get the chain name for the coin environment
         */
        get: function () {
            return this._chainName;
        },
        enumerable: false,
        configurable: true
    });
    // endregion
    // region auxiliaryMethods
    /**
     * Generate a DeployParams instance with the transaction data
     *
     * @returns {DeployUtil.DeployParams}
     */
    TransactionBuilder.prototype.getDeployParams = function () {
        var gasPrice = this._fee.gasPrice ? lodash_1.default.parseInt(this._fee.gasPrice) : undefined;
        return new casper_js_sdk_1.DeployUtil.DeployParams(casper_js_sdk_1.CLPublicKey.fromHex(this._source.address), this._chainName, gasPrice, this._expiration || constants_1.TRANSACTION_EXPIRATION);
    };
    /**
     * Generate the session for the Deploy according to the transactionType.
     *
     * @returns {DeployUtil.ExecutableDeployItem}
     */
    TransactionBuilder.prototype.getSession = function () {
        var session;
        switch (this.transaction.type) {
            case baseCoin_1.TransactionType.Send:
                var transferSession = this._session;
                session = casper_js_sdk_1.DeployUtil.ExecutableDeployItem.newTransferWithOptionalTransferId(transferSession.amount, transferSession.target, undefined, transferSession.id);
                break;
            case baseCoin_1.TransactionType.WalletInitialization:
            case baseCoin_1.TransactionType.StakingLock:
            case baseCoin_1.TransactionType.StakingUnlock:
                var moduleBytesSession = this._session;
                session = casper_js_sdk_1.DeployUtil.ExecutableDeployItem.newModuleBytes(moduleBytesSession.moduleBytes, moduleBytesSession.args);
                break;
            default:
                throw new errors_1.BuildTransactionError('Transaction Type error');
        }
        return session;
    };
    /**
     * Checks whether the transaction has the owner signature
     *
     * @param {string} pub - public key of the signer
     * @returns {boolean} true if the pub key already signed th transaction
     * @private
     */
    TransactionBuilder.prototype.isTransactionSignedByPub = function (pub) {
        return (lodash_1.default.findIndex(this.transaction.casperTx.approvals, function (approval) {
            var approvalSigner = utils_1.removeAlgoPrefixFromHexValue(approval.signer);
            return approvalSigner === pub;
        }) !== -1);
    };
    /**
     * Add signatures to the transaction
     *
     * @private
     */
    TransactionBuilder.prototype.processSigning = function () {
        for (var _i = 0, _a = this._multiSignerKeyPairs; _i < _a.length; _i++) {
            var keyPair = _a[_i];
            // Add signature if it's not already in the deploy
            if (!this.isTransactionSignedByPub(keyPair.getKeys().pub)) {
                this.transaction.sign(keyPair);
            }
        }
        for (var _b = 0, _c = this._signatures; _b < _c.length; _b++) {
            var _d = _c[_b], signature = _d.signature, keyPair = _d.keyPair;
            // Add signature if it's not already in the deploy
            if (!this.isTransactionSignedByPub(keyPair.getKeys().pub)) {
                this.transaction.addSignature(signature, keyPair);
            }
        }
    };
    return TransactionBuilder;
}(baseCoin_1.BaseTransactionBuilder));
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,