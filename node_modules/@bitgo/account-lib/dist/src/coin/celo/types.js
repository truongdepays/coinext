"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CeloTransactionData = exports.CeloTransaction = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var wallet_local_1 = require("@celo/wallet-local");
var ethereumjs_utils_old_1 = require("ethereumjs-utils-old");
var ethereumjs_util_1 = require("ethereumjs-util");
var iface_1 = require("../eth/iface");
var CeloTransaction = /** @class */ (function () {
    function CeloTransaction(tx) {
        this._feeCurrency = ethereumjs_utils_old_1.toBuffer('0x');
        this._gatewayFeeRecipient = ethereumjs_utils_old_1.toBuffer('0x');
        this._gatewayFee = ethereumjs_utils_old_1.toBuffer('0x');
        this.to = ethereumjs_utils_old_1.toBuffer([]);
        this.v = ethereumjs_utils_old_1.toBuffer([]);
        this.r = ethereumjs_utils_old_1.toBuffer([]);
        this.s = ethereumjs_utils_old_1.toBuffer([]);
        this.nonce = ethereumjs_util_1.unpad(ethereumjs_utils_old_1.toBuffer(tx.nonce));
        this.gasLimit = ethereumjs_utils_old_1.toBuffer(this.sanitizeHexString(tx.gasLimit));
        this.gasPrice = ethereumjs_utils_old_1.toBuffer(this.sanitizeHexString(tx.gasPrice));
        this.data = ethereumjs_utils_old_1.toBuffer(tx.data);
        this.value = ethereumjs_utils_old_1.toBuffer(this.sanitizeHexString(tx.value));
        if (tx.to) {
            this.to = ethereumjs_utils_old_1.toBuffer(tx.to);
        }
        if (tx.v) {
            this.v = ethereumjs_utils_old_1.toBuffer(tx.v);
        }
        if (tx.r) {
            this.r = ethereumjs_utils_old_1.toBuffer(tx.r);
        }
        if (tx.s) {
            this.s = ethereumjs_utils_old_1.toBuffer(tx.s);
        }
        if (tx.from) {
            this._from = ethereumjs_utils_old_1.toBuffer(tx.from);
        }
        this.initRaw();
    }
    // TODO: validate if this needs to be moved to Utils class
    /**
     * Clean hex formatted values ensuring they have an even length
     *
     * @param numberValue Hex formatted number value. Example '0x01'
     * @returns sanitized value
     */
    CeloTransaction.prototype.sanitizeHexString = function (numberValue) {
        if (numberValue === '0x0') {
            return '0x';
        }
        else if (numberValue.length % 2 === 0) {
            return numberValue;
        }
        return '0x0' + numberValue.slice(2);
    };
    CeloTransaction.prototype.initRaw = function () {
        this.raw = [
            this.nonce,
            this.gasPrice,
            this.gasLimit,
            this._feeCurrency,
            this._gatewayFeeRecipient,
            this._gatewayFee,
            this.to,
            this.value,
            this.data,
            this.v,
            this.r,
            this.s,
        ];
    };
    CeloTransaction.prototype.hash = function (includeSignature) {
        var items;
        if (includeSignature) {
            items = this.raw;
        }
        else {
            items = this.raw.slice(0, 9).concat([ethereumjs_utils_old_1.toBuffer(this.getChainId()), ethereumjs_util_1.unpad(ethereumjs_utils_old_1.toBuffer(0)), ethereumjs_util_1.unpad(ethereumjs_utils_old_1.toBuffer(0))]);
        }
        return ethereumjs_utils_old_1.rlphash(items);
    };
    CeloTransaction.prototype.getSenderAddress = function () {
        if (this._from) {
            return this._from;
        }
        var pubKey = this.getSenderPublicKey();
        this._from = ethereumjs_utils_old_1.publicToAddress(pubKey);
        return this._from;
    };
    CeloTransaction.prototype.getSenderPublicKey = function () {
        if (this.verifySignature()) {
            // If the signature was verified successfully the _senderPubKey field is defined
            return this._senderPubKey;
        }
        throw new Error('Invalid Signature');
    };
    CeloTransaction.prototype.serialize = function () {
        return ethereumjs_utils_old_1.rlp.encode(this.raw);
    };
    CeloTransaction.prototype.sign = function (privateKey) {
        this._signatures = [this.v, this.r, this.s, privateKey];
    };
    CeloTransaction.prototype.verifySignature = function () {
        var msgHash = this.hash(false);
        try {
            var chainId = this.getChainId();
            var v = ethereumjs_utils_old_1.bufferToInt(this.v) - (2 * chainId + 35);
            this._senderPubKey = ethereumjs_utils_old_1.ecrecover(msgHash, v + 27, this.r, this.s);
        }
        catch (e) {
            return false;
        }
        return !!this._senderPubKey;
    };
    CeloTransaction.prototype.getChainId = function () {
        var chainId = ethereumjs_utils_old_1.bufferToInt(this.v);
        if (this.r.length && this.s.length) {
            chainId = (chainId - 35) >> 1;
        }
        return chainId;
    };
    return CeloTransaction;
}());
exports.CeloTransaction = CeloTransaction;
var CeloTransactionData = /** @class */ (function () {
    function CeloTransactionData(tx, deployedAddress) {
        this.tx = tx;
        this.deployedAddress = deployedAddress;
    }
    CeloTransactionData.fromJson = function (tx) {
        var chainId = ethereumjs_utils_old_1.addHexPrefix(new bignumber_js_1.default(Number(tx.chainId)).toString(16));
        return new CeloTransactionData(new CeloTransaction({
            _type: iface_1.ETHTransactionType.LEGACY,
            nonce: tx.nonce,
            to: tx.to,
            gasPrice: ethereumjs_utils_old_1.addHexPrefix(new bignumber_js_1.default(tx.gasPrice).toString(16)),
            gasLimit: ethereumjs_utils_old_1.addHexPrefix(new bignumber_js_1.default(tx.gasLimit).toString(16)),
            value: ethereumjs_utils_old_1.addHexPrefix(new bignumber_js_1.default(tx.value).toString(16)),
            data: tx.data === '0x' ? '' : tx.data,
            from: tx.from,
            s: tx.s,
            r: tx.r,
            v: tx.v || chainId,
        }), tx.deployedAddress);
    };
    CeloTransactionData.prototype.sign = function (keyPair) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, data, celoLocalWallet, rawTransaction, nonceBigNumber;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        privateKey = ethereumjs_utils_old_1.addHexPrefix(keyPair.getKeys().prv);
                        data = CeloTransactionData.txJsonToCeloTx(this.toJson(), keyPair.getAddress());
                        celoLocalWallet = new wallet_local_1.LocalWallet();
                        celoLocalWallet.addAccount(privateKey);
                        return [4 /*yield*/, celoLocalWallet.signTransaction(data)];
                    case 1:
                        rawTransaction = _a.sent();
                        nonceBigNumber = new bignumber_js_1.default(rawTransaction.tx.nonce);
                        rawTransaction.tx.nonce = ethereumjs_utils_old_1.addHexPrefix(nonceBigNumber.toString(16));
                        rawTransaction.raw = data.data === undefined ? '' : data.data;
                        rawTransaction.tx.gas = rawTransaction.tx.gas;
                        this.tx = new CeloTransaction(CeloTransactionData.encodedTxToJson(rawTransaction));
                        this.tx.sign(ethereumjs_utils_old_1.toBuffer(privateKey));
                        return [2 /*return*/];
                }
            });
        });
    };
    /** @inheritdoc */
    CeloTransactionData.prototype.toJson = function () {
        var result = {
            _type: iface_1.ETHTransactionType.LEGACY,
            nonce: ethereumjs_utils_old_1.bufferToInt(this.tx.nonce),
            gasPrice: new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(this.tx.gasPrice), 16).toString(10),
            gasLimit: new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(this.tx.gasLimit), 16).toString(10),
            value: this.tx.value.length === 0 ? '0' : new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(this.tx.value), 16).toString(10),
            data: ethereumjs_utils_old_1.bufferToHex(this.tx.data),
            id: ethereumjs_utils_old_1.addHexPrefix(ethereumjs_utils_old_1.bufferToHex(this.tx.hash(true))),
        };
        if (this.tx.to && this.tx.to.length) {
            result.to = ethereumjs_utils_old_1.bufferToHex(this.tx.to);
        }
        if (this.tx.verifySignature()) {
            result.from = ethereumjs_utils_old_1.bufferToHex(this.tx.getSenderAddress());
        }
        var chainId = this.tx.getChainId();
        if (chainId) {
            result.chainId = chainId.toString();
        }
        if (this.deployedAddress) {
            result.deployedAddress = this.deployedAddress;
        }
        this.setSignatureFields(result);
        return result;
    };
    CeloTransactionData.prototype.setSignatureFields = function (result) {
        if (this.tx.v && this.tx.v.length) {
            result.v = ethereumjs_utils_old_1.bufferToHex(this.tx.v);
        }
        if (this.tx.r && this.tx.r.length) {
            result.r = ethereumjs_utils_old_1.bufferToHex(this.tx.r);
        }
        if (this.tx.s && this.tx.s.length) {
            result.s = ethereumjs_utils_old_1.bufferToHex(this.tx.s);
        }
    };
    /** @inheritdoc */
    CeloTransactionData.prototype.toSerialized = function () {
        return ethereumjs_utils_old_1.addHexPrefix(this.tx.serialize().toString('hex'));
    };
    CeloTransactionData.txJsonToCeloTx = function (txJson, signer) {
        // the celo library requires you to specify the signer address with the from field
        return Object.assign({}, txJson, {
            chainId: txJson.chainId === undefined ? 0 : parseInt(txJson.chainId, 10),
            gas: txJson.gasLimit,
            from: signer,
        });
    };
    CeloTransactionData.encodedTxToJson = function (encodedTx) {
        return __assign(__assign({}, encodedTx.tx), { _type: iface_1.ETHTransactionType.LEGACY, nonce: parseInt(encodedTx.tx.nonce, 16), gasLimit: encodedTx.tx.gas, data: encodedTx.raw });
    };
    return CeloTransactionData;
}());
exports.CeloTransactionData = CeloTransactionData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29pbi9jZWxvL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOERBQXFDO0FBQ3JDLG1EQUFpRDtBQUNqRCw2REFTOEI7QUFDOUIsbURBQXdDO0FBRXhDLHNDQUF3RjtBQUd4RjtJQWtDRSx5QkFBWSxFQUFnQjtRQTdCcEIsaUJBQVksR0FBVywrQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RDLHlCQUFvQixHQUFXLCtCQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUMsZ0JBQVcsR0FBVywrQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBTTdDLE9BQUUsR0FBVywrQkFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFCLE1BQUMsR0FBVywrQkFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCLE1BQUMsR0FBVywrQkFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCLE1BQUMsR0FBVywrQkFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBbUJ2QixJQUFJLENBQUMsS0FBSyxHQUFHLHVCQUFLLENBQUMsK0JBQVEsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsUUFBUSxHQUFHLCtCQUFRLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxRQUFRLEdBQUcsK0JBQVEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLElBQUksR0FBRywrQkFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsS0FBSyxH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IjpbImltcG9ydCBCaWdOdW1iZXIgZnJvbSAnYmlnbnVtYmVyLmpzJztcbmltcG9ydCB7IExvY2FsV2FsbGV0IH0gZnJvbSAnQGNlbG8vd2FsbGV0LWxvY2FsJztcbmltcG9ydCB7XG4gIGFkZEhleFByZWZpeCxcbiAgdG9CdWZmZXIsXG4gIGJ1ZmZlclRvSGV4LFxuICBidWZmZXJUb0ludCxcbiAgcmxwLFxuICBybHBoYXNoLFxuICBlY3JlY292ZXIsXG4gIHB1YmxpY1RvQWRkcmVzcyxcbn0gZnJvbSAnZXRoZXJldW1qcy11dGlscy1vbGQnO1xuaW1wb3J0IHsgdW5wYWQgfSBmcm9tICdldGhlcmV1bWpzLXV0aWwnO1xuaW1wb3J0IHsgQ2Vsb1R4LCBFbmNvZGVkVHJhbnNhY3Rpb24gfSBmcm9tICdAY2Vsby9jb25uZWN0JztcbmltcG9ydCB7IEV0aExpa2VUcmFuc2FjdGlvbkRhdGEsIEVUSFRyYW5zYWN0aW9uVHlwZSwgTGVnYWN5VHhEYXRhIH0gZnJvbSAnLi4vZXRoL2lmYWNlJztcbmltcG9ydCB7IEtleVBhaXIgfSBmcm9tICcuLi9ldGgnO1xuXG5leHBvcnQgY2xhc3MgQ2Vsb1RyYW5zYWN0aW9uIHtcbiAgcHJpdmF0ZSByYXc6IEJ1ZmZlcltdO1xuICBwcml2YXRlIF9mcm9tOiBCdWZmZXI7XG4gIHByaXZhdGUgX3NlbmRlclB1YktleT87XG4gIHByaXZhdGUgX3NpZ25hdHVyZXM6IEJ1ZmZlcltdO1xuICBwcml2YXRlIF9mZWVDdXJyZW5jeTogQnVmZmVyID0gdG9CdWZmZXIoJzB4Jyk7XG4gIHByaXZhdGUgX2dhdGV3YXlGZWVSZWNpcGllbnQ6IEJ1ZmZlciA9IHRvQnVmZmVyKCcweCcpO1xuICBwcml2YXRlIF9nYXRld2F5RmVlOiBCdWZmZXIgPSB0b0J1ZmZlcignMHgnKTtcbiAgbm9uY2U6IEJ1ZmZlcjtcbiAgZ2FzTGltaXQ6IEJ1ZmZlcjtcbiAgZ2FzUHJpY2U6IEJ1ZmZlcjtcbiAgZGF0YTogQnVmZmVyO1xuICB2YWx1ZTogQnVmZmVyO1xuICB0bzogQnVmZmVyID0gdG9CdWZmZXIoW10pO1xuICB2OiBCdWZmZXIgPSB0b0J1ZmZlcihbXSk7XG4gIHI6IEJ1ZmZlciA9IHRvQnVmZmVyKFtdKTtcbiAgczogQnVmZmVyID0gdG9CdWZmZXIoW10pO1xuXG4gIC8vIFRPRE86IHZhbGlkYXRlIGlmIHRoaXMgbmVlZHMgdG8gYmUgbW92ZWQgdG8gVXRpbHMgY2xhc3NcbiAgLyoqXG4gICAqIENsZWFuIGhleCBmb3JtYXR0ZWQgdmFsdWVzIGVuc3VyaW5nIHRoZXkgaGF2ZSBhbiBldmVuIGxlbmd0aFxuICAgKlxuICAgKiBAcGFyYW0gbnVtYmVyVmFsdWUgSGV4IGZvcm1hdHRlZCBudW1iZXIgdmFsdWUuIEV4YW1wbGUgJzB4MDEnXG4gICAqIEByZXR1cm5zIHNhbml0aXplZCB2YWx1ZVxuICAgKi9cbiAgcHJpdmF0ZSBzYW5pdGl6ZUhleFN0cmluZyhudW1iZXJWYWx1ZSkge1xuICAgIGlmIChudW1iZXJWYWx1ZSA9PT0gJzB4MCcpIHtcbiAgICAgIHJldHVybiAnMHgnO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyVmFsdWUubGVuZ3RoICUgMiA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bWJlclZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gJzB4MCcgKyBudW1iZXJWYWx1ZS5zbGljZSgyKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHR4OiBMZWdhY3lUeERhdGEpIHtcbiAgICB0aGlzLm5vbmNlID0gdW5wYWQodG9CdWZmZXIodHgubm9uY2UpKTtcbiAgICB0aGlzLmdhc0xpbWl0ID0gdG9CdWZmZXIodGhpcy5zYW5pdGl6ZUhleFN0cmluZyh0eC5nYXNMaW1pdCkpO1xuICAgIHRoaXMuZ2FzUHJpY2UgPSB0b0J1ZmZlcih0aGlzLnNhbml0aXplSGV4U3RyaW5nKHR4Lmdhc1ByaWNlKSk7XG4gICAgdGhpcy5kYXRhID0gdG9CdWZmZXIodHguZGF0YSk7XG4gICAgdGhpcy52YWx1ZSA9IHRvQnVmZmVyKHRoaXMuc2FuaXRpemVIZXhTdHJpbmcodHgudmFsdWUpKTtcbiAgICBpZiAodHgudG8pIHtcbiAgICAgIHRoaXMudG8gPSB0b0J1ZmZlcih0eC50byk7XG4gICAgfVxuICAgIGlmICh0eC52KSB7XG4gICAgICB0aGlzLnYgPSB0b0J1ZmZlcih0eC52KTtcbiAgICB9XG4gICAgaWYgKHR4LnIpIHtcbiAgICAgIHRoaXMuciA9IHRvQnVmZmVyKHR4LnIpO1xuICAgIH1cbiAgICBpZiAodHgucykge1xuICAgICAgdGhpcy5zID0gdG9CdWZmZXIodHgucyk7XG4gICAgfVxuICAgIGlmICh0eC5mcm9tKSB7XG4gICAgICB0aGlzLl9mcm9tID0gdG9CdWZmZXIodHguZnJvbSk7XG4gICAgfVxuICAgIHRoaXMuaW5pdFJhdygpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0UmF3KCkge1xuICAgIHRoaXMucmF3ID0gW1xuICAgICAgdGhpcy5ub25jZSxcbiAgICAgIHRoaXMuZ2FzUHJpY2UsXG4gICAgICB0aGlzLmdhc0xpbWl0LFxuICAgICAgdGhpcy5fZmVlQ3VycmVuY3ksXG4gICAgICB0aGlzLl9nYXRld2F5RmVlUmVjaXBpZW50LFxuICAgICAgdGhpcy5fZ2F0ZXdheUZlZSxcbiAgICAgIHRoaXMudG8sXG4gICAgICB0aGlzLnZhbHVlLFxuICAgICAgdGhpcy5kYXRhLFxuICAgICAgdGhpcy52LFxuICAgICAgdGhpcy5yLFxuICAgICAgdGhpcy5zLFxuICAgIF07XG4gIH1cblxuICBoYXNoKGluY2x1ZGVTaWduYXR1cmU/OiBib29sZWFuKTogQnVmZmVyIHtcbiAgICBsZXQgaXRlbXM7XG4gICAgaWYgKGluY2x1ZGVTaWduYXR1cmUpIHtcbiAgICAgIGl0ZW1zID0gdGhpcy5yYXc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW1zID0gdGhpcy5yYXcuc2xpY2UoMCwgOSkuY29uY2F0KFt0b0J1ZmZlcih0aGlzLmdldENoYWluSWQoKSksIHVucGFkKHRvQnVmZmVyKDApKSwgdW5wYWQodG9CdWZmZXIoMCkpXSk7XG4gICAgfVxuICAgIHJldHVybiBybHBoYXNoKGl0ZW1zKTtcbiAgfVxuXG4gIGdldFNlbmRlckFkZHJlc3MoKTogQnVmZmVyIHtcbiAgICBpZiAodGhpcy5fZnJvbSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Zyb207XG4gICAgfVxuICAgIGNvbnN0IHB1YktleSA9IHRoaXMuZ2V0U2VuZGVyUHVibGljS2V5KCk7XG4gICAgdGhpcy5fZnJvbSA9IHB1YmxpY1RvQWRkcmVzcyhwdWJLZXkpO1xuICAgIHJldHVybiB0aGlzLl9mcm9tO1xuICB9XG5cbiAgZ2V0U2VuZGVyUHVibGljS2V5KCkge1xuICAgIGlmICh0aGlzLnZlcmlmeVNpZ25hdHVyZSgpKSB7XG4gICAgICAvLyBJZiB0aGUgc2lnbmF0dXJlIHdhcyB2ZXJpZmllZCBzdWNjZXNzZnVsbHkgdGhlIF9zZW5kZXJQdWJLZXkgZmllbGQgaXMgZGVmaW5lZFxuICAgICAgcmV0dXJuIHRoaXMuX3NlbmRlclB1YktleTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFNpZ25hdHVyZScpO1xuICB9XG5cbiAgc2VyaWFsaXplKCk6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHJscC5lbmNvZGUodGhpcy5yYXcpO1xuICB9XG5cbiAgc2lnbihwcml2YXRlS2V5OiBCdWZmZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9zaWduYXR1cmVzID0gW3RoaXMudiwgdGhpcy5yLCB0aGlzLnMsIHByaXZhdGVLZXldO1xuICB9XG5cbiAgdmVyaWZ5U2lnbmF0dXJlKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG1zZ0hhc2ggPSB0aGlzLmhhc2goZmFsc2UpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjaGFpbklkID0gdGhpcy5nZXRDaGFpbklkKCk7XG4gICAgICBjb25zdCB2ID0gYnVmZmVyVG9JbnQodGhpcy52KSAtICgyICogY2hhaW5JZCArIDM1KTtcbiAgICAgIHRoaXMuX3NlbmRlclB1YktleSA9IGVjcmVjb3Zlcihtc2dIYXNoLCB2ICsgMjcsIHRoaXMuciwgdGhpcy5zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAhIXRoaXMuX3NlbmRlclB1YktleTtcbiAgfVxuXG4gIGdldENoYWluSWQoKTogbnVtYmVyIHtcbiAgICBsZXQgY2hhaW5JZCA9IGJ1ZmZlclRvSW50KHRoaXMudik7XG4gICAgaWYgKHRoaXMuci5sZW5ndGggJiYgdGhpcy5zLmxlbmd0aCkge1xuICAgICAgY2hhaW5JZCA9IChjaGFpbklkIC0gMzUpID4+IDE7XG4gICAgfVxuICAgIHJldHVybiBjaGFpbklkO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDZWxvVHJhbnNhY3Rpb25EYXRhIGltcGxlbWVudHMgRXRoTGlrZVRyYW5zYWN0aW9uRGF0YSB7XG4gIHByaXZhdGUgdHg6IENlbG9UcmFuc2FjdGlvbjtcbiAgcHJpdmF0ZSBkZXBsb3llZEFkZHJlc3M/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IodHg6IENlbG9UcmFuc2FjdGlvbiwgZGVwbG95ZWRBZGRyZXNzPzogc3RyaW5nKSB7XG4gICAgdGhpcy50eCA9IHR4O1xuICAgIHRoaXMuZGVwbG95ZWRBZGRyZXNzID0gZGVwbG95ZWRBZGRyZXNzO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBmcm9tSnNvbih0eDogTGVnYWN5VHhEYXRhKTogQ2Vsb1RyYW5zYWN0aW9uRGF0YSB7XG4gICAgY29uc3QgY2hhaW5JZCA9IGFkZEhleFByZWZpeChuZXcgQmlnTnVtYmVyKE51bWJlcih0eC5jaGFpbklkKSkudG9TdHJpbmcoMTYpKTtcbiAgICByZXR1cm4gbmV3IENlbG9UcmFuc2FjdGlvbkRhdGEoXG4gICAgICBuZXcgQ2Vsb1RyYW5zYWN0aW9uKHtcbiAgICAgICAgX3R5cGU6IEVUSFRyYW5zYWN0aW9uVHlwZS5MRUdBQ1ksXG4gICAgICAgIG5vbmNlOiB0eC5ub25jZSxcbiAgICAgICAgdG86IHR4LnRvLFxuICAgICAgICBnYXNQcmljZTogYWRkSGV4UHJlZml4KG5ldyBCaWdOdW1iZXIodHguZ2FzUHJpY2UpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIGdhc0xpbWl0OiBhZGRIZXhQcmVmaXgobmV3IEJpZ051bWJlcih0eC5nYXNMaW1pdCkudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgdmFsdWU6IGFkZEhleFByZWZpeChuZXcgQmlnTnVtYmVyKHR4LnZhbHVlKS50b1N0cmluZygxNikpLFxuICAgICAgICBkYXRhOiB0eC5kYXRhID09PSAnMHgnID8gJycgOiB0eC5kYXRhLFxuICAgICAgICBmcm9tOiB0eC5mcm9tLFxuICAgICAgICBzOiB0eC5zLFxuICAgICAgICByOiB0eC5yLFxuICAgICAgICB2OiB0eC52IHx8IGNoYWluSWQsXG4gICAgICB9KSxcbiAgICAgIHR4LmRlcGxveWVkQWRkcmVzcyxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgc2lnbihrZXlQYWlyOiBLZXlQYWlyKSB7XG4gICAgY29uc3QgcHJpdmF0ZUtleSA9IGFkZEhleFByZWZpeChrZXlQYWlyLmdldEtleXMoKS5wcnYgYXMgc3RyaW5nKTtcbiAgICBjb25zdCBkYXRhID0gQ2Vsb1RyYW5zYWN0aW9uRGF0YS50eEpzb25Ub0NlbG9UeCh0aGlzLnRvSnNvbigpLCBrZXlQYWlyLmdldEFkZHJlc3MoKSk7XG4gICAgY29uc3QgY2Vsb0xvY2FsV2FsbGV0ID0gbmV3IExvY2FsV2FsbGV0KCk7XG4gICAgY2Vsb0xvY2FsV2FsbGV0LmFkZEFjY291bnQocHJpdmF0ZUtleSk7XG4gICAgY29uc3QgcmF3VHJhbnNhY3Rpb24gPSBhd2FpdCBjZWxvTG9jYWxXYWxsZXQuc2lnblRyYW5zYWN0aW9uKGRhdGEpO1xuXG4gICAgY29uc3Qgbm9uY2VCaWdOdW1iZXIgPSBuZXcgQmlnTnVtYmVyKHJhd1RyYW5zYWN0aW9uLnR4Lm5vbmNlKTtcbiAgICByYXdUcmFuc2FjdGlvbi50eC5ub25jZSA9IGFkZEhleFByZWZpeChub25jZUJpZ051bWJlci50b1N0cmluZygxNikpO1xuICAgIHJhd1RyYW5zYWN0aW9uLnJhdyA9IGRhdGEuZGF0YSA9PT0gdW5kZWZpbmVkID8gJycgOiBkYXRhLmRhdGE7XG4gICAgcmF3VHJhbnNhY3Rpb24udHguZ2FzID0gcmF3VHJhbnNhY3Rpb24udHguZ2FzO1xuICAgIHRoaXMudHggPSBuZXcgQ2Vsb1RyYW5zYWN0aW9uKENlbG9UcmFuc2FjdGlvbkRhdGEuZW5jb2RlZFR4VG9Kc29uKHJhd1RyYW5zYWN0aW9uKSk7XG4gICAgdGhpcy50eC5zaWduKHRvQnVmZmVyKHByaXZhdGVLZXkpKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICB0b0pzb24oKTogTGVnYWN5VHhEYXRhIHtcbiAgICBjb25zdCByZXN1bHQ6IExlZ2FjeVR4RGF0YSA9IHtcbiAgICAgIF90eXBlOiBFVEhUcmFuc2FjdGlvblR5cGUuTEVHQUNZLFxuICAgICAgbm9uY2U6IGJ1ZmZlclRvSW50KHRoaXMudHgubm9uY2UpLFxuICAgICAgZ2FzUHJpY2U6IG5ldyBCaWdOdW1iZXIoYnVmZmVyVG9IZXgodGhpcy50eC5nYXNQcmljZSksIDE2KS50b1N0cmluZygxMCksXG4gICAgICBnYXNMaW1pdDogbmV3IEJpZ051bWJlcihidWZmZXJUb0hleCh0aGlzLnR4Lmdhc0xpbWl0KSwgMTYpLnRvU3RyaW5nKDEwKSxcbiAgICAgIHZhbHVlOiB0aGlzLnR4LnZhbHVlLmxlbmd0aCA9PT0gMCA/ICcwJyA6IG5ldyBCaWdOdW1iZXIoYnVmZmVyVG9IZXgodGhpcy50eC52YWx1ZSksIDE2KS50b1N0cmluZygxMCksXG4gICAgICBkYXRhOiBidWZmZXJUb0hleCh0aGlzLnR4LmRhdGEpLFxuICAgICAgaWQ6IGFkZEhleFByZWZpeChidWZmZXJUb0hleCh0aGlzLnR4Lmhhc2godHJ1ZSkpKSxcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMudHgudG8gJiYgdGhpcy50eC50by5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC50byA9IGJ1ZmZlclRvSGV4KHRoaXMudHgudG8pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnR4LnZlcmlmeVNpZ25hdHVyZSgpKSB7XG4gICAgICByZXN1bHQuZnJvbSA9IGJ1ZmZlclRvSGV4KHRoaXMudHguZ2V0U2VuZGVyQWRkcmVzcygpKTtcbiAgICB9XG5cbiAgICBjb25zdCBjaGFpbklkID0gdGhpcy50eC5nZXRDaGFpbklkKCk7XG4gICAgaWYgKGNoYWluSWQpIHtcbiAgICAgIHJlc3VsdC5jaGFpbklkID0gY2hhaW5JZC50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmRlcGxveWVkQWRkcmVzcykge1xuICAgICAgcmVzdWx0LmRlcGxveWVkQWRkcmVzcyA9IHRoaXMuZGVwbG95ZWRBZGRyZXNzO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U2lnbmF0dXJlRmllbGRzKHJlc3VsdCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRTaWduYXR1cmVGaWVsZHMocmVzdWx0OiBMZWdhY3lUeERhdGEpOiB2b2lkIHtcbiAgICBpZiAodGhpcy50eC52ICYmIHRoaXMudHgudi5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC52ID0gYnVmZmVyVG9IZXgodGhpcy50eC52KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50eC5yICYmIHRoaXMudHguci5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5yID0gYnVmZmVyVG9IZXgodGhpcy50eC5yKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50eC5zICYmIHRoaXMudHgucy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5zID0gYnVmZmVyVG9IZXgodGhpcy50eC5zKTtcbiAgICB9XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgdG9TZXJpYWxpemVkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGFkZEhleFByZWZpeCh0aGlzLnR4LnNlcmlhbGl6ZSgpLnRvU3RyaW5nKCdoZXgnKSk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyB0eEpzb25Ub0NlbG9UeCh0eEpzb246IExlZ2FjeVR4RGF0YSwgc2lnbmVyOiBzdHJpbmcpOiBDZWxvVHgge1xuICAgIC8vIHRoZSBjZWxvIGxpYnJhcnkgcmVxdWlyZXMgeW91IHRvIHNwZWNpZnkgdGhlIHNpZ25lciBhZGRyZXNzIHdpdGggdGhlIGZyb20gZmllbGRcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdHhKc29uLCB7XG4gICAgICBjaGFpbklkOiB0eEpzb24uY2hhaW5JZCA9PT0gdW5kZWZpbmVkID8gMCA6IHBhcnNlSW50KHR4SnNvbi5jaGFpbklkLCAxMCksXG4gICAgICBnYXM6IHR4SnNvbi5nYXNMaW1pdCxcbiAgICAgIGZyb206IHNpZ25lcixcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGVuY29kZWRUeFRvSnNvbihlbmNvZGVkVHg6IEVuY29kZWRUcmFuc2FjdGlvbik6IExlZ2FjeVR4RGF0YSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmVuY29kZWRUeC50eCxcbiAgICAgIF90eXBlOiBFVEhUcmFuc2FjdGlvblR5cGUuTEVHQUNZLFxuICAgICAgbm9uY2U6IHBhcnNlSW50KGVuY29kZWRUeC50eC5ub25jZSwgMTYpLFxuICAgICAgZ2FzTGltaXQ6IGVuY29kZWRUeC50eC5nYXMsXG4gICAgICBkYXRhOiBlbmNvZGVkVHgucmF3LFxuICAgIH07XG4gIH1cbn1cbiJdfQ==