import { BaseCoin as CoinConfig } from '@bitgo/statics';
import * as Eth from '../eth';
import { TransactionType } from '../baseCoin';
import { TxData } from '../eth/iface';
import { Transaction } from './transaction';
import { StakingBuilder } from './stakingBuilder';
import { TransferBuilder } from './transferBuilder';
export declare class TransactionBuilder extends Eth.TransactionBuilder {
    private _stakingBuilder?;
    protected _transfer: TransferBuilder;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    type(type: TransactionType): void;
    protected getTransactionData(): TxData;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): Transaction;
    protected setTransactionTypeFields(decodedType: TransactionType, transactionJson: TxData): void;
    /**
     * Returns the smart contract encoded data
     *
     * @param {string[]} addresses - the contract signers
     * @returns {string} - the smart contract encoded data
     */
    protected getContractData(addresses: string[]): string;
    /**
     * Gets the staking lock builder if exist, or creates a new one for this transaction and returns it
     * requires: amount
     *
     * @returns {StakingBuilder} the staking builder
     */
    lock(): StakingBuilder;
    /**
     * Gets the staking vote builder if exist, or creates a new one for this transaction and returns it
     * requires: group, lesser, greater, amount
     *
     * @returns {StakingBuilder} the staking builder
     */
    vote(): StakingBuilder;
    /**
     * Gets the staking activate builder if exist, or creates a new one for this transaction and returns it
     * requires: group
     *
     * @returns {StakingBuilder} the staking builder
     */
    activate(): StakingBuilder;
    /**
     * Gets the staking unlock builder if exist, or creates a new one for this transaction and returns it
     * requires: amount
     *
     * @returns {StakingBuilder} the staking builder
     */
    unlock(): StakingBuilder;
    /**
     * Gets the staking unvote builder if exist, or creates a new one for this transaction and returns it
     * requires: group, lesser, greater, amount, index
     *
     * @returns {StakingBuilder} the staking builder
     */
    unvote(): StakingBuilder;
    /**
     * Gets the staking withdraw builder if exist, or creates a new one for this transaction and returns it
     * requires: index (unlock list)
     *
     * @returns {StakingBuilder} the staking builder
     */
    withdraw(): StakingBuilder;
    /** @inheritdoc */
    transfer(data?: string): TransferBuilder;
    /**
     * Get the appropriate builder for the selected type
     *
     * @param {StakingOperationTypes} type the selected type for the staking builder
     * @returns {StakingBuilder} the staking builder for the selected type
     */
    private getBuilder;
    private getStaking;
    private buildLockStakeTransaction;
    private buildStakingTransaction;
    /**
     * Get the final v value. Final v is described in EIP-155.
     *
     * @protected for internal use when the enableFinalVField flag is true.
     */
    protected getFinalV(): string;
}
//# sourceMappingURL=transactionBuilder.d.ts.map