/// <reference types="node" />
import { EthLikeTransactionData, LegacyTxData } from '../eth/iface';
import { KeyPair } from '../eth';
export declare class CeloTransaction {
    private raw;
    private _from;
    private _senderPubKey?;
    private _signatures;
    private _feeCurrency;
    private _gatewayFeeRecipient;
    private _gatewayFee;
    nonce: Buffer;
    gasLimit: Buffer;
    gasPrice: Buffer;
    data: Buffer;
    value: Buffer;
    to: Buffer;
    v: Buffer;
    r: Buffer;
    s: Buffer;
    /**
     * Clean hex formatted values ensuring they have an even length
     *
     * @param numberValue Hex formatted number value. Example '0x01'
     * @returns sanitized value
     */
    private sanitizeHexString;
    constructor(tx: LegacyTxData);
    private initRaw;
    hash(includeSignature?: boolean): Buffer;
    getSenderAddress(): Buffer;
    getSenderPublicKey(): any;
    serialize(): Buffer;
    sign(privateKey: Buffer): void;
    verifySignature(): boolean;
    getChainId(): number;
}
export declare class CeloTransactionData implements EthLikeTransactionData {
    private tx;
    private deployedAddress?;
    constructor(tx: CeloTransaction, deployedAddress?: string);
    static fromJson(tx: LegacyTxData): CeloTransactionData;
    sign(keyPair: KeyPair): Promise<void>;
    /** @inheritdoc */
    toJson(): LegacyTxData;
    private setSignatureFields;
    /** @inheritdoc */
    toSerialized(): string;
    private static txJsonToCeloTx;
    private static encodedTxToJson;
}
//# sourceMappingURL=types.d.ts.map