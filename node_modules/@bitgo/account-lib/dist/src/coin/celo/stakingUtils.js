"use strict";
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOperationConfig = exports.WithdrawMethodId = exports.ActivateMethodId = exports.UnvoteMethodId = exports.VoteMethodId = exports.UnlockMethodId = exports.LockMethodId = void 0;
var statics_1 = require("@bitgo/statics");
var baseCoin_1 = require("../baseCoin");
exports.LockMethodId = '0xf83d08ba'; // lock()
exports.UnlockMethodId = '0x6198e339'; // unlock()
exports.VoteMethodId = '0x580d747a'; // vote()
exports.UnvoteMethodId = '0x6e198475'; // revokeActive()
exports.ActivateMethodId = '0x1c5a9d9c'; // activate()
exports.WithdrawMethodId = '0x2e1a7d4d'; // withdraw()
var LockedGoldTestnetAddress = '0x94c3e6675015d8479b648657e7ddfcd938489d0d';
var LockedGoldMainnetAddress = '0x6cc083aed9e3ebe302a6336dbc7c921c9f03349e';
var ElectionTestnetAddress = '0x11fe523f93cac185d12cb39cc3bd279d2de524f8';
var ElectionMainnetAddress = '0x8d6677192144292870907e3fa8a5527fe55a7ff6';
var operations = (_a = {},
    _a[baseCoin_1.StakingOperationTypes.LOCK] = (_b = {},
        _b[statics_1.NetworkType.TESTNET] = {
            contractAddress: LockedGoldTestnetAddress,
            methodId: exports.LockMethodId,
            types: [],
        },
        _b[statics_1.NetworkType.MAINNET] = {
            contractAddress: LockedGoldMainnetAddress,
            methodId: exports.LockMethodId,
            types: [],
        },
        _b),
    _a[baseCoin_1.StakingOperationTypes.UNLOCK] = (_c = {},
        _c[statics_1.NetworkType.TESTNET] = {
            contractAddress: LockedGoldTestnetAddress,
            methodId: exports.UnlockMethodId,
            types: ['uint256'],
        },
        _c[statics_1.NetworkType.MAINNET] = {
            contractAddress: LockedGoldMainnetAddress,
            methodId: exports.UnlockMethodId,
            types: ['uint256'],
        },
        _c),
    _a[baseCoin_1.StakingOperationTypes.VOTE] = (_d = {},
        _d[statics_1.NetworkType.TESTNET] = {
            contractAddress: ElectionTestnetAddress,
            methodId: exports.VoteMethodId,
            types: ['address', 'uint256', 'address', 'address'],
        },
        _d[statics_1.NetworkType.MAINNET] = {
            contractAddress: ElectionMainnetAddress,
            methodId: exports.VoteMethodId,
            types: ['address', 'uint256', 'address', 'address'],
        },
        _d),
    _a[baseCoin_1.StakingOperationTypes.UNVOTE] = (_e = {},
        _e[statics_1.NetworkType.TESTNET] = {
            contractAddress: ElectionTestnetAddress,
            methodId: exports.UnvoteMethodId,
            types: ['address', 'uint256', 'address', 'address', 'uint256'],
        },
        _e[statics_1.NetworkType.MAINNET] = {
            contractAddress: ElectionMainnetAddress,
            methodId: exports.UnvoteMethodId,
            types: ['address', 'uint256', 'address', 'address', 'uint256'],
        },
        _e),
    _a[baseCoin_1.StakingOperationTypes.ACTIVATE] = (_f = {},
        _f[statics_1.NetworkType.TESTNET] = {
            contractAddress: ElectionTestnetAddress,
            methodId: exports.ActivateMethodId,
            types: ['address'],
        },
        _f[statics_1.NetworkType.MAINNET] = {
            contractAddress: ElectionMainnetAddress,
            methodId: exports.ActivateMethodId,
            types: ['address'],
        },
        _f),
    _a[baseCoin_1.StakingOperationTypes.WITHDRAW] = (_g = {},
        _g[statics_1.NetworkType.TESTNET] = {
            contractAddress: LockedGoldTestnetAddress,
            methodId: exports.WithdrawMethodId,
            types: ['uint256'],
        },
        _g[statics_1.NetworkType.MAINNET] = {
            contractAddress: LockedGoldMainnetAddress,
            methodId: exports.WithdrawMethodId,
            types: ['uint256'],
        },
        _g),
    _a);
/**
 * @param type
 * @param network
 */
function getOperationConfig(type, network) {
    return operations[type][network];
}
exports.getOperationConfig = getOperationConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rha2luZ1V0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvaW4vY2Vsby9zdGFraW5nVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDBDQUE2QztBQUM3Qyx3Q0FBb0Q7QUFHdkMsUUFBQSxZQUFZLEdBQUcsWUFBWSxDQUFDLENBQUMsU0FBUztBQUN0QyxRQUFBLGNBQWMsR0FBRyxZQUFZLENBQUMsQ0FBQyxXQUFXO0FBQzFDLFFBQUEsWUFBWSxHQUFHLFlBQVksQ0FBQyxDQUFDLFNBQVM7QUFDdEMsUUFBQSxjQUFjLEdBQUcsWUFBWSxDQUFDLENBQUMsaUJBQWlCO0FBQ2hELFFBQUEsZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLENBQUMsYUFBYTtBQUM5QyxRQUFBLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxDQUFDLGFBQWE7QUFFM0QsSUFBTSx3QkFBd0IsR0FBRyw0Q0FBNEMsQ0FBQztBQUM5RSxJQUFNLHdCQUF3QixHQUFHLDRDQUE0QyxDQUFDO0FBQzlFLElBQU0sc0JBQXNCLEdBQUcsNENBQTRDLENBQUM7QUFDNUUsSUFBTSxzQkFBc0IsR0FBRyw0Q0FBNEMsQ0FBQztBQUU1RSxJQUFNLFVBQVU7SUFDZCxHQUFDLGdDQUFxQixDQUFDLElBQUk7UUFDekIsR0FBQyxxQkFBVyxDQUFDLE9BQU8sSUFBRztZQUNyQixlQUFlLEVBQUUsd0JBQXdCO1lBQ3pDLFFBQVEsRUFBRSxvQkFBWTtZQUN0QixLQUFLLEVBQUUsRUFBRTtTQUNWO1FBQ0QsR0FBQyxxQkFBVyxDQUFDLE9BQU8sSUFBRztZQUNyQixlQUFlLEVBQUUsd0JBQXdCO1lBQ3pDLFFBQVEsRUFBRSxvQkFBWTtZQUN0QixLQUFLLEVBQUUsRUFBRTtTQUNWO1dBQ0Y7SUFDRCxHQUFDLGdDQUFxQixDQUFDLE1BQU07UUFDM0IsR0FBQyxxQkFBVyxDQUFDLE9BQU8sSUFBRztZQUNyQixlQUFlLEVBQUUsd0JBQXdCO1lBQ3pDLFFBQVEsRUFBRSxzQkFBYztZQUN4QixLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUM7U0FDbkI7UUFDRCxHQUFDLHFCQUFXLENBQUMsT0FBTyxJQUFHO1lBQ3JCLGVBQWUsRUFBRSx3QkFBd0I7WUFDekMsUUFBUSxFQUFFLHNCQUFjO1lBQ3hCLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQztTQUNuQjtXQUNGO0lBQ0QsR0FBQyxnQ0FBcUIsQ0FBQyxJQUFJO1FBQ3pCLEdBQUMscUJBQVcsQ0FBQyxPQUFPLElBQUc7WUFDckIsZUFBZSxFQUFFLHNCQUFzQjtZQUN2QyxRQUFRLEVBQUUsb0JBQVk7WUFDdEIsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDO1NBQ3BEO1FBQ0QsR0FBQyxxQkFBVyxDQUFDLE9BQU8sSUFBRztZQUNyQixlQUFlLEVBQUUsc0JBQXNCO1lBQ3ZDLFFBQVEsRUFBRSxvQkFBWTtZQUN0QixLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7U0FDcEQ7V0FDRjtJQUNELEdBQUMsZ0NBQXFCLENBQUMsTUFBTTtRQUMzQixHQUFDLHFCQUFXLENBQUMsT0FBTyxJQUFHO1lBQ3JCLGVBQWUsRUFBRSxzQkFBc0I7WUFDdkMsUUFBUSxFQUFFLHNCQUFjO1lBQ3hCLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7U0FDL0Q7UUFDRCxHQUFDLHFCQUFXLENBQUMsT0FBTyxJQUFHO1lBQ3JCLGVBQWUsRUFBRSxzQkFBc0I7WUFDdkMsUUFBUSxFQUFFLHNCQUFjO1lBQ3hCLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7U0FDL0Q7V0FDRjtJQUNELEdBQUMsZ0NBQXFCLENBQUMsUUFBUTtRQUM3QixHQUFDLHFCQUFXLENBQUMsT0FBTyxJQUFHO1lBQ3JCLGVBQWUsRUFBRSxzQkFBc0I7WUFDdkMsUUFBUSxFQUFFLHdCQUFnQjtZQUMxQixLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUM7U0FDbkI7UUFDRCxHQUFDLHFCQUFXLENBQUMsT0FBTyxJQUFHO1lBQ3JCLGVBQWUsRUFBRSxzQkFBc0I7WUFDdkMsUUFBUSxFQUFFLHdCQUFnQjtZQUMxQixLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUM7U0FDbkI7V0FDRjtJQUNELEdBQUMsZ0NBQXFCLENBQUMsUUFBUTtRQUM3QixHQUFDLHFCQUFXLENBQUMsT0FBTyxJQUFHO1lBQ3JCLGVBQWUsRUFBRSx3QkFBd0I7WUFDekMsUUFBUSxFQUFFLHdCQUFnQjtZQUMxQixLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUM7U0FDbkI7UUFDRCxHQUFDLHFCQUFXLENBQUMsT0FBTyxJQUFHO1lBQ3JCLGVBQWUsRUFBRSx3QkFBd0I7WUFDekMsUUFBUSxFQUFFLHdCQUFnQjtZQUMxQixLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUM7U0FDbkI7V0FDRjtPQUNGLENBQUM7QUFFRjs7O0dBR0c7QUFDSCxTQUFnQixrQkFBa0IsQ0FBQyxJQUEyQixFQUFFLE9BQW9CO0lBQ2xGLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFGRCxnREFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5ldHdvcmtUeXBlIH0gZnJvbSAnQGJpdGdvL3N0YXRpY3MnO1xuaW1wb3J0IHsgU3Rha2luZ09wZXJhdGlvblR5cGVzIH0gZnJvbSAnLi4vYmFzZUNvaW4nO1xuaW1wb3J0IHsgQ29udHJhY3RNZXRob2RDb25maWcgfSBmcm9tICcuLi9ldGgvaWZhY2UnO1xuXG5leHBvcnQgY29uc3QgTG9ja01ldGhvZElkID0gJzB4ZjgzZDA4YmEnOyAvLyBsb2NrKClcbmV4cG9ydCBjb25zdCBVbmxvY2tNZXRob2RJZCA9ICcweDYxOThlMzM5JzsgLy8gdW5sb2NrKClcbmV4cG9ydCBjb25zdCBWb3RlTWV0aG9kSWQgPSAnMHg1ODBkNzQ3YSc7IC8vIHZvdGUoKVxuZXhwb3J0IGNvbnN0IFVudm90ZU1ldGhvZElkID0gJzB4NmUxOTg0NzUnOyAvLyByZXZva2VBY3RpdmUoKVxuZXhwb3J0IGNvbnN0IEFjdGl2YXRlTWV0aG9kSWQgPSAnMHgxYzVhOWQ5Yyc7IC8vIGFjdGl2YXRlKClcbmV4cG9ydCBjb25zdCBXaXRoZHJhd01ldGhvZElkID0gJzB4MmUxYTdkNGQnOyAvLyB3aXRoZHJhdygpXG5cbmNvbnN0IExvY2tlZEdvbGRUZXN0bmV0QWRkcmVzcyA9ICcweDk0YzNlNjY3NTAxNWQ4NDc5YjY0ODY1N2U3ZGRmY2Q5Mzg0ODlkMGQnO1xuY29uc3QgTG9ja2VkR29sZE1haW5uZXRBZGRyZXNzID0gJzB4NmNjMDgzYWVkOWUzZWJlMzAyYTYzMzZkYmM3YzkyMWM5ZjAzMzQ5ZSc7XG5jb25zdCBFbGVjdGlvblRlc3RuZXRBZGRyZXNzID0gJzB4MTFmZTUyM2Y5M2NhYzE4NWQxMmNiMzljYzNiZDI3OWQyZGU1MjRmOCc7XG5jb25zdCBFbGVjdGlvbk1haW5uZXRBZGRyZXNzID0gJzB4OGQ2Njc3MTkyMTQ0MjkyODcwOTA3ZTNmYThhNTUyN2ZlNTVhN2ZmNic7XG5cbmNvbnN0IG9wZXJhdGlvbnMgPSB7XG4gIFtTdGFraW5nT3BlcmF0aW9uVHlwZXMuTE9DS106IHtcbiAgICBbTmV0d29ya1R5cGUuVEVTVE5FVF06IHtcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogTG9ja2VkR29sZFRlc3RuZXRBZGRyZXNzLFxuICAgICAgbWV0aG9kSWQ6IExvY2tNZXRob2RJZCxcbiAgICAgIHR5cGVzOiBbXSxcbiAgICB9LFxuICAgIFtOZXR3b3JrVHlwZS5NQUlOTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBMb2NrZWRHb2xkTWFpbm5ldEFkZHJlc3MsXG4gICAgICBtZXRob2RJZDogTG9ja01ldGhvZElkLFxuICAgICAgdHlwZXM6IFtdLFxuICAgIH0sXG4gIH0sXG4gIFtTdGFraW5nT3BlcmF0aW9uVHlwZXMuVU5MT0NLXToge1xuICAgIFtOZXR3b3JrVHlwZS5URVNUTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBMb2NrZWRHb2xkVGVzdG5ldEFkZHJlc3MsXG4gICAgICBtZXRob2RJZDogVW5sb2NrTWV0aG9kSWQsXG4gICAgICB0eXBlczogWyd1aW50MjU2J10sXG4gICAgfSxcbiAgICBbTmV0d29ya1R5cGUuTUFJTk5FVF06IHtcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogTG9ja2VkR29sZE1haW5uZXRBZGRyZXNzLFxuICAgICAgbWV0aG9kSWQ6IFVubG9ja01ldGhvZElkLFxuICAgICAgdHlwZXM6IFsndWludDI1NiddLFxuICAgIH0sXG4gIH0sXG4gIFtTdGFraW5nT3BlcmF0aW9uVHlwZXMuVk9URV06IHtcbiAgICBbTmV0d29ya1R5cGUuVEVTVE5FVF06IHtcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogRWxlY3Rpb25UZXN0bmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBWb3RlTWV0aG9kSWQsXG4gICAgICB0eXBlczogWydhZGRyZXNzJywgJ3VpbnQyNTYnLCAnYWRkcmVzcycsICdhZGRyZXNzJ10sXG4gICAgfSxcbiAgICBbTmV0d29ya1R5cGUuTUFJTk5FVF06IHtcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogRWxlY3Rpb25NYWlubmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBWb3RlTWV0aG9kSWQsXG4gICAgICB0eXBlczogWydhZGRyZXNzJywgJ3VpbnQyNTYnLCAnYWRkcmVzcycsICdhZGRyZXNzJ10sXG4gICAgfSxcbiAgfSxcbiAgW1N0YWtpbmdPcGVyYXRpb25UeXBlcy5VTlZPVEVdOiB7XG4gICAgW05ldHdvcmtUeXBlLlRFU1RORVRdOiB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IEVsZWN0aW9uVGVzdG5ldEFkZHJlc3MsXG4gICAgICBtZXRob2RJZDogVW52b3RlTWV0aG9kSWQsXG4gICAgICB0eXBlczogWydhZGRyZXNzJywgJ3VpbnQyNTYnLCAnYWRkcmVzcycsICdhZGRyZXNzJywgJ3VpbnQyNTYnXSxcbiAgICB9LFxuICAgIFtOZXR3b3JrVHlwZS5NQUlOTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBFbGVjdGlvbk1haW5uZXRBZGRyZXNzLFxuICAgICAgbWV0aG9kSWQ6IFVudm90ZU1ldGhvZElkLFxuICAgICAgdHlwZXM6IFsnYWRkcmVzcycsICd1aW50MjU2JywgJ2FkZHJlc3MnLCAnYWRkcmVzcycsICd1aW50MjU2J10sXG4gICAgfSxcbiAgfSxcbiAgW1N0YWtpbmdPcGVyYXRpb25UeXBlcy5BQ1RJVkFURV06IHtcbiAgICBbTmV0d29ya1R5cGUuVEVTVE5FVF06IHtcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogRWxlY3Rpb25UZXN0bmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBBY3RpdmF0ZU1ldGhvZElkLFxuICAgICAgdHlwZXM6IFsnYWRkcmVzcyddLFxuICAgIH0sXG4gICAgW05ldHdvcmtUeXBlLk1BSU5ORVRdOiB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IEVsZWN0aW9uTWFpbm5ldEFkZHJlc3MsXG4gICAgICBtZXRob2RJZDogQWN0aXZhdGVNZXRob2RJZCxcbiAgICAgIHR5cGVzOiBbJ2FkZHJlc3MnXSxcbiAgICB9LFxuICB9LFxuICBbU3Rha2luZ09wZXJhdGlvblR5cGVzLldJVEhEUkFXXToge1xuICAgIFtOZXR3b3JrVHlwZS5URVNUTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBMb2NrZWRHb2xkVGVzdG5ldEFkZHJlc3MsXG4gICAgICBtZXRob2RJZDogV2l0aGRyYXdNZXRob2RJZCxcbiAgICAgIHR5cGVzOiBbJ3VpbnQyNTYnXSxcbiAgICB9LFxuICAgIFtOZXR3b3JrVHlwZS5NQUlOTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBMb2NrZWRHb2xkTWFpbm5ldEFkZHJlc3MsXG4gICAgICBtZXRob2RJZDogV2l0aGRyYXdNZXRob2RJZCxcbiAgICAgIHR5cGVzOiBbJ3VpbnQyNTYnXSxcbiAgICB9LFxuICB9LFxufTtcblxuLyoqXG4gKiBAcGFyYW0gdHlwZVxuICogQHBhcmFtIG5ldHdvcmtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZXJhdGlvbkNvbmZpZyh0eXBlOiBTdGFraW5nT3BlcmF0aW9uVHlwZXMsIG5ldHdvcms6IE5ldHdvcmtUeXBlKTogQ29udHJhY3RNZXRob2RDb25maWcge1xuICByZXR1cm4gb3BlcmF0aW9uc1t0eXBlXVtuZXR3b3JrXTtcbn1cbiJdfQ==