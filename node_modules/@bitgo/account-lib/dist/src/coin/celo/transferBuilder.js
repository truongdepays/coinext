"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferBuilder = void 0;
var eth_1 = require("../eth");
/** CELO transfer builder */
var TransferBuilder = /** @class */ (function (_super) {
    __extends(TransferBuilder, _super);
    function TransferBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get the prefix used in generating an operation hash for sending tokens
     * See https://github.com/BitGo/eth-multisig-v2/blob/master/contracts/coins/CeloWalletSimple.sol
     *
     * @returns the string prefix
     */
    TransferBuilder.prototype.getTokenOperationHashPrefix = function () {
        return 'CELO-ERC20';
    };
    /**
     * Get the prefix used in generating an operation hash for sending native coins
     * See https://github.com/BitGo/eth-multisig-v2/blob/master/contracts/coins/CeloWalletSimple.sol
     *
     * @returns the string prefix
     */
    TransferBuilder.prototype.getNativeOperationHashPrefix = function () {
        return 'CELO';
    };
    return TransferBuilder;
}(eth_1.TransferBuilder));
exports.TransferBuilder = TransferBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXJCdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvaW4vY2Vsby90cmFuc2ZlckJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOEJBQStEO0FBRS9ELDRCQUE0QjtBQUM1QjtJQUFxQyxtQ0FBa0I7SUFBdkQ7O0lBb0JBLENBQUM7SUFuQkM7Ozs7O09BS0c7SUFDTyxxREFBMkIsR0FBckM7UUFDRSxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDTyxzREFBNEIsR0FBdEM7UUFDRSxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBQ0gsc0JBQUM7QUFBRCxDQUFDLEFBcEJELENBQXFDLHFCQUFrQixHQW9CdEQ7QUFwQlksMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFuc2ZlckJ1aWxkZXIgYXMgRXRoVHJhbnNmZXJCdWlsZGVyIH0gZnJvbSAnLi4vZXRoJztcblxuLyoqIENFTE8gdHJhbnNmZXIgYnVpbGRlciAqL1xuZXhwb3J0IGNsYXNzIFRyYW5zZmVyQnVpbGRlciBleHRlbmRzIEV0aFRyYW5zZmVyQnVpbGRlciB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIHByZWZpeCB1c2VkIGluIGdlbmVyYXRpbmcgYW4gb3BlcmF0aW9uIGhhc2ggZm9yIHNlbmRpbmcgdG9rZW5zXG4gICAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vQml0R28vZXRoLW11bHRpc2lnLXYyL2Jsb2IvbWFzdGVyL2NvbnRyYWN0cy9jb2lucy9DZWxvV2FsbGV0U2ltcGxlLnNvbFxuICAgKlxuICAgKiBAcmV0dXJucyB0aGUgc3RyaW5nIHByZWZpeFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldFRva2VuT3BlcmF0aW9uSGFzaFByZWZpeCgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnQ0VMTy1FUkMyMCc7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBwcmVmaXggdXNlZCBpbiBnZW5lcmF0aW5nIGFuIG9wZXJhdGlvbiBoYXNoIGZvciBzZW5kaW5nIG5hdGl2ZSBjb2luc1xuICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL0JpdEdvL2V0aC1tdWx0aXNpZy12Mi9ibG9iL21hc3Rlci9jb250cmFjdHMvY29pbnMvQ2Vsb1dhbGxldFNpbXBsZS5zb2xcbiAgICpcbiAgICogQHJldHVybnMgdGhlIHN0cmluZyBwcmVmaXhcbiAgICovXG4gIHByb3RlY3RlZCBnZXROYXRpdmVPcGVyYXRpb25IYXNoUHJlZml4KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdDRUxPJztcbiAgfVxufVxuIl19