"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
var ethereumjs_abi_1 = __importDefault(require("ethereumjs-abi"));
var Eth = __importStar(require("../eth"));
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var walletUtil_1 = require("../eth/walletUtil");
var transaction_1 = require("./transaction");
var stakingBuilder_1 = require("./stakingBuilder");
var utils_1 = require("./utils");
var transferBuilder_1 = require("./transferBuilder");
var ethereumjs_util_1 = require("ethereumjs-util");
var TransactionBuilder = /** @class */ (function (_super) {
    __extends(TransactionBuilder, _super);
    function TransactionBuilder(_coinConfig) {
        var _this = _super.call(this, _coinConfig) || this;
        _this._common = utils_1.getCommon(_this._coinConfig.network.type);
        _this.transaction = new transaction_1.Transaction(_this._coinConfig, _this._common);
        return _this;
    }
    /** @inheritdoc */
    TransactionBuilder.prototype.type = function (type) {
        _super.prototype.type.call(this, type);
        this._stakingBuilder = undefined;
    };
    TransactionBuilder.prototype.getTransactionData = function () {
        switch (this._type) {
            case baseCoin_1.TransactionType.StakingLock:
                return this.buildLockStakeTransaction();
            case baseCoin_1.TransactionType.StakingUnlock:
            case baseCoin_1.TransactionType.StakingVote:
            case baseCoin_1.TransactionType.StakingUnvote:
            case baseCoin_1.TransactionType.StakingActivate:
            case baseCoin_1.TransactionType.StakingWithdraw:
                return this.buildStakingTransaction();
        }
        return _super.prototype.getTransactionData.call(this);
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.fromImplementation = function (rawTransaction) {
        var tx;
        if (/^0x?[0-9a-f]{1,}$/.test(rawTransaction.toLowerCase())) {
            tx = transaction_1.Transaction.fromSerialized(this._coinConfig, this._common, rawTransaction);
            _super.prototype.loadBuilderInput.call(this, tx.toJson());
        }
        else {
            var txData = JSON.parse(rawTransaction);
            tx = new transaction_1.Transaction(this._coinConfig, this._common, txData);
        }
        return tx;
    };
    TransactionBuilder.prototype.setTransactionTypeFields = function (decodedType, transactionJson) {
        switch (decodedType) {
            case baseCoin_1.TransactionType.StakingLock:
                this._stakingBuilder = new stakingBuilder_1.StakingBuilder(this._coinConfig)
                    .type(baseCoin_1.StakingOperationTypes.LOCK)
                    .amount(transactionJson.value);
                break;
            case baseCoin_1.TransactionType.StakingUnlock:
            case baseCoin_1.TransactionType.StakingVote:
            case baseCoin_1.TransactionType.StakingUnvote:
            case baseCoin_1.TransactionType.StakingActivate:
            case baseCoin_1.TransactionType.StakingWithdraw:
                this._stakingBuilder = new stakingBuilder_1.StakingBuilder(this._coinConfig, transactionJson.data);
                break;
            default:
                _super.prototype.setTransactionTypeFields.call(this, decodedType, transactionJson);
                break;
        }
    };
    /**
     * Returns the smart contract encoded data
     *
     * @param {string[]} addresses - the contract signers
     * @returns {string} - the smart contract encoded data
     */
    TransactionBuilder.prototype.getContractData = function (addresses) {
        var params = [addresses];
        var resultEncodedParameters = ethereumjs_abi_1.default.rawEncode(walletUtil_1.walletSimpleConstructor, params)
            .toString('hex')
            .replace('0x', '');
        return utils_1.walletSimpleByteCode + resultEncodedParameters;
    };
    // region Stake methods
    /**
     * Gets the staking lock builder if exist, or creates a new one for this transaction and returns it
     * requires: amount
     *
     * @returns {StakingBuilder} the staking builder
     */
    TransactionBuilder.prototype.lock = function () {
        if (this._type !== baseCoin_1.TransactionType.StakingLock) {
            throw new errors_1.BuildTransactionError('Lock can only be set for Staking Lock transactions type');
        }
        return this.getBuilder(baseCoin_1.StakingOperationTypes.LOCK);
    };
    /**
     * Gets the staking vote builder if exist, or creates a new one for this transaction and returns it
     * requires: group, lesser, greater, amount
     *
     * @returns {StakingBuilder} the staking builder
     */
    TransactionBuilder.prototype.vote = function () {
        if (this._type !== baseCoin_1.TransactionType.StakingVote) {
            throw new errors_1.BuildTransactionError('Votes can only be set for a staking transaction');
        }
        return this.getBuilder(baseCoin_1.StakingOperationTypes.VOTE);
    };
    /**
     * Gets the staking activate builder if exist, or creates a new one for this transaction and returns it
     * requires: group
     *
     * @returns {StakingBuilder} the staking builder
     */
    TransactionBuilder.prototype.activate = function () {
        if (this._type !== baseCoin_1.TransactionType.StakingActivate) {
            throw new errors_1.BuildTransactionError('Activation can only be set for a staking transaction');
        }
        return this.getBuilder(baseCoin_1.StakingOperationTypes.ACTIVATE);
    };
    /**
     * Gets the staking unlock builder if exist, or creates a new one for this transaction and returns it
     * requires: amount
     *
     * @returns {StakingBuilder} the staking builder
     */
    TransactionBuilder.prototype.unlock = function () {
        if (this._type !== baseCoin_1.TransactionType.StakingUnlock) {
            throw new errors_1.BuildTransactionError('Unlock can only be set for Staking Unlock transactions type');
        }
        return this.getBuilder(baseCoin_1.StakingOperationTypes.UNLOCK);
    };
    /**
     * Gets the staking unvote builder if exist, or creates a new one for this transaction and returns it
     * requires: group, lesser, greater, amount, index
     *
     * @returns {StakingBuilder} the staking builder
     */
    TransactionBuilder.prototype.unvote = function () {
        if (this._type !== baseCoin_1.TransactionType.StakingUnvote) {
            throw new errors_1.BuildTransactionError('Unvote can only be set for a staking transaction');
        }
        return this.getBuilder(baseCoin_1.StakingOperationTypes.UNVOTE);
    };
    /**
     * Gets the staking withdraw builder if exist, or creates a new one for this transaction and returns it
     * requires: index (unlock list)
     *
     * @returns {StakingBuilder} the staking builder
     */
    TransactionBuilder.prototype.withdraw = function () {
        if (this._type !== baseCoin_1.TransactionType.StakingWithdraw) {
            throw new errors_1.BuildTransactionError('Withdraw can only be set for a staking transaction');
        }
        return this.getBuilder(baseCoin_1.StakingOperationTypes.WITHDRAW);
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.transfer = function (data) {
        if (this._type !== baseCoin_1.TransactionType.Send) {
            throw new errors_1.BuildTransactionError('Transfers can only be set for send transactions');
        }
        if (!this._transfer) {
            this._transfer = new transferBuilder_1.TransferBuilder(data);
        }
        return this._transfer;
    };
    /**
     * Get the appropriate builder for the selected type
     *
     * @param {StakingOperationTypes} type the selected type for the staking builder
     * @returns {StakingBuilder} the staking builder for the selected type
     */
    TransactionBuilder.prototype.getBuilder = function (type) {
        if (!this._stakingBuilder) {
            this._stakingBuilder = new stakingBuilder_1.StakingBuilder(this._coinConfig).type(type);
        }
        return this._stakingBuilder;
    };
    TransactionBuilder.prototype.getStaking = function () {
        if (!this._stakingBuilder) {
            throw new errors_1.BuildTransactionError('No staking information set');
        }
        return this._stakingBuilder.build();
    };
    TransactionBuilder.prototype.buildLockStakeTransaction = function () {
        var stake = this.getStaking();
        var data = this.buildBase(stake.serialize());
        data.to = stake.address;
        data.value = stake.amount;
        return data;
    };
    TransactionBuilder.prototype.buildStakingTransaction = function () {
        var stake = this.getStaking();
        var data = this.buildBase(stake.serialize());
        data.to = stake.address;
        return data;
    };
    /**
     * Get the final v value. Final v is described in EIP-155.
     *
     * @protected for internal use when the enableFinalVField flag is true.
     */
    TransactionBuilder.prototype.getFinalV = function () {
        return ethereumjs_util_1.addHexPrefix(this._common.chainIdBN().toString(16));
    };
    return TransactionBuilder;
}(Eth.TransactionBuilder));
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,