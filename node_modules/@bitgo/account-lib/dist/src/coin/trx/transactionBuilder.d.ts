import BigNumber from 'bignumber.js';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseKey } from '../baseCoin/iface';
import { BaseTransactionBuilder } from '../baseCoin';
import { TransactionReceipt } from './iface';
import { Address } from './address';
import { Transaction } from './transaction';
/**
 * Tron transaction builder.
 */
export declare class TransactionBuilder extends BaseTransactionBuilder {
    private _transaction;
    /**
     * Public constructor.
     *
     * @param {CoinConfig} _coinConfig Configuration object
     */
    constructor(_coinConfig: Readonly<CoinConfig>);
    /**
     * Parse transaction takes in raw JSON directly from the node.
     *
     * @param {TransactionReceipt} rawTransaction The Tron transaction in JSON format as returned by the Tron lib or a stringifyed version of such JSON.
     * @returns {Transaction} Tron transaction
     */
    protected fromImplementation(rawTransaction: TransactionReceipt | string): Transaction;
    /** @inheritdoc */
    protected signImplementation(key: BaseKey): Transaction;
    protected applySignature(key: BaseKey): Transaction;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    initBuilder(tx: TransactionReceipt | string): void;
    /**
     * Extend the validity of this transaction by the given amount of time
     *
     * @param {number} extensionMs The number of milliseconds to extend the validTo time
     * @returns {undefined}
     */
    extendValidTo(extensionMs: number): void;
    /** @inheritdoc */
    validateValue(value: BigNumber): void;
    /** @inheritdoc */
    validateAddress(address: Address): void;
    /** @inheritdoc */
    validateKey(key: BaseKey): void;
    /**
     * Validate the contents of a raw transaction. The validation
     * phase is to compare the raw-data-hex to the raw-data of the
     * transaction.
     *
     * The contents to be validated are
     * 1. The transaction id
     * 2. The expiration date
     * 3. The timestamp
     * 4. The contract
     *
     * @param {TransactionReceipt | string} rawTransaction The raw transaction to be validated
     */
    validateRawTransaction(rawTransaction: TransactionReceipt | string): void;
    /** @inheritdoc */
    validateTransaction(transaction: Transaction): void;
    /** @inheritdoc */
    protected get transaction(): Transaction;
    /** @inheritdoc */
    protected set transaction(transaction: Transaction);
}
//# sourceMappingURL=transactionBuilder.d.ts.map