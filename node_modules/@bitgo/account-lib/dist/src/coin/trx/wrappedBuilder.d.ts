import BigNumber from 'bignumber.js';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseKey } from '../baseCoin/iface';
import { BaseTransaction } from '../baseCoin';
import { Transaction } from './transaction';
import { Address } from './address';
import { TransactionBuilder } from './transactionBuilder';
import { ContractCallBuilder } from './contractCallBuilder';
import { TransactionReceipt } from './iface';
/**
 * Wrapped Builder class
 * This builder is created to maintain compatibility with the current uses of account-lib
 * It has an instance of Transaction Builder or Contract Call Builder as required.
 */
export declare class WrappedBuilder extends TransactionBuilder {
    private _builder;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /**
     * Returns a specific builder to create a contract call transaction
     *
     * @param {Transaction} [tx] The transaction to initialize builder
     * @returns {ContractCallBuilder} The specific contract call builder
     */
    getContractCallBuilder(tx?: TransactionReceipt | string): ContractCallBuilder;
    getTransactionBuilder(tx?: TransactionReceipt | string): TransactionBuilder;
    private initializeBuilder;
    /** @inheritdoc */
    extendValidTo(extensionMs: number): void;
    /** @inheritdoc */
    sign(key: BaseKey): void;
    /** @inheritdoc */
    build(): Promise<BaseTransaction>;
    /** @inheritdoc */
    from(raw: any): TransactionBuilder;
    /**
     * Get the raw data hex from a raw transaction
     *
     * @param {string | { [key: string]: any }} raw the raw transaction as a string or as an object
     * @returns {string} the raw data hex
     */
    private getTxReceipt;
    /** @inheritdoc */
    validateAddress(address: Address): void;
    /** @inheritdoc */
    validateKey(key: BaseKey): void;
    /** @inheritdoc */
    validateRawTransaction(rawTransaction: any): void;
    /** @inheritdoc */
    validateTransaction(transaction: Transaction): void;
    /** @inheritdoc */
    validateValue(value: BigNumber): void;
}
//# sourceMappingURL=wrappedBuilder.d.ts.map