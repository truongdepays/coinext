"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyPair = void 0;
var bip32 = __importStar(require("bip32"));
var crypto_1 = require("crypto");
var enum_1 = require("../baseCoin/enum");
var iface_1 = require("../baseCoin/iface");
var secp256k1ExtendedKeyPair_1 = require("../baseCoin/secp256k1ExtendedKeyPair");
var Utils = __importStar(require("./utils"));
var DEFAULT_SEED_SIZE_BYTES = 16;
/**
 * Tron keys and address management.
 */
var KeyPair = /** @class */ (function (_super) {
    __extends(KeyPair, _super);
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param {KeyPairOptions} source Either a master seed, a private key (extended or raw), or a public key
     *     (extended, compressed, or uncompressed)
     */
    function KeyPair(source) {
        var _this = _super.call(this, source) || this;
        if (!source) {
            var seed = crypto_1.randomBytes(DEFAULT_SEED_SIZE_BYTES);
            _this.hdNode = bip32.fromSeed(seed);
        }
        else if (iface_1.isSeed(source)) {
            _this.hdNode = bip32.fromSeed(source.seed);
        }
        else if (iface_1.isPrivateKey(source)) {
            _super.prototype.recordKeysFromPrivateKey.call(_this, source.prv);
        }
        else if (iface_1.isPublicKey(source)) {
            _super.prototype.recordKeysFromPublicKey.call(_this, source.pub);
        }
        else {
            throw new Error('Invalid key pair options');
        }
        if (_this.hdNode) {
            _this.keyPair = secp256k1ExtendedKeyPair_1.Secp256k1ExtendedKeyPair.toKeyPair(_this.hdNode);
        }
        return _this;
    }
    /**
     * Tron default keys format is raw private and uncompressed public key
     *
     * @returns {DefaultKeys} The keys in the protocol default key format
     */
    KeyPair.prototype.getKeys = function () {
        var _a;
        return {
            pub: this.getPublicKey({ compressed: false }).toString('hex').toUpperCase(),
            prv: (_a = this.getPrivateKey()) === null || _a === void 0 ? void 0 : _a.toString('hex').toUpperCase(),
        };
    };
    /**
     * Get a public address in the specified format, or in base58 if none is provided.
     *
     * @param {AddressFormat} format The address specified format
     * @returns {string} The public address in the specified format
     */
    KeyPair.prototype.getAddress = function (format) {
        var pub = this.getKeys().pub;
        // These are custom Tron methods. They can probably be replaced with other methods or libraries
        var addressBytes = Utils.getRawAddressFromPubKey(Buffer.from(pub, 'hex'));
        if (!format || format === enum_1.AddressFormat.base58) {
            // Default address are in hex
            return Utils.getBase58AddressFromByteArray(addressBytes);
        }
        else if (format === enum_1.AddressFormat.hex) {
            return Utils.getHexAddressFromByteArray(addressBytes);
        }
        throw new Error('Unsupported address format');
    };
    /**
     * Generates a signature for an arbitrary string with the current private key using keccak256
     * hashing algorithm. Throws if there is no private key.
     *
     * @param {string} message to produce a signature for
     * @returns {Buffer} The signature as a buffer
     */
    KeyPair.prototype.signMessage = function (message) {
        var messageToSign = Buffer.from(message).toString('hex');
        var prv = this.getKeys().prv;
        if (!prv) {
            throw new Error('Missing private key');
        }
        var signature = Utils.signString(messageToSign, prv, true).replace(/^0x/, '');
        return Buffer.from(signature, 'hex');
    };
    /**
     * Verifies a message signature using the current public key.
     *
     * @param {string} message signed
     * @param {Buffer} signature to verify
     * @returns {boolean} True if the message was signed with the current key pair
     */
    KeyPair.prototype.verifySignature = function (message, signature) {
        var messageToVerify = Buffer.from(message).toString('hex');
        var address = this.getAddress(enum_1.AddressFormat.base58);
        return Utils.verifySignature(messageToVerify, address, signature.toString('hex'), true);
    };
    return KeyPair;
}(secp256k1ExtendedKeyPair_1.Secp256k1ExtendedKeyPair));
exports.KeyPair = KeyPair;
//# sourceMappingURL=data:application/json;base64,