"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractCallBuilder = exports.MAX_FEE = void 0;
var crypto_1 = require("crypto");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var baseCoin_1 = require("../baseCoin");
var tron_1 = require("../../../resources/trx/protobuf/tron");
var errors_1 = require("../baseCoin/errors");
var transactionBuilder_1 = require("./transactionBuilder");
var transaction_1 = require("./transaction");
var utils_1 = require("./utils");
var ContractType = tron_1.protocol.Transaction.Contract.ContractType;
var DEFAULT_EXPIRATION = 3600000; // one hour
var MAX_DURATION = 31536000000; // one year
exports.MAX_FEE = 5000000000; // 5e9 = 5000 TRX acording https://developers.tron.network/docs/setting-a-fee-limit-on-deployexecution
var ContractCallBuilder = /** @class */ (function (_super) {
    __extends(ContractCallBuilder, _super);
    function ContractCallBuilder(_coinConfig) {
        var _this = _super.call(this, _coinConfig) || this;
        _this._signingKeys = [];
        _this.transaction = new transaction_1.Transaction(_coinConfig);
        return _this;
    }
    /** @inheritdoc */
    ContractCallBuilder.prototype.buildImplementation = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.createTransaction();
                /** @inheritdoc */
                // This method must be extended on child classes
                if (this._signingKeys.length > 0) {
                    this.applySignatures();
                }
                if (!this.transaction.id) {
                    throw new errors_1.BuildTransactionError('A valid transaction must have an id');
                }
                return [2 /*return*/, Promise.resolve(this.transaction)];
            });
        });
    };
    /** @inheritdoc */
    ContractCallBuilder.prototype.signImplementation = function (key) {
        if (this._signingKeys.some(function (signingKey) { return signingKey.key === key.key; })) {
            throw new errors_1.SigningError('Duplicated key');
        }
        this._signingKeys.push(key);
        // We keep this return for compatibility but is not meant to be use
        return this.transaction;
    };
    /**
     * Initialize the transaction builder fields using the transaction data
     *
     * @param {any} rawTransaction the transaction data in a string or JSON format
     * @returns {ContractCallBuilder} the builder with the transaction data set
     */
    ContractCallBuilder.prototype.initBuilder = function (rawTransaction) {
        this.validateRawTransaction(rawTransaction);
        var tx = this.fromImplementation(rawTransaction);
        this.transaction = tx;
        this._signingKeys = [];
        var rawData = tx.toJson().raw_data;
        this._refBlockBytes = rawData.ref_block_bytes;
        this._refBlockHash = rawData.ref_block_hash;
        this._expiration = rawData.expiration;
        this._timestamp = rawData.timestamp;
        this._fee = { feeLimit: rawData.fee_limit.toString() };
        this.transaction.setTransactionType(baseCoin_1.TransactionType.ContractCall);
        var contractCall = rawData.contract[0];
        this.initContractCall(contractCall);
        return this;
    };
    /**
     * Initialize the contract call specific data
     *
     * @param {TriggerSmartContract} contractCall object with transfer data
     */
    ContractCallBuilder.prototype.initContractCall = function (contractCall) {
        var _a = contractCall.parameter.value, data = _a.data, owner_address = _a.owner_address, contract_address = _a.contract_address;
        if (data) {
            this.data(data);
        }
        if (contract_address) {
            this.to({ address: utils_1.getBase58AddressFromHex(contract_address) });
        }
        if (owner_address) {
            this.source({ address: utils_1.getBase58AddressFromHex(owner_address) });
        }
    };
    // region Contract Call fields
    /**
     * Set the source address,
     *
     * @param {Address} address source account
     * @returns {ContractCallBuilder} the builder with the new parameter set
     */
    ContractCallBuilder.prototype.source = function (address) {
        this.validateAddress(address);
        this._ownerAddress = utils_1.getHexAddressFromBase58Address(address.address);
        return this;
    };
    /**
     * Set the address of the contract to be called,
     *
     * @param {Address} contractAddress the contract address
     * @returns {ContractCallBuilder} the builder with the new parameter set
     */
    ContractCallBuilder.prototype.to = function (contractAddress) {
        this.validateAddress(contractAddress);
        this._toContractAddress = utils_1.getHexAddressFromBase58Address(contractAddress.address);
        return this;
    };
    /**
     * Set the data with the method call and parameters
     *
     * @param {string} data data encoded on hexa
     * @returns {ContractCallBuilder} the builder with the new parameter set
     */
    ContractCallBuilder.prototype.data = function (data) {
        if (!utils_1.isValidHex(data)) {
            throw new errors_1.InvalidParameterValueError(data + ' is not a valid hex string.');
        }
        this._data = data;
        return this;
    };
    /**
     * Set the block values,
     *
     * @param {Block} block the object containing number and hash of the block
     * @returns {ContractCallBuilder} the builder with the new parameter set
     */
    ContractCallBuilder.prototype.block = function (block) {
        var blockBytes = Buffer.alloc(8);
        blockBytes.writeInt32BE(block.number, 4);
        this._refBlockBytes = blockBytes.slice(6, 8).toString('hex');
        this._refBlockHash = Buffer.from(block.hash, 'hex').slice(8, 16).toString('hex');
        return this;
    };
    /**
     * Set the expiration time for the transaction, set also timestamp if it was not set previously
     *
     * @param {number} time the expiration time in milliseconds
     * @returns {ContractCallBuilder} the builder with the new parameter set
     */
    ContractCallBuilder.prototype.expiration = function (time) {
        if (this.transaction.id) {
            throw new errors_1.ExtendTransactionError('Expiration is already set, it can only be extended');
        }
        this._timestamp = this._timestamp || Date.now();
        this.validateExpirationTime(time);
        this._expiration = time;
        return this;
    };
    /** @inheritdoc */
    ContractCallBuilder.prototype.extendValidTo = function (extensionMs) {
        if (this.transaction.signature && this.transaction.signature.length > 0) {
            throw new errors_1.ExtendTransactionError('Cannot extend a signed transaction');
        }
        if (extensionMs <= 0) {
            throw new Error('Value cannot be below zero');
        }
        if (extensionMs > MAX_DURATION) {
            throw new errors_1.ExtendTransactionError('The expiration cannot be extended more than one year');
        }
        if (this._expiration) {
            this._expiration = this._expiration + extensionMs;
        }
        else {
            throw new Error('There is not expiration to extend');
        }
    };
    /**
     * Set the timestamp for the transaction
     *
     * @param {number} time the timestamp in milliseconds
     * @returns {ContractCallBuilder} the builder with the new parameter set
     */
    ContractCallBuilder.prototype.timestamp = function (time) {
        this._timestamp = time;
        return this;
    };
    /**
     * Set the fee limit for the transaction
     *
     * @param {Fee} fee the fee limit for the transaction
     * @returns {ContractCallBuilder} the builder with the new parameter set
     */
    ContractCallBuilder.prototype.fee = function (fee) {
        var feeLimit = new bignumber_js_1.default(fee.feeLimit);
        var tronNetwork = this._coinConfig.network;
        if (feeLimit.isNaN() || feeLimit.isLessThan(0) || feeLimit.isGreaterThan(tronNetwork.maxFeeLimit)) {
            throw new errors_1.InvalidParameterValueError('Invalid fee limit value');
        }
        this._fee = fee;
        return this;
    };
    // endregion
    ContractCallBuilder.prototype.createTransaction = function () {
        var rawDataHex = this.getRawDataHex();
        var rawData = utils_1.decodeTransaction(rawDataHex);
        var contract = rawData.contract[0];
        var contractParameter = contract.parameter;
        contractParameter.value.contract_address = this._toContractAddress.toLocaleLowerCase();
        contractParameter.value.owner_address = this._ownerAddress.toLocaleLowerCase();
        contractParameter.value.data = this._data.toLocaleLowerCase();
        contractParameter.type_url = 'type.googleapis.com/protocol.TriggerSmartContract';
        contract.type = 'TriggerSmartContract';
        var hexBuffer = Buffer.from(rawDataHex, 'hex');
        var id = crypto_1.createHash('sha256').update(hexBuffer).digest('hex');
        var txRecip = {
            raw_data: rawData,
            raw_data_hex: rawDataHex,
            txID: id,
            signature: this.transaction.signature,
        };
        this.transaction = new transaction_1.Transaction(this._coinConfig, txRecip);
    };
    ContractCallBuilder.prototype.getRawDataHex = function () {
        var rawContract = {
            ownerAddress: utils_1.getByteArrayFromHexAddress(this._ownerAddress),
            contractAddress: utils_1.getByteArrayFromHexAddress(this._toContractAddress),
            data: utils_1.getByteArrayFromHexAddress(this._data),
        };
        var contractCall = tron_1.protocol.TriggerSmartContract.fromObject(rawContract);
        var contractBytes = tron_1.protocol.TriggerSmartContract.encode(contractCall).finish();
        var txContract = {
            type: ContractType.TriggerSmartContract,
            parameter: {
                value: contractBytes,
                type_url: 'type.googleapis.com/protocol.TriggerSmartContract',
            },
        };
        var raw = {
            refBlockBytes: Buffer.from(this._refBlockBytes, 'hex'),
            refBlockHash: Buffer.from(this._refBlockHash, 'hex'),
            expiration: this._expiration || Date.now() + DEFAULT_EXPIRATION,
            timestamp: this._timestamp || Date.now(),
            contract: [txContract],
            feeLimit: parseInt(this._fee.feeLimit, 10),
        };
        var rawTx = tron_1.protocol.Transaction.raw.create(raw);
        return Buffer.from(tron_1.protocol.Transaction.raw.encode(rawTx).finish()).toString('hex');
    };
    ContractCallBuilder.prototype.applySignatures = function () {
        var _this = this;
        if (!this.transaction.inputs) {
            throw new errors_1.SigningError('Transaction has no inputs');
        }
        this._signingKeys.forEach(function (key) { return _this.applySignature(key); });
    };
    /** @inheritdoc */
    // Specifically, checks hex underlying transaction hashes to correct transaction ID.
    ContractCallBuilder.prototype.validateTransaction = function (transaction) {
        this.validateMandatoryFields();
    };
    /** @inheritdoc */
    ContractCallBuilder.prototype.validateMandatoryFields = function () {
        if (!this._data) {
            throw new errors_1.BuildTransactionError('Missing parameter: data');
        }
        if (!this._ownerAddress) {
            throw new errors_1.BuildTransactionError('Missing parameter: source');
        }
        if (!this._toContractAddress) {
            throw new errors_1.BuildTransactionError('Missing parameter: contract address');
        }
        if (!this._refBlockBytes || !this._refBlockHash) {
            throw new errors_1.BuildTransactionError('Missing block reference information');
        }
        if (!this._fee) {
            throw new errors_1.BuildTransactionError('Missing fee');
        }
    };
    ContractCallBuilder.prototype.validateExpirationTime = function (value) {
        if (value < this._timestamp) {
            throw new errors_1.InvalidParameterValueError('Expiration must be greater than timestamp');
        }
        if (value < Date.now()) {
            throw new errors_1.InvalidParameterValueError('Expiration must be greater than current time');
        }
        if (value - this._timestamp > MAX_DURATION) {
            throw new errors_1.InvalidParameterValueError('Expiration must not be greater than one year');
        }
    };
    return ContractCallBuilder;
}(transactionBuilder_1.TransactionBuilder));
exports.ContractCallBuilder = ContractCallBuilder;
//# sourceMappingURL=data:application/json;base64,