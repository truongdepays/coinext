import { BaseCoin as CoinConfig } from '@bitgo/statics';
import algosdk from 'algosdk';
import { BaseTransaction, TransactionType } from '../baseCoin';
import { BaseKey } from '../baseCoin/iface';
import { KeyPair } from './keyPair';
import { TxData } from './ifaces';
export declare class Transaction extends BaseTransaction {
    private _algoTransaction?;
    private _signedTransaction?;
    private _numberOfRequiredSigners;
    private _sender;
    private _signers;
    private _signedBy;
    constructor(coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    canSign({ key }: BaseKey): boolean;
    sender(address: string): void;
    /**
     * Signs transaction.
     *
     * @param {KeyPair} keyPair Signer keys.
     */
    sign(keyPair: KeyPair[]): void;
    /**
     * Signs transaction.
     *
     * @param {KeyPair} keyPair Signer keys.
     */
    private signSingle;
    /**
     * Signs multisig transaction.
     *
     * @param {KeyPair} keyPair Signers keys.
     */
    private signMultiSig;
    set signedTransaction(txn: Uint8Array);
    get numberOfRequiredSigners(): number;
    /**
     * Sets the number of signers required for signing this transaction.
     *
     * @param {number} num Threshold number of signers.
     */
    setNumberOfRequiredSigners(num: number): void;
    set signers(addrs: string[]);
    get signers(): string[];
    set signedBy(signer: string[]);
    get signedBy(): string[];
    /**
     * Sets algo transaction.
     *
     * @param {algosdk.Transaction} tx
     */
    setAlgoTransaction(tx: algosdk.Transaction): void;
    /**
     * Get underlaying algo transaction.
     *
     * @returns {algosdk.Transaction}
     */
    getAlgoTransaction(): algosdk.Transaction | undefined;
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    setTransactionType(transactionType: TransactionType): void;
    estimateSize(): number;
    /** @inheritdoc */
    toBroadcastFormat(): Uint8Array;
    /** @inheritdoc */
    toJson(): TxData;
    /**
     * Load the input and output data on this transaction.
     */
    loadInputsAndOutputs(): void;
}
//# sourceMappingURL=transaction.d.ts.map