import { BaseCoin as CoinConfig } from '@bitgo/statics';
import algosdk from 'algosdk';
import { BaseAddress } from '../baseCoin/iface';
import { TransactionType } from '../baseCoin';
import { TransferBuilder } from './transferBuilder';
import { Transaction } from './transaction';
export declare class AssetTransferBuilder extends TransferBuilder {
    private _tokenId;
    constructor(coinConfig: Readonly<CoinConfig>);
    /**
     * Sets the token id.
     *
     * The token id uniquely identifies the asset.
     *
     * @param {number} id The token id.
     * @returns {AssetTransferBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/#asset-transfer-transaction
     */
    tokenId(id: number): this;
    /**
     * Sets the parameters of the transaction builder to allowlist an asset.
     *
     * To allow list an asset, you send 0 units of the asset to yourself.
     *
     * This method sets the tokenId, sender, receiver, asset amount, and
     * fee parameters to their respective values to allowlist and asset.
     *
     * @param {number} tokenId The unique identifier of the asset.
     * @param {BaseAddress} userAddress The address of the user.
     * @returns {AssetTransferBuilder} This transaction builder.
     */
    allowListAsset(tokenId: number, userAddress: BaseAddress): this;
    protected buildAlgoTxn(): algosdk.Transaction;
    protected get transactionType(): TransactionType;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: Uint8Array | string): Transaction;
    validateRawTransaction(rawTransaction: Uint8Array | string): void;
    /** @inheritdoc */
    validateTransaction(txn: Transaction): void;
    protected validateFields(tokenId: number, assetAmount: number | bigint, receiver: string): void;
}
//# sourceMappingURL=assetTransferBuilder.d.ts.map