"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetTransferBuilder = void 0;
var algosdk_1 = __importDefault(require("algosdk"));
var errors_1 = require("../baseCoin/errors");
var baseCoin_1 = require("../baseCoin");
var transferBuilder_1 = require("./transferBuilder");
var txnSchema_1 = require("./txnSchema");
var utils_1 = __importDefault(require("./utils"));
var AssetTransferBuilder = /** @class */ (function (_super) {
    __extends(AssetTransferBuilder, _super);
    function AssetTransferBuilder(coinConfig) {
        return _super.call(this, coinConfig) || this;
    }
    /**
     * Sets the token id.
     *
     * The token id uniquely identifies the asset.
     *
     * @param {number} id The token id.
     * @returns {AssetTransferBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/#asset-transfer-transaction
     */
    AssetTransferBuilder.prototype.tokenId = function (id) {
        if (id <= 0) {
            throw new Error('Asset index must be a uint64 value');
        }
        this._tokenId = id;
        return this;
    };
    /**
     * Sets the parameters of the transaction builder to allowlist an asset.
     *
     * To allow list an asset, you send 0 units of the asset to yourself.
     *
     * This method sets the tokenId, sender, receiver, asset amount, and
     * fee parameters to their respective values to allowlist and asset.
     *
     * @param {number} tokenId The unique identifier of the asset.
     * @param {BaseAddress} userAddress The address of the user.
     * @returns {AssetTransferBuilder} This transaction builder.
     */
    AssetTransferBuilder.prototype.allowListAsset = function (tokenId, userAddress) {
        this.tokenId(tokenId);
        this.sender(userAddress);
        this.to(userAddress);
        this.isFlatFee(true);
        this.fee({ fee: '1000' });
        this.amount(0);
        return this;
    };
    AssetTransferBuilder.prototype.buildAlgoTxn = function () {
        return algosdk_1.default.makeAssetTransferTxnWithSuggestedParams(this._sender, this._to, this._closeRemainderTo, undefined, this._amount, this._note, this._tokenId, this.suggestedParams, this._reKeyTo);
    };
    Object.defineProperty(AssetTransferBuilder.prototype, "transactionType", {
        get: function () {
            return baseCoin_1.TransactionType.Send;
        },
        enumerable: false,
        configurable: true
    });
    /** @inheritdoc */
    AssetTransferBuilder.prototype.fromImplementation = function (rawTransaction) {
        var tx = _super.prototype.fromImplementation.call(this, rawTransaction);
        var algoTx = tx.getAlgoTransaction();
        if (!algoTx) {
            throw new errors_1.InvalidTransactionError('Transaction is empty');
        }
        this._tokenId = algoTx.assetIndex;
        this._amount = algoTx.amount || 0;
        this._to = algosdk_1.default.encodeAddress(algoTx.to.publicKey);
        return tx;
    };
    AssetTransferBuilder.prototype.validateRawTransaction = function (rawTransaction) {
        var algoTxn = utils_1.default.decodeAlgoTxn(rawTransaction).txn;
        if (algoTxn.type !== algosdk_1.default.TransactionType.axfer) {
            throw new errors_1.InvalidTransactionError("Invalid Transaction Type: " + algoTxn.type + ". Expected " + algosdk_1.default.TransactionType.axfer);
        }
        this.validateFields(algoTxn.assetIndex, algoTxn.amount, algosdk_1.default.encodeAddress(algoTxn.to.publicKey));
    };
    /** @inheritdoc */
    AssetTransferBuilder.prototype.validateTransaction = function (txn) {
        _super.prototype.validateTransaction.call(this, txn);
        this.validateFields(this._tokenId, this._amount, this._to);
    };
    AssetTransferBuilder.prototype.validateFields = function (tokenId, assetAmount, receiver) {
        var validationResult;
        if (this._sender !== this._to) {
            validationResult = txnSchema_1.AssetTransferTxnSchema.validate({
                tokenId: tokenId,
                assetAmount: assetAmount,
                receiver: receiver,
            });
        }
        else {
            validationResult = txnSchema_1.AssetToggleTxnSchema.validate({
                tokenId: tokenId,
                receiver: receiver,
            });
        }
        if (validationResult.error) {
            throw new errors_1.InvalidTransactionError("Transaction validation failed: " + validationResult.error.message);
        }
    };
    return AssetTransferBuilder;
}(transferBuilder_1.TransferBuilder));
exports.AssetTransferBuilder = AssetTransferBuilder;
//# sourceMappingURL=data:application/json;base64,