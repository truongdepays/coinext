"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var algosdk_1 = __importDefault(require("algosdk"));
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var crypto_1 = require("../../utils/crypto");
var transaction_1 = require("./transaction");
var errors_2 = require("./errors");
var keyPair_1 = require("./keyPair");
var txnSchema_1 = require("./txnSchema");
var utils_1 = __importDefault(require("./utils"));
var MIN_FEE = 1000; // in microalgos
var MAINNET_GENESIS_ID = 'mainnet-v1.0';
var MAINNET_GENESIS_HASH = 'wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8=';
var TESTNET_GENESIS_ID = 'testnet-v1.0';
var TESTNET_GENESIS_HASH = 'SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=';
var BETANET_GENESIS_ID = 'betanet-v1.0';
var BETANET_GENESIS_HASH = 'mFgazF+2uRS1tMiL9dsj01hJGySEmPN28B/TjjvpVW0=';
var TransactionBuilder = /** @class */ (function (_super) {
    __extends(TransactionBuilder, _super);
    function TransactionBuilder(coinConfig) {
        var _this = _super.call(this, coinConfig) || this;
        _this._transaction = new transaction_1.Transaction(coinConfig);
        _this._keyPairs = [];
        return _this;
    }
    /**
     * Sets the fee.
     *
     * The minimum fee is 1000 microalgos.
     *
     * @param {BaseFee} feeObj The amount to pay to the fee sink denoted in microalgos
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    TransactionBuilder.prototype.fee = function (feeObj) {
        this._isFlatFee = true;
        var fee = new bignumber_js_1.default(feeObj.fee).toNumber();
        if (this._isFlatFee && fee < MIN_FEE) {
            throw new errors_2.InsufficientFeeError(fee, MIN_FEE);
        }
        this._fee = fee;
        return this;
    };
    /**
     * Sets whether the fee is a flat fee.
     *
     * A flat fee is the fee for the entire transaction whereas a normal fee
     * is a fee for every byte in the transaction.
     *
     * @param {boolean} isFlatFee Whether the fee should be specified as a flat fee.
     * @returns {TransactionBuilder} This transaction builder.
     */
    TransactionBuilder.prototype.isFlatFee = function (isFlatFee) {
        this._isFlatFee = isFlatFee;
        return this;
    };
    /**
     * Sets the transaction sender.
     *
     * @param {BaseAddress} sender The sender account
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    TransactionBuilder.prototype.sender = function (sender) {
        this.validateAddress(sender);
        this._sender = sender.address;
        this._transaction.sender(sender.address);
        return this;
    };
    /**
     * Sets the genesis id.
     *
     * @param {string} genesisId The genesis id.
     * @example "mainnet-v1.0"
     *
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    TransactionBuilder.prototype.genesisId = function (genesisId) {
        this._genesisId = genesisId;
        return this;
    };
    /**
     * Sets the genesis hash.
     *
     * The genesis hash must be base64 encoded.
     *
     * @param {string} genesisHash The genesis hash.
     * @example "wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8="
     *
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    TransactionBuilder.prototype.genesisHash = function (genesisHash) {
        this._genesisHash = genesisHash;
        return this;
    };
    /**
     * Sets the genesis id and hash to mainnet.
     *
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/algorand-networks/mainnet/#genesis-id
     * @see https://developer.algorand.org/docs/reference/algorand-networks/mainnet/#genesis-hash
     */
    TransactionBuilder.prototype.mainnet = function () {
        this.genesisId(MAINNET_GENESIS_ID);
        this.genesisHash(MAINNET_GENESIS_HASH);
        return this;
    };
    /**
     * Sets the genesis id and hash to testnet.
     *
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/algorand-networks/testnet/#genesis-id
     * @see https://developer.algorand.org/docs/reference/algorand-networks/testnet/#genesis-hash
     */
    TransactionBuilder.prototype.testnet = function () {
        this.genesisId(TESTNET_GENESIS_ID);
        this.genesisHash(TESTNET_GENESIS_HASH);
        return this;
    };
    /**
     * Sets the genesis id and hash to betanet.
     *
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/algorand-networks/betanet/#genesis-id
     * @see https://developer.algorand.org/docs/reference/algorand-networks/betanet/#genesis-hash
     */
    TransactionBuilder.prototype.betanet = function () {
        this.genesisId(BETANET_GENESIS_ID);
        this.genesisHash(BETANET_GENESIS_HASH);
        return this;
    };
    /**
     * Sets the first round.
     *
     * @param {number} round The first protocol round on which this txn is valid.
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    TransactionBuilder.prototype.firstRound = function (round) {
        this.validateValue(new bignumber_js_1.default(round));
        this._firstRound = round;
        return this;
    };
    /**
     * Sets the last round.
     *
     * @param {number} round The first protocol round on which this txn is valid.
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    TransactionBuilder.prototype.lastRound = function (round) {
        this.validateValue(new bignumber_js_1.default(round));
        this._lastRound = round;
        return this;
    };
    /**
     * Sets the lease on the transaction.
     *
     * A lease is a mutex on the transaction that prevents any other transaction
     * from being sent with the same lease until the prior transaction's last
     * round has passed.
     *
     * @param {Uint8Array} lease The lease to put the transaction.
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    TransactionBuilder.prototype.lease = function (lease) {
        this._lease = lease;
        return this;
    };
    /**
     * Sets the note for the transaction.
     *
     * @param {Uint8Array} note Arbitrary data for sender to store.
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    TransactionBuilder.prototype.note = function (note) {
        this._note = note;
        return this;
    };
    /**
     * Sets the authorized address.
     *
     * The authorized asset will be used to authorize all future transactions.
     *
     * @param {BaseAddress} authorizer The address to delegate authorization authority to.
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    TransactionBuilder.prototype.reKeyTo = function (authorizer) {
        this.validateAddress(authorizer);
        this._reKeyTo = authorizer.address;
        return this;
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateAddress = function (_a) {
        var address = _a.address;
        if (!algosdk_1.default.isValidAddress(address)) {
            throw new errors_2.AddressValidationError(address);
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.buildImplementation = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.transaction.setAlgoTransaction(this.buildAlgoTxn());
                this.transaction.setTransactionType(this.transactionType);
                this.transaction.sign(this._keyPairs);
                this._transaction.loadInputsAndOutputs();
                return [2 /*return*/, this._transaction];
            });
        });
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.fromImplementation = function (rawTransaction) {
        var decodedTxn = utils_1.default.decodeAlgoTxn(rawTransaction);
        var algosdkTxn = decodedTxn.txn;
        if (decodedTxn.signed) {
            this._transaction.signedTransaction = decodedTxn.rawTransaction;
            if (decodedTxn.signers) {
                this.setSigners(decodedTxn.signers);
            }
            if (decodedTxn.signedBy) {
                this._transaction.signedBy = decodedTxn.signedBy;
            }
        }
        this.sender({ address: algosdk_1.default.encodeAddress(algosdkTxn.from.publicKey) });
        this._isFlatFee = true;
        this._fee = algosdkTxn.fee;
        this._genesisHash = algosdkTxn.genesisHash.toString('base64');
        this._genesisId = algosdkTxn.genesisID;
        this._firstRound = algosdkTxn.firstRound;
        this._lastRound = algosdkTxn.lastRound;
        this._lease = algosdkTxn.lease;
        this._note = algosdkTxn.note;
        this._reKeyTo = algosdkTxn.reKeyTo ? algosdk_1.default.encodeAddress(algosdkTxn.reKeyTo.publicKey) : undefined;
        this._transaction.setAlgoTransaction(algosdkTxn);
        return this._transaction;
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.signImplementation = function (_a) {
        var key = _a.key;
        var buffKey = utils_1.default.decodeSeed(key);
        var keypair = new keyPair_1.KeyPair({ prv: Buffer.from(buffKey.seed).toString('hex') });
        this._keyPairs.push(keypair);
        return this._transaction;
    };
    TransactionBuilder.prototype.numberOfSigners = function (num) {
        this._transaction.setNumberOfRequiredSigners(num);
        return this;
    };
    TransactionBuilder.prototype.setSigners = function (addrs) {
        var _this = this;
        var signers = addrs instanceof Array ? addrs : [addrs];
        signers.forEach(function (address) { return _this.validateAddress({ address: address }); });
        this._transaction.signers = signers;
        return this;
    };
    /**
     * Sets the number of signers required to sign the transaction.
     *
     * The number of signers cannot be set to a negative value.
     *
     * @param {number} n The number of signers.
     * @returns {TransactionBuilder} This transaction builder.
     */
    TransactionBuilder.prototype.numberOfRequiredSigners = function (n) {
        if (n < 0) {
            throw new errors_1.BuildTransactionError("Number of signers: '" + n + "' cannot be negative");
        }
        this._transaction.setNumberOfRequiredSigners(n);
        return this;
    };
    /**
     * @inheritdoc
     * @see https://developer.algorand.org/docs/features/accounts/#transformation-private-key-to-base64-private-key
     */
    TransactionBuilder.prototype.validateKey = function (_a) {
        var key = _a.key;
        var isValidPrivateKeyFromBytes;
        var isValidPrivateKeyFromHex = crypto_1.isValidEd25519Seed(key);
        var isValidPrivateKeyFromBase64 = crypto_1.isValidEd25519Seed(Buffer.from(key, 'base64').toString('hex'));
        try {
            var decodedSeed = utils_1.default.decodeSeed(key);
            isValidPrivateKeyFromBytes = crypto_1.isValidEd25519Seed(Buffer.from(decodedSeed.seed).toString('hex'));
        }
        catch (err) {
            isValidPrivateKeyFromBytes = false;
        }
        if (!isValidPrivateKeyFromBytes && !isValidPrivateKeyFromHex && !isValidPrivateKeyFromBase64) {
            throw new errors_1.BuildTransactionError("Key validation failed");
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateRawTransaction = function (rawTransaction) {
        var decodedTxn = utils_1.default.decodeAlgoTxn(rawTransaction);
        var algoTxn = decodedTxn.txn;
        var validationResult = txnSchema_1.BaseTransactionSchema.validate({
            fee: algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.fee,
            firstRound: algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.firstRound,
            genesisHash: algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.genesisHash.toString('base64'),
            lastRound: algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.lastRound,
            sender: algoTxn ? algosdk_1.default.encodeAddress(algoTxn.from.publicKey) : undefined,
            genesisId: algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.genesisID,
            lease: algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.lease,
            note: algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.note,
            reKeyTo: (algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.reKeyTo) ? algosdk_1.default.encodeAddress(algoTxn.reKeyTo.publicKey) : undefined,
        });
        if (validationResult.error) {
            throw new errors_1.InvalidTransactionError("Transaction validation failed: " + validationResult.error.message);
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateTransaction = function (_) {
        this.validateBaseFields(this._fee, this._firstRound, this._genesisHash, this._lastRound, this._sender, this._genesisId, this._lease, this._note, this._reKeyTo);
    };
    TransactionBuilder.prototype.validateBaseFields = function (fee, firstRound, genesisHash, lastRound, sender, genesisId, lease, note, reKeyTo) {
        var validationResult = txnSchema_1.BaseTransactionSchema.validate({
            fee: fee,
            firstRound: firstRound,
            genesisHash: genesisHash,
            lastRound: lastRound,
            sender: sender,
            genesisId: genesisId,
            lease: lease,
            note: note,
            reKeyTo: reKeyTo,
        });
        if (validationResult.error) {
            throw new errors_1.InvalidTransactionError("Transaction validation failed: " + validationResult.error.message);
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateValue = function (value) {
        if (value.isLessThan(0)) {
            throw new errors_1.BuildTransactionError('Value cannot be less than zero');
        }
    };
    Object.defineProperty(TransactionBuilder.prototype, "transaction", {
        /** @inheritdoc */
        get: function () {
            return this._transaction;
        },
        /** @inheritdoc */
        set: function (transaction) {
            this._transaction = transaction;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionBuilder.prototype, "suggestedParams", {
        /**
         * Convenience method to retrieve the algosdk suggested parameters.
         *
         * @returns {algosdk.SuggestedParams} The algosdk suggested parameters.
         */
        get: function () {
            return {
                flatFee: this._isFlatFee,
                fee: this._fee,
                firstRound: this._firstRound,
                lastRound: this._lastRound,
                genesisID: this._genesisId,
                genesisHash: this._genesisHash,
            };
        },
        enumerable: false,
        configurable: true
    });
    return TransactionBuilder;
}(baseCoin_1.BaseTransactionBuilder));
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,