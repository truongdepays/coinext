import { BaseCoin as CoinConfig } from '@bitgo/statics';
import algosdk from 'algosdk';
import { BaseAddress } from '../baseCoin/iface';
import { TransactionType } from '../baseCoin';
import { TransactionBuilder } from './transactionBuilder';
import { Transaction } from './transaction';
export declare class TransferBuilder extends TransactionBuilder {
    protected _to: string;
    protected _amount: number | bigint;
    protected _closeRemainderTo?: string;
    constructor(coinConfig: Readonly<CoinConfig>);
    protected buildAlgoTxn(): algosdk.Transaction;
    protected get transactionType(): TransactionType;
    protected fromImplementation(rawTransaction: Uint8Array | string): Transaction;
    validateRawTransaction(rawTransaction: Uint8Array | string): void;
    validateTransaction(transaction: Transaction): void;
    /**
     * Sets the payment receiver.
     *
     * @param {BaseAddress} to The receiver account
     * @returns {TransferBuilder} This transfer builder.
     *
     */
    to(to: BaseAddress): this;
    /**
     * Sets the amount of payment.
     *
     * @param {number} amount The amount of payment.
     * @returns {TransferBuilder} This transfer builder.
     */
    amount(amount: number | bigint): this;
    /**
     * Sets address to transfer remainder amount on closing.
     *
     * @param {BaseAddress} closeRemainderTo The address for receiving remainder amount
     * @returns {TransferBuilder} This transfer builder.
     *
     */
    closeRemainderTo(closeRemainderTo: BaseAddress): this;
}
//# sourceMappingURL=transferBuilder.d.ts.map