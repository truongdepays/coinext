"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
var algosdk_1 = __importDefault(require("algosdk"));
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var utils_1 = __importDefault(require("./utils"));
var keyPair_1 = require("./keyPair");
var Transaction = /** @class */ (function (_super) {
    __extends(Transaction, _super);
    function Transaction(coinConfig) {
        var _this = _super.call(this, coinConfig) || this;
        _this._numberOfRequiredSigners = 0;
        _this._signers = [];
        return _this;
    }
    /** @inheritdoc */
    Transaction.prototype.canSign = function (_a) {
        var key = _a.key;
        if (this._numberOfRequiredSigners === 0) {
            return false;
        }
        if (this._numberOfRequiredSigners === 1) {
            var kp = new keyPair_1.KeyPair({ prv: key });
            var addr = kp.getAddress();
            if (addr === this._sender) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return true;
        }
    };
    Transaction.prototype.sender = function (address) {
        this._sender = address;
    };
    /**
     * Signs transaction.
     *
     * @param {KeyPair} keyPair Signer keys.
     */
    Transaction.prototype.sign = function (keyPair) {
        if (!this._algoTransaction) {
            throw new errors_1.InvalidTransactionError('Empty transaction');
        }
        if (this._numberOfRequiredSigners === 1) {
            this.signSingle(keyPair[0]);
        }
        else if (this._numberOfRequiredSigners > 1) {
            this.signMultiSig(keyPair);
        }
    };
    /**
     * Signs transaction.
     *
     * @param {KeyPair} keyPair Signer keys.
     */
    Transaction.prototype.signSingle = function (keyPair) {
        if (!this._algoTransaction) {
            throw new errors_1.InvalidTransactionError('Empty transaction');
        }
        var signKey = Buffer.from(keyPair.getSigningKey()).toString('hex');
        if (signKey) {
            this._signedTransaction = algosdk_1.default.signTransaction(this._algoTransaction, utils_1.default.toUint8Array(signKey)).blob;
        }
        else {
            throw new errors_1.InvalidKey('Private key undefined');
        }
    };
    /**
     * Signs multisig transaction.
     *
     * @param {KeyPair} keyPair Signers keys.
     */
    Transaction.prototype.signMultiSig = function (keyPair) {
        if (!this._algoTransaction) {
            throw new errors_1.InvalidTransactionError('Empty transaction');
        }
        if (this._signers.length === 0) {
            throw new errors_1.SigningError('Signers not specified for multisig');
        }
        if (keyPair.length === 0) {
            throw new errors_1.SigningError('Keypair not specified for multisig');
        }
        var multiSigOptions = {
            version: 1,
            threshold: this._numberOfRequiredSigners,
            addrs: this._signers,
        };
        var msigAddress = algosdk_1.default.multisigAddress(multiSigOptions);
        this._algoTransaction.from = algosdk_1.default.decodeAddress(msigAddress);
        // Check if it is a signed or unsigned tx.
        // If unsigned, sign it using first keypair and then append next signatures.
        // If signed, appending next signatures.
        var signedTx = this._signedTransaction
            ? this._signedTransaction
            : algosdk_1.default.signMultisigTransaction(this._algoTransaction, multiSigOptions, keyPair.shift().getSigningKey()).blob;
        keyPair.forEach(function (kp) {
            signedTx = algosdk_1.default.appendSignMultisigTransaction(signedTx, multiSigOptions, kp.getSigningKey()).blob;
        });
        this._signedTransaction = signedTx;
    };
    Object.defineProperty(Transaction.prototype, "signedTransaction", {
        set: function (txn) {
            this._signedTransaction = txn;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "numberOfRequiredSigners", {
        get: function () {
            return this._numberOfRequiredSigners;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets the number of signers required for signing this transaction.
     *
     * @param {number} num Threshold number of signers.
     */
    Transaction.prototype.setNumberOfRequiredSigners = function (num) {
        this._numberOfRequiredSigners = num;
    };
    Object.defineProperty(Transaction.prototype, "signers", {
        get: function () {
            return this._signers;
        },
        set: function (addrs) {
            this._signers = addrs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "signedBy", {
        get: function () {
            return this._signedBy;
        },
        set: function (signer) {
            this._signedBy = signer;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets algo transaction.
     *
     * @param {algosdk.Transaction} tx
     */
    Transaction.prototype.setAlgoTransaction = function (tx) {
        this._algoTransaction = tx;
    };
    /**
     * Get underlaying algo transaction.
     *
     * @returns {algosdk.Transaction}
     */
    Transaction.prototype.getAlgoTransaction = function () {
        return this._algoTransaction;
    };
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    Transaction.prototype.setTransactionType = function (transactionType) {
        this._type = transactionType;
    };
    Transaction.prototype.estimateSize = function () {
        if (!this._algoTransaction) {
            throw new errors_1.InvalidTransactionError('Empty transaction');
        }
        return this._algoTransaction.estimateSize();
    };
    /** @inheritdoc */
    Transaction.prototype.toBroadcastFormat = function () {
        if (!this._algoTransaction) {
            throw new errors_1.InvalidTransactionError('Empty transaction');
        }
        if (this._signedTransaction && this._signedTransaction.length > 0) {
            return this._signedTransaction;
        }
        else {
            return algosdk_1.default.encodeUnsignedTransaction(this._algoTransaction);
        }
    };
    /** @inheritdoc */
    Transaction.prototype.toJson = function () {
        var _a, _b;
        if (!this._algoTransaction) {
            throw new errors_1.InvalidTransactionError('Empty transaction');
        }
        var result = {
            id: this._algoTransaction.txID(),
            type: (_a = this._algoTransaction.type) === null || _a === void 0 ? void 0 : _a.toString(),
            from: algosdk_1.default.encodeAddress(this._algoTransaction.from.publicKey),
            fee: this._algoTransaction.fee,
            firstRound: this._algoTransaction.firstRound,
            lastRound: this._algoTransaction.lastRound,
            note: this._algoTransaction.note,
            tokenId: (_b = this._algoTransaction) === null || _b === void 0 ? void 0 : _b.assetIndex,
            genesisID: this._algoTransaction.genesisID,
            genesisHash: this._algoTransaction.genesisHash.toString('base64'),
        };
        if (this._algoTransaction.closeRemainderTo) {
            result.closeRemainderTo = algosdk_1.default.encodeAddress(this._algoTransaction.closeRemainderTo.publicKey);
        }
        if (this.type === baseCoin_1.TransactionType.Send) {
            result.to = algosdk_1.default.encodeAddress(this._algoTransaction.to.publicKey);
            result.amount = this._algoTransaction.amount.toString();
        }
        if (this.type === baseCoin_1.TransactionType.WalletInitialization) {
            if (!this._algoTransaction.nonParticipation) {
                if (this._algoTransaction.voteKey &&
                    this._algoTransaction.selectionKey &&
                    this._algoTransaction.voteFirst &&
                    this._algoTransaction.voteLast &&
                    this._algoTransaction.voteKeyDilution) {
                    result.voteKey = this._algoTransaction.voteKey.toString('base64');
                    result.selectionKey = this._algoTransaction.selectionKey.toString('base64');
                    result.voteFirst = this._algoTransaction.voteFirst;
                    result.voteLast = this._algoTransaction.voteLast;
                    result.voteKeyDilution = this._algoTransaction.voteKeyDilution;
                    if (this._algoTransaction.stateProofKey) {
                        result.stateProofKey = this._algoTransaction.stateProofKey.toString('base64');
                    }
                }
            }
            else {
                result.nonParticipation = this._algoTransaction.nonParticipation;
            }
        }
        if (result.type === 'axfer' && result.to && result.amount) {
            result.txType = utils_1.default.getTokenTxType(result.amount, result.from, result.to, result.closeRemainderTo);
            result.tokenName = this._coinConfig.suffix;
        }
        return result;
    };
    /**
     * Load the input and output data on this transaction.
     */
    Transaction.prototype.loadInputsAndOutputs = function () {
        if (!this._algoTransaction) {
            return;
        }
        if (this.type === baseCoin_1.TransactionType.Send) {
            this._outputs = [
                {
                    address: algosdk_1.default.encodeAddress(this._algoTransaction.to.publicKey),
                    value: this._algoTransaction.amount.toString(),
                    coin: this._coinConfig.name,
                },
            ];
            this._inputs = [
                {
                    address: algosdk_1.default.encodeAddress(this._algoTransaction.from.publicKey),
                    value: this._algoTransaction.amount.toString(),
                    coin: this._coinConfig.name,
                },
            ];
        }
    };
    return Transaction;
}(baseCoin_1.BaseTransaction));
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,