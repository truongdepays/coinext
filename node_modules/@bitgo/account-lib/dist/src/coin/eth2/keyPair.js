"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyPair = void 0;
var blsKeyPair_1 = require("../baseCoin/blsKeyPair");
var crypto_1 = require("../../utils/crypto");
/**
 * Ethereum keys and address management.
 */
var KeyPair = /** @class */ (function (_super) {
    __extends(KeyPair, _super);
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     */
    function KeyPair(source) {
        return _super.call(this, source) || this;
    }
    /**
     * ETH2 default keys format is a pair of Uint8Array keys
     *
     * @returns { BlsKeys } The keys in the defined format
     */
    KeyPair.prototype.getKeys = function () {
        if (this.keyPair) {
            return this.keyPair;
        }
        throw new Error('Error getting keys. Check keyPair has been specified & private key is valid');
    };
    /**
     * Whether input is a valid BLS public key
     *
     * @param {string} pub the public key to validate
     * @returns {boolean} Whether input is a valid public key or not
     */
    KeyPair.isValidPub = function (pub) {
        return crypto_1.isValidBLSPublicKey(pub);
    };
    /**
     * Whether the input is a valid BLS private key
     *
     * @param {string | Buffer | bigint} prv a private key to validate
     * @returns {boolean} Whether the input is a valid private key or not
     */
    KeyPair.isValidPrv = function (prv) {
        if (typeof prv === 'string') {
            return crypto_1.isValidBLSPrivateKey(prv);
        }
        if (typeof prv === 'bigint') {
            return crypto_1.isValidBLSPrivateKey(crypto_1.bigIntToHex(prv));
        }
        try {
            var hexPrv = Array.from(prv)
                .map(function (val) {
                var hex = val.toString(16);
                return '0'.slice(0, hex.length % 2) + hex;
            })
                .join('');
            var privateKey = '0x' + hexPrv;
            return crypto_1.isValidBLSPrivateKey(privateKey);
        }
        catch (e) {
            return false;
        }
    };
    return KeyPair;
}(blsKeyPair_1.BlsKeyPair));
exports.KeyPair = KeyPair;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5UGFpci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2luL2V0aDIva2V5UGFpci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxREFBb0Q7QUFFcEQsNkNBQTRGO0FBRTVGOztHQUVHO0FBQ0g7SUFBNkIsMkJBQVU7SUFDckM7OztPQUdHO0lBQ0gsaUJBQVksTUFBdUI7ZUFDakMsa0JBQU0sTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCx5QkFBTyxHQUFQO1FBQ0UsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUNyQjtRQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsNkVBQTZFLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxrQkFBVSxHQUFqQixVQUFrQixHQUFXO1FBQzNCLE9BQU8sNEJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksa0JBQVUsR0FBakIsVUFBa0IsR0FBNkI7UUFDN0MsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDM0IsT0FBTyw2QkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNsQztRQUNELElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzNCLE9BQU8sNkJBQW9CLENBQUMsb0JBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsSUFBSTtZQUNGLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2lCQUMzQixHQUFHLENBQUMsVUFBVSxHQUFHO2dCQUNoQixJQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUM3QixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQzVDLENBQUMsQ0FBQztpQkFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDWixJQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsTUFBTSxDQUFDO1lBQ2pDLE9BQU8sNkJBQW9CLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDekM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBQ0gsY0FBQztBQUFELENBQUMsQUF6REQsQ0FBNkIsdUJBQVUsR0F5RHRDO0FBekRZLDBCQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmxzS2V5UGFpciB9IGZyb20gJy4uL2Jhc2VDb2luL2Jsc0tleVBhaXInO1xuaW1wb3J0IHsgS2V5UGFpck9wdGlvbnMsIEJsc0tleXMgfSBmcm9tICcuLi9iYXNlQ29pbi9pZmFjZSc7XG5pbXBvcnQgeyBpc1ZhbGlkQkxTUHVibGljS2V5LCBpc1ZhbGlkQkxTUHJpdmF0ZUtleSwgYmlnSW50VG9IZXggfSBmcm9tICcuLi8uLi91dGlscy9jcnlwdG8nO1xuXG4vKipcbiAqIEV0aGVyZXVtIGtleXMgYW5kIGFkZHJlc3MgbWFuYWdlbWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIEtleVBhaXIgZXh0ZW5kcyBCbHNLZXlQYWlyIHtcbiAgLyoqXG4gICAqIFB1YmxpYyBjb25zdHJ1Y3Rvci4gQnkgZGVmYXVsdCwgY3JlYXRlcyBhIGtleSBwYWlyIHdpdGggYSByYW5kb20gbWFzdGVyIHNlZWQuXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihzb3VyY2U/OiBLZXlQYWlyT3B0aW9ucykge1xuICAgIHN1cGVyKHNvdXJjZSk7XG4gIH1cblxuICAvKipcbiAgICogRVRIMiBkZWZhdWx0IGtleXMgZm9ybWF0IGlzIGEgcGFpciBvZiBVaW50OEFycmF5IGtleXNcbiAgICpcbiAgICogQHJldHVybnMgeyBCbHNLZXlzIH0gVGhlIGtleXMgaW4gdGhlIGRlZmluZWQgZm9ybWF0XG4gICAqL1xuICBnZXRLZXlzKCk6IEJsc0tleXMge1xuICAgIGlmICh0aGlzLmtleVBhaXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmtleVBhaXI7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgZ2V0dGluZyBrZXlzLiBDaGVjayBrZXlQYWlyIGhhcyBiZWVuIHNwZWNpZmllZCAmIHByaXZhdGUga2V5IGlzIHZhbGlkJyk7XG4gIH1cblxuICAvKipcbiAgICogV2hldGhlciBpbnB1dCBpcyBhIHZhbGlkIEJMUyBwdWJsaWMga2V5XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwdWIgdGhlIHB1YmxpYyBrZXkgdG8gdmFsaWRhdGVcbiAgICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgaW5wdXQgaXMgYSB2YWxpZCBwdWJsaWMga2V5IG9yIG5vdFxuICAgKi9cbiAgc3RhdGljIGlzVmFsaWRQdWIocHViOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaXNWYWxpZEJMU1B1YmxpY0tleShwdWIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGlucHV0IGlzIGEgdmFsaWQgQkxTIHByaXZhdGUga2V5XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgQnVmZmVyIHwgYmlnaW50fSBwcnYgYSBwcml2YXRlIGtleSB0byB2YWxpZGF0ZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgaW5wdXQgaXMgYSB2YWxpZCBwcml2YXRlIGtleSBvciBub3RcbiAgICovXG4gIHN0YXRpYyBpc1ZhbGlkUHJ2KHBydjogc3RyaW5nIHwgQnVmZmVyIHwgYmlnaW50KTogYm9vbGVhbiB7XG4gICAgaWYgKHR5cGVvZiBwcnYgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gaXNWYWxpZEJMU1ByaXZhdGVLZXkocHJ2KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcnYgPT09ICdiaWdpbnQnKSB7XG4gICAgICByZXR1cm4gaXNWYWxpZEJMU1ByaXZhdGVLZXkoYmlnSW50VG9IZXgocHJ2KSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBoZXhQcnYgPSBBcnJheS5mcm9tKHBydilcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgY29uc3QgaGV4ID0gdmFsLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICByZXR1cm4gJzAnLnNsaWNlKDAsIGhleC5sZW5ndGggJSAyKSArIGhleDtcbiAgICAgICAgfSlcbiAgICAgICAgLmpvaW4oJycpO1xuICAgICAgY29uc3QgcHJpdmF0ZUtleSA9ICcweCcgKyBoZXhQcnY7XG4gICAgICByZXR1cm4gaXNWYWxpZEJMU1ByaXZhdGVLZXkocHJpdmF0ZUtleSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl19