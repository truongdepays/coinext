"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyPair = void 0;
var sdk_1 = require("@hashgraph/sdk");
var ed25519KeyPair_1 = require("../baseCoin/ed25519KeyPair");
var errors_1 = require("../baseCoin/errors");
var utils_1 = require("./utils");
var PUBLIC_KEY_PREFIX = '302a300506032b6570032100';
var PRIVATE_KEY_PREFIX = '302e020100300506032b657004220420';
var KeyPair = /** @class */ (function (_super) {
    __extends(KeyPair, _super);
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param { KeyPairOptions } source Either a master seed, a private key, or a public key
     */
    function KeyPair(source) {
        return _super.call(this, source) || this;
    }
    /**
     * Hedera default keys format is a pair of Uint8Array keys
     *
     * @param {boolean} raw defines if the key is returned in raw or protocol default format
     * @returns { DefaultKeys } The keys in the defined format
     */
    KeyPair.prototype.getKeys = function (raw) {
        if (raw === void 0) { raw = false; }
        var pub = sdk_1.PublicKey.fromString(this.keyPair.pub).toString();
        var result = {
            pub: raw ? pub.slice(PUBLIC_KEY_PREFIX.length) : pub,
        };
        if (this.keyPair.prv) {
            var prv = sdk_1.PrivateKey.fromString(this.keyPair.prv).toString();
            result.prv = raw ? prv.slice(PRIVATE_KEY_PREFIX.length) : prv;
        }
        return result;
    };
    /** @inheritdoc */
    KeyPair.prototype.getAddress = function (format) {
        throw new errors_1.NotSupported('Address derivation is not supported in Hedera');
    };
    /** @inheritdoc */
    KeyPair.prototype.recordKeysFromPublicKeyInProtocolFormat = function (pub) {
        try {
            var hederaPub = sdk_1.PublicKey.fromString(pub.toLowerCase()).toString();
            var ed25519Pub = utils_1.removePrefix(PUBLIC_KEY_PREFIX, hederaPub);
            return { pub: ed25519Pub };
        }
        catch (e) {
            throw new errors_1.InvalidKey('Invalid public key: ' + pub);
        }
    };
    /** @inheritdoc */
    KeyPair.prototype.recordKeysFromPrivateKeyInProtocolFormat = function (prv) {
        if (!/^([a-f0-9]{2})+$/i.test(prv)) {
            throw new errors_1.InvalidKey('Invalid private key length. Must be a hex and multiple of 2');
        }
        try {
            var hederaPrv = sdk_1.PrivateKey.fromString(prv);
            var ed25519Prv = utils_1.removePrefix(PRIVATE_KEY_PREFIX, hederaPrv.toString());
            var ed25519Pub = utils_1.removePrefix(PUBLIC_KEY_PREFIX, hederaPrv.publicKey.toString());
            return {
                prv: ed25519Prv,
                pub: ed25519Pub,
            };
        }
        catch (e) {
            throw new errors_1.InvalidKey('Invalid private key');
        }
    };
    return KeyPair;
}(ed25519KeyPair_1.Ed25519KeyPair));
exports.KeyPair = KeyPair;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5UGFpci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2luL2hiYXIva2V5UGFpci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxzQ0FBdUQ7QUFDdkQsNkRBQTREO0FBRTVELDZDQUE4RDtBQUM5RCxpQ0FBdUM7QUFFdkMsSUFBTSxpQkFBaUIsR0FBRywwQkFBMEIsQ0FBQztBQUNyRCxJQUFNLGtCQUFrQixHQUFHLGtDQUFrQyxDQUFDO0FBRTlEO0lBQTZCLDJCQUFjO0lBQ3pDOzs7O09BSUc7SUFDSCxpQkFBWSxNQUF1QjtlQUNqQyxrQkFBTSxNQUFNLENBQUM7SUFDZixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCx5QkFBTyxHQUFQLFVBQVEsR0FBVztRQUFYLG9CQUFBLEVBQUEsV0FBVztRQUNqQixJQUFNLEdBQUcsR0FBRyxlQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDOUQsSUFBTSxNQUFNLEdBQWdCO1lBQzFCLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUc7U0FDckQsQ0FBQztRQUVGLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUU7WUFDcEIsSUFBTSxHQUFHLEdBQUcsZ0JBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUMvRCxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1NBQy9EO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELGtCQUFrQjtJQUNsQiw0QkFBVSxHQUFWLFVBQVcsTUFBZTtRQUN4QixNQUFNLElBQUkscUJBQVksQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxrQkFBa0I7SUFDbEIseURBQXVDLEdBQXZDLFVBQXdDLEdBQVc7UUFDakQsSUFBSTtZQUNGLElBQU0sU0FBUyxHQUFHLGVBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDckUsSUFBTSxVQUFVLEdBQUcsb0JBQVksQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUM5RCxPQUFPLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxDQUFDO1NBQzVCO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixNQUFNLElBQUksbUJBQVUsQ0FBQyxzQkFBc0IsR0FBRyxHQUFHLENBQUMsQ0FBQztTQUNwRDtJQUNILENBQUM7SUFFRCxrQkFBa0I7SUFDbEIsMERBQXdDLEdBQXhDLFVBQXlDLEdBQVc7UUFDbEQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNsQyxNQUFNLElBQUksbUJBQVUsQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO1NBQ3JGO1FBQ0QsSUFBSTtZQUNGLElBQU0sU0FBUyxHQUFHLGdCQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdDLElBQU0sVUFBVSxHQUFHLG9CQUFZLENBQUMsa0JBQWtCLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDMUUsSUFBTSxVQUFVLEdBQUcsb0JBQVksQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDbkYsT0FBTztnQkFDTCxHQUFHLEVBQUUsVUFBVTtnQkFDZixHQUFHLEVBQUUsVUFBVTthQUNoQixDQUFDO1NBQ0g7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE1BQU0sSUFBSSxtQkFBVSxDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDO0lBQ0gsY0FBQztBQUFELENBQUMsQUE5REQsQ0FBNkIsK0JBQWMsR0E4RDFDO0FBOURZLDBCQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpdmF0ZUtleSwgUHVibGljS2V5IH0gZnJvbSAnQGhhc2hncmFwaC9zZGsnO1xuaW1wb3J0IHsgRWQyNTUxOUtleVBhaXIgfSBmcm9tICcuLi9iYXNlQ29pbi9lZDI1NTE5S2V5UGFpcic7XG5pbXBvcnQgeyBLZXlQYWlyT3B0aW9ucywgRGVmYXVsdEtleXMgfSBmcm9tICcuLi9iYXNlQ29pbi9pZmFjZSc7XG5pbXBvcnQgeyBJbnZhbGlkS2V5LCBOb3RTdXBwb3J0ZWQgfSBmcm9tICcuLi9iYXNlQ29pbi9lcnJvcnMnO1xuaW1wb3J0IHsgcmVtb3ZlUHJlZml4IH0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IFBVQkxJQ19LRVlfUFJFRklYID0gJzMwMmEzMDA1MDYwMzJiNjU3MDAzMjEwMCc7XG5jb25zdCBQUklWQVRFX0tFWV9QUkVGSVggPSAnMzAyZTAyMDEwMDMwMDUwNjAzMmI2NTcwMDQyMjA0MjAnO1xuXG5leHBvcnQgY2xhc3MgS2V5UGFpciBleHRlbmRzIEVkMjU1MTlLZXlQYWlyIHtcbiAgLyoqXG4gICAqIFB1YmxpYyBjb25zdHJ1Y3Rvci4gQnkgZGVmYXVsdCwgY3JlYXRlcyBhIGtleSBwYWlyIHdpdGggYSByYW5kb20gbWFzdGVyIHNlZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7IEtleVBhaXJPcHRpb25zIH0gc291cmNlIEVpdGhlciBhIG1hc3RlciBzZWVkLCBhIHByaXZhdGUga2V5LCBvciBhIHB1YmxpYyBrZXlcbiAgICovXG4gIGNvbnN0cnVjdG9yKHNvdXJjZT86IEtleVBhaXJPcHRpb25zKSB7XG4gICAgc3VwZXIoc291cmNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWRlcmEgZGVmYXVsdCBrZXlzIGZvcm1hdCBpcyBhIHBhaXIgb2YgVWludDhBcnJheSBrZXlzXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmF3IGRlZmluZXMgaWYgdGhlIGtleSBpcyByZXR1cm5lZCBpbiByYXcgb3IgcHJvdG9jb2wgZGVmYXVsdCBmb3JtYXRcbiAgICogQHJldHVybnMgeyBEZWZhdWx0S2V5cyB9IFRoZSBrZXlzIGluIHRoZSBkZWZpbmVkIGZvcm1hdFxuICAgKi9cbiAgZ2V0S2V5cyhyYXcgPSBmYWxzZSk6IERlZmF1bHRLZXlzIHtcbiAgICBjb25zdCBwdWIgPSBQdWJsaWNLZXkuZnJvbVN0cmluZyh0aGlzLmtleVBhaXIucHViKS50b1N0cmluZygpO1xuICAgIGNvbnN0IHJlc3VsdDogRGVmYXVsdEtleXMgPSB7XG4gICAgICBwdWI6IHJhdyA/IHB1Yi5zbGljZShQVUJMSUNfS0VZX1BSRUZJWC5sZW5ndGgpIDogcHViLFxuICAgIH07XG5cbiAgICBpZiAodGhpcy5rZXlQYWlyLnBydikge1xuICAgICAgY29uc3QgcHJ2ID0gUHJpdmF0ZUtleS5mcm9tU3RyaW5nKHRoaXMua2V5UGFpci5wcnYpLnRvU3RyaW5nKCk7XG4gICAgICByZXN1bHQucHJ2ID0gcmF3ID8gcHJ2LnNsaWNlKFBSSVZBVEVfS0VZX1BSRUZJWC5sZW5ndGgpIDogcHJ2O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIGdldEFkZHJlc3MoZm9ybWF0Pzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICB0aHJvdyBuZXcgTm90U3VwcG9ydGVkKCdBZGRyZXNzIGRlcml2YXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiBIZWRlcmEnKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICByZWNvcmRLZXlzRnJvbVB1YmxpY0tleUluUHJvdG9jb2xGb3JtYXQocHViOiBzdHJpbmcpOiBEZWZhdWx0S2V5cyB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGhlZGVyYVB1YiA9IFB1YmxpY0tleS5mcm9tU3RyaW5nKHB1Yi50b0xvd2VyQ2FzZSgpKS50b1N0cmluZygpO1xuICAgICAgY29uc3QgZWQyNTUxOVB1YiA9IHJlbW92ZVByZWZpeChQVUJMSUNfS0VZX1BSRUZJWCwgaGVkZXJhUHViKTtcbiAgICAgIHJldHVybiB7IHB1YjogZWQyNTUxOVB1YiB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkS2V5KCdJbnZhbGlkIHB1YmxpYyBrZXk6ICcgKyBwdWIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICByZWNvcmRLZXlzRnJvbVByaXZhdGVLZXlJblByb3RvY29sRm9ybWF0KHBydjogc3RyaW5nKTogRGVmYXVsdEtleXMge1xuICAgIGlmICghL14oW2EtZjAtOV17Mn0pKyQvaS50ZXN0KHBydikpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkS2V5KCdJbnZhbGlkIHByaXZhdGUga2V5IGxlbmd0aC4gTXVzdCBiZSBhIGhleCBhbmQgbXVsdGlwbGUgb2YgMicpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgaGVkZXJhUHJ2ID0gUHJpdmF0ZUtleS5mcm9tU3RyaW5nKHBydik7XG4gICAgICBjb25zdCBlZDI1NTE5UHJ2ID0gcmVtb3ZlUHJlZml4KFBSSVZBVEVfS0VZX1BSRUZJWCwgaGVkZXJhUHJ2LnRvU3RyaW5nKCkpO1xuICAgICAgY29uc3QgZWQyNTUxOVB1YiA9IHJlbW92ZVByZWZpeChQVUJMSUNfS0VZX1BSRUZJWCwgaGVkZXJhUHJ2LnB1YmxpY0tleS50b1N0cmluZygpKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBydjogZWQyNTUxOVBydixcbiAgICAgICAgcHViOiBlZDI1NTE5UHViLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEtleSgnSW52YWxpZCBwcml2YXRlIGtleScpO1xuICAgIH1cbiAgfVxufVxuIl19