import BigNumber from 'bignumber.js';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseTransactionBuilder } from '../baseCoin';
import { BaseAddress, BaseFee, BaseKey } from '../baseCoin/iface';
import { proto } from '../../../resources/hbar/protobuf/hedera';
import { Transaction } from './transaction';
import { KeyPair } from './keyPair';
import { SignatureData, HederaNode } from './ifaces';
export declare const DEFAULT_M = 3;
export declare abstract class TransactionBuilder extends BaseTransactionBuilder {
    protected _fee: BaseFee;
    private _transaction;
    protected _source: BaseAddress;
    protected _startTime: proto.ITimestamp;
    protected _memo: string;
    protected _txBody: proto.TransactionBody;
    protected _node: HederaNode;
    protected _duration: proto.Duration;
    protected _multiSignerKeyPairs: KeyPair[];
    protected _signatures: SignatureData[];
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: Uint8Array | string): Transaction;
    /** @inheritdoc */
    protected signImplementation(key: BaseKey): Transaction;
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    initBuilder(tx: Transaction): void;
    /**
     * Creates an Hedera TransactionID
     *
     * @returns {proto.TransactionID} - created TransactionID
     */
    protected buildTxId(): proto.TransactionID;
    /**
     *  Set the memo
     *
     * @param {string} memo A hedera memo, can be a maximum of 100 bytes
     * @returns {TransactionBuilder} This transaction builder
     */
    memo(memo: string): this;
    /**
     *  Set the node, it may take the format `'<shard>.<realm>.<account>'` or `'<account>'`
     *
     * @param {HederaNode} node A hedera node address
     * @returns {TransactionBuilder} This transaction builder
     */
    node(node: HederaNode): this;
    /**
     * Set the transaction valid duration
     *
     * @param {number} validDuration the transaction valid duration in seconds
     * @returns {TransactionBuilder} This transaction builder
     */
    validDuration(validDuration: number): this;
    /**
     * Set the transaction fees
     *
     * @param {BaseFee} fee The maximum gas to pay
     * @returns {TransactionBuilder} This transaction builder
     */
    fee(fee: BaseFee): this;
    /**
     * Set the transaction source
     *
     * @param {BaseAddress} address The source account
     * @returns {TransactionBuilder} This transaction builder
     */
    source(address: BaseAddress): this;
    /**
     * Set an external transaction signature
     *
     * @param signature Hex encoded signature string
     * @param keyPair The public key keypair that was used to create the signature
     * @returns This transaction builder
     */
    signature(signature: string, keyPair: KeyPair): this;
    /**
     * Set the start time
     *
     * @param {string} time string value of the time to set with format <seconds>.<nanos>
     * @returns {TransactionBuilder} this
     */
    startTime(time: string): this;
    private get validStart();
    /** @inheritdoc */
    protected get transaction(): Transaction;
    /** @inheritdoc */
    protected set transaction(transaction: Transaction);
    /** @inheritdoc */
    validateAddress(address: BaseAddress, addressFormat?: string): void;
    /** @inheritdoc */
    validateKey(key: BaseKey): void;
    /** @inheritdoc */
    validateRawTransaction(rawTransaction: any): void;
    /** @inheritdoc */
    validateTransaction(transaction?: Transaction): void;
    /** @inheritdoc */
    validateValue(value: BigNumber): void;
    validateMandatoryFields(): void;
    /**
     * Validates that the given key is not already in this._multiSignerKeyPairs
     *
     * @param {BaseKey} key - The key to check
     */
    private checkDuplicatedKeys;
}
//# sourceMappingURL=transactionBuilder.d.ts.map