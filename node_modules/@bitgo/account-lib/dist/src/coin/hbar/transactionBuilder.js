"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = exports.DEFAULT_M = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var sdk_1 = require("@hashgraph/sdk");
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var hedera_1 = require("../../../resources/hbar/protobuf/hedera");
var transaction_1 = require("./transaction");
var utils_1 = require("./utils");
var keyPair_1 = require("./keyPair");
exports.DEFAULT_M = 3;
var TransactionBuilder = /** @class */ (function (_super) {
    __extends(TransactionBuilder, _super);
    function TransactionBuilder(_coinConfig) {
        var _this = _super.call(this, _coinConfig) || this;
        _this._node = { nodeId: '0.0.4' };
        _this._duration = new hedera_1.proto.Duration({ seconds: 120 });
        _this._txBody = new hedera_1.proto.TransactionBody();
        _this._txBody.transactionValidDuration = _this._duration;
        _this._multiSignerKeyPairs = [];
        _this._signatures = [];
        _this.transaction = new transaction_1.Transaction(_coinConfig);
        return _this;
    }
    // region Base Builder
    /** @inheritdoc */
    TransactionBuilder.prototype.buildImplementation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var accountId, hTransaction, _i, _a, kp, _b, _c, _d, signature, keyPair;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        this._txBody.transactionFee = new bignumber_js_1.default(this._fee.fee).toNumber();
                        this._txBody.transactionID = this.buildTxId();
                        this._txBody.memo = this._memo;
                        accountId = sdk_1.AccountId.fromString(this._node.nodeId);
                        this._txBody.nodeAccountID = new hedera_1.proto.AccountID({
                            shardNum: accountId.shard,
                            realmNum: accountId.realm,
                            accountNum: accountId.num,
                        });
                        hTransaction = this.transaction.hederaTx || new hedera_1.proto.Transaction();
                        hTransaction.bodyBytes = hedera_1.proto.TransactionBody.encode(this._txBody).finish();
                        this.transaction.body(hTransaction);
                        _i = 0, _a = this._multiSignerKeyPairs;
                        _e.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        kp = _a[_i];
                        return [4 /*yield*/, this.transaction.sign(kp)];
                    case 2:
                        _e.sent();
                        _e.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        for (_b = 0, _c = this._signatures; _b < _c.length; _b++) {
                            _d = _c[_b], signature = _d.signature, keyPair = _d.keyPair;
                            this.transaction.addSignature(signature, keyPair);
                        }
                        return [2 /*return*/, this.transaction];
                }
            });
        });
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.fromImplementation = function (rawTransaction) {
        var tx = new transaction_1.Transaction(this._coinConfig);
        var buffer;
        if (typeof rawTransaction === 'string') {
            buffer = utils_1.toUint8Array(rawTransaction);
        }
        else {
            buffer = rawTransaction;
        }
        tx.bodyBytes(buffer);
        this.initBuilder(tx);
        return this.transaction;
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.signImplementation = function (key) {
        this.checkDuplicatedKeys(key);
        var signer = new keyPair_1.KeyPair({ prv: key.key });
        // Signing the transaction is an operation that relies on all the data being set,
        // so we set the source here and leave the actual signing for the build step
        this._multiSignerKeyPairs.push(signer);
        return this.transaction;
    };
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    TransactionBuilder.prototype.initBuilder = function (tx) {
        this.transaction = tx;
        this.transaction.loadPreviousSignatures();
        var txData = tx.toJson();
        this.fee({ fee: txData.fee.toString() });
        this.source({ address: txData.from });
        this.startTime(txData.startTime);
        this.node({ nodeId: txData.node });
        this.validDuration(new bignumber_js_1.default(txData.validDuration).toNumber());
        if (txData.memo) {
            this.memo(txData.memo);
        }
    };
    /**
     * Creates an Hedera TransactionID
     *
     * @returns {proto.TransactionID} - created TransactionID
     */
    TransactionBuilder.prototype.buildTxId = function () {
        var accountId = sdk_1.AccountId.fromString(this._source.address);
        return new hedera_1.proto.TransactionID({
            transactionValidStart: this.validStart,
            accountID: { shardNum: accountId.shard, realmNum: accountId.realm, accountNum: accountId.num },
        });
    };
    // endregion
    // region Common builder methods
    /**
     *  Set the memo
     *
     * @param {string} memo A hedera memo, can be a maximum of 100 bytes
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.memo = function (memo) {
        if (Buffer.from(memo).length > 100) {
            throw new errors_1.InvalidParameterValueError('Memo must not be longer than 100 bytes');
        }
        this._memo = memo;
        return this;
    };
    /**
     *  Set the node, it may take the format `'<shard>.<realm>.<account>'` or `'<account>'`
     *
     * @param {HederaNode} node A hedera node address
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.node = function (node) {
        if (!utils_1.isValidAddress(node.nodeId)) {
            throw new errors_1.InvalidParameterValueError('Invalid Hedera node address');
        }
        this._node = node;
        return this;
    };
    /**
     * Set the transaction valid duration
     *
     * @param {number} validDuration the transaction valid duration in seconds
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.validDuration = function (validDuration) {
        this.validateValue(new bignumber_js_1.default(validDuration));
        this._duration = new hedera_1.proto.Duration({ seconds: validDuration });
        return this;
    };
    /**
     * Set the transaction fees
     *
     * @param {BaseFee} fee The maximum gas to pay
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.fee = function (fee) {
        this.validateValue(new bignumber_js_1.default(fee.fee));
        this._fee = fee;
        return this;
    };
    /**
     * Set the transaction source
     *
     * @param {BaseAddress} address The source account
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.source = function (address) {
        this.validateAddress(address);
        this._source = address;
        return this;
    };
    /**
     * Set an external transaction signature
     *
     * @param signature Hex encoded signature string
     * @param keyPair The public key keypair that was used to create the signature
     * @returns This transaction builder
     */
    TransactionBuilder.prototype.signature = function (signature, keyPair) {
        // if we already have a signature for this key pair, just update it
        for (var _i = 0, _a = this._signatures; _i < _a.length; _i++) {
            var oldSignature = _a[_i];
            if (oldSignature.keyPair.getKeys().pub === keyPair.getKeys().pub) {
                oldSignature.signature = signature;
                return this;
            }
        }
        // otherwise add the new signature
        this._signatures.push({ signature: signature, keyPair: keyPair });
        return this;
    };
    /**
     * Set the start time
     *
     * @param {string} time string value of the time to set with format <seconds>.<nanos>
     * @returns {TransactionBuilder} this
     */
    TransactionBuilder.prototype.startTime = function (time) {
        if (!utils_1.isValidTimeString(time)) {
            throw new errors_1.InvalidParameterValueError('Invalid value for time parameter');
        }
        var timeParts = time.split('.').map(function (v) { return new bignumber_js_1.default(v).toNumber(); });
        this._startTime = { seconds: timeParts[0], nanos: timeParts[1] };
        return this;
    };
    Object.defineProperty(TransactionBuilder.prototype, "validStart", {
        // endregion
        // region Getters and Setters
        get: function () {
            if (!this._startTime) {
                this.startTime(utils_1.getCurrentTime());
            }
            return this._startTime;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionBuilder.prototype, "transaction", {
        /** @inheritdoc */
        get: function () {
            return this._transaction;
        },
        /** @inheritdoc */
        set: function (transaction) {
            this._transaction = transaction;
        },
        enumerable: false,
        configurable: true
    });
    // endregion
    // region Validators
    /** @inheritdoc */
    TransactionBuilder.prototype.validateAddress = function (address, addressFormat) {
        if (!utils_1.isValidAddress(address.address)) {
            throw new errors_1.BuildTransactionError('Invalid address ' + address.address);
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateKey = function (key) {
        if (!new keyPair_1.KeyPair({ prv: key.key })) {
            throw new errors_1.BuildTransactionError('Invalid key');
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateRawTransaction = function (rawTransaction) {
        if (!utils_1.isValidRawTransactionFormat(rawTransaction)) {
            throw new errors_1.ParseTransactionError('Invalid raw transaction');
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateTransaction = function (transaction) {
        this.validateMandatoryFields();
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateValue = function (value) {
        if (value.isLessThan(0)) {
            throw new errors_1.BuildTransactionError('Value cannot be less than zero');
        }
    };
    TransactionBuilder.prototype.validateMandatoryFields = function () {
        if (this._fee === undefined) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing fee');
        }
        if (this._source === undefined) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing source');
        }
    };
    /**
     * Validates that the given key is not already in this._multiSignerKeyPairs
     *
     * @param {BaseKey} key - The key to check
     */
    TransactionBuilder.prototype.checkDuplicatedKeys = function (key) {
        this._multiSignerKeyPairs.forEach(function (_sourceKeyPair) {
            if (_sourceKeyPair.getKeys().prv === key.key) {
                throw new errors_1.SigningError('Repeated sign: ' + key.key);
            }
        });
    };
    return TransactionBuilder;
}(baseCoin_1.BaseTransactionBuilder));
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,