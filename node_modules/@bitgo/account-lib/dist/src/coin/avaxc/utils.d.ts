import { NetworkType } from '@bitgo/statics';
import EthereumCommon from '@ethereumjs/common';
import { KeyPair } from '../eth';
import { TxData } from '../eth/iface';
/**
 * Signs the transaction using the appropriate algorithm
 *
 * @param {TxData} transactionData the transaction data to sign
 * @param {KeyPair} keyPair the signer's keypair
 * @returns {string} the transaction signed and encoded
 */
export declare function sign(transactionData: TxData, keyPair: KeyPair): Promise<any>;
/**
 * @param {NetworkType} network either mainnet or testnet
 * @returns {EthereumCommon} Ethereum common configuration object
 */
export declare function getCommon(network: NetworkType): EthereumCommon;
/**
 * Returns whether or not the string is a valid C-Chain address in Eth format
 *
 * @param {string} address - the address string
 * @returns {boolean} - the validation result
 */
export declare function isValidEthAddress(address: string): boolean;
/**
 * Returns whether or not the string is a valid C-Chain private key in Eth format
 *
 * @param {string} privateKey - the string formatted key
 * @returns {boolean} - the validation result
 */
export declare function isValidEthPrivateKey(privateKey: string): boolean;
/**
 * Returns whether or not the string is a valid C-Chain public key in Eth format
 *
 * @param {string} publicKey - the uncompressed public key string
 * @returns {boolean} - the validation result
 */
export declare function isValidEthPublicKey(publicKey: string): boolean;
//# sourceMappingURL=utils.d.ts.map