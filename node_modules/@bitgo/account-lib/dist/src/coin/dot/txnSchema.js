"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClaimTransactionSchema = exports.WithdrawUnstakedTransactionSchema = exports.UnstakeTransactionSchema = exports.ProxyTransactionSchema = exports.BatchTransactionSchema = exports.AnonymousAddressInitializationSchema = exports.AddressInitializationSchema = exports.StakeTransactionSchema = exports.TransferTransactionSchema = exports.SignedTransactionSchema = exports.SigningPayloadTransactionSchema = exports.BaseTransactionSchema = void 0;
var joi_1 = __importDefault(require("joi"));
var utils_1 = __importDefault(require("./utils"));
var addressSchema = joi_1.default.string().custom(function (addr) { return utils_1.default.isValidAddress(addr); });
var proxyTypes = [
    'Any',
    'NonTransfer',
    'Governance',
    'Staking',
    'UnusedSudoBalances',
    'IdentityJudgement',
    'CancelProxy',
];
exports.BaseTransactionSchema = joi_1.default.object({
    sender: addressSchema.required(),
    blockNumber: joi_1.default.number().required(),
    blockHash: joi_1.default.string().required(),
    genesisHash: joi_1.default.string().required(),
    specVersion: joi_1.default.number().required(),
    specName: joi_1.default.string().valid('kusama', 'polkadot', 'westend', 'statemint', 'statemine').required(),
    transactionVersion: joi_1.default.number().required(),
    chainName: joi_1.default.string().required(),
    eraPeriod: joi_1.default.number().required(),
    nonce: joi_1.default.number().required(),
    tip: joi_1.default.number().optional(),
});
exports.SigningPayloadTransactionSchema = joi_1.default.object({
    eraPeriod: joi_1.default.number().optional(),
    blockHash: joi_1.default.string().required(),
    nonce: joi_1.default.number().required(),
    tip: joi_1.default.number().optional(),
});
exports.SignedTransactionSchema = joi_1.default.object({
    sender: addressSchema.required(),
    nonce: joi_1.default.number().required(),
    eraPeriod: joi_1.default.number().optional(),
    tip: joi_1.default.number().optional(),
});
exports.TransferTransactionSchema = joi_1.default.object({
    amount: joi_1.default.string().required(),
    to: addressSchema.required(),
});
exports.StakeTransactionSchema = joi_1.default.object({
    value: joi_1.default.string().required(),
    controller: addressSchema.required(),
    payee: [
        joi_1.default.string(),
        joi_1.default.object({
            account: joi_1.default.string().optional(),
            controller: joi_1.default.equal(null).optional(),
            staked: joi_1.default.equal(null).optional(),
            stash: joi_1.default.equal(null).optional(),
        }),
        joi_1.default.object({
            Account: joi_1.default.string().required(),
        }),
    ],
});
exports.AddressInitializationSchema = joi_1.default.object({
    proxyType: (_a = joi_1.default
        .string())
        .valid.apply(_a, proxyTypes).required(),
    delegate: addressSchema.required(),
    delay: joi_1.default.string().required(),
});
exports.AnonymousAddressInitializationSchema = joi_1.default.object({
    proxyType: (_b = joi_1.default
        .string())
        .valid.apply(_b, proxyTypes).required(),
    index: joi_1.default.number().required(),
    delay: joi_1.default.number().required(),
});
exports.BatchTransactionSchema = joi_1.default.object({
    calls: joi_1.default
        .alternatives()
        .try(joi_1.default.array().items(joi_1.default.string()), joi_1.default.array().items(joi_1.default.object({ callIndex: joi_1.default.string(), args: joi_1.default.object() }))),
});
exports.ProxyTransactionSchema = joi_1.default.object({
    real: addressSchema.required(),
    forceProxyType: (_c = joi_1.default
        .string())
        .valid.apply(_c, proxyTypes).required(),
    amount: joi_1.default.string().required(),
    to: addressSchema.required(),
});
exports.UnstakeTransactionSchema = joi_1.default.object({
    value: joi_1.default.string().required(),
});
exports.WithdrawUnstakedTransactionSchema = joi_1.default.object({
    value: joi_1.default.number().required(),
});
exports.ClaimTransactionSchema = joi_1.default.object({
    claimEra: joi_1.default.string().required(),
    validatorStash: addressSchema.required(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHhuU2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvaW4vZG90L3R4blNjaGVtYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsNENBQXNCO0FBQ3RCLGtEQUE0QjtBQUU1QixJQUFNLGFBQWEsR0FBRyxhQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsZUFBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDO0FBRWhGLElBQU0sVUFBVSxHQUFHO0lBQ2pCLEtBQUs7SUFDTCxhQUFhO0lBQ2IsWUFBWTtJQUNaLFNBQVM7SUFDVCxvQkFBb0I7SUFDcEIsbUJBQW1CO0lBQ25CLGFBQWE7Q0FDZCxDQUFDO0FBRVcsUUFBQSxxQkFBcUIsR0FBRyxhQUFHLENBQUMsTUFBTSxDQUFDO0lBQzlDLE1BQU0sRUFBRSxhQUFhLENBQUMsUUFBUSxFQUFFO0lBQ2hDLFdBQVcsRUFBRSxhQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ3BDLFNBQVMsRUFBRSxhQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2xDLFdBQVcsRUFBRSxhQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ3BDLFdBQVcsRUFBRSxhQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ3BDLFFBQVEsRUFBRSxhQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDbEcsa0JBQWtCLEVBQUUsYUFBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUMzQyxTQUFTLEVBQUUsYUFBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUNs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RUFBRSxhQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2pDLGNBQWMsRUFBRSxhQUFhLENBQUMsUUFBUSxFQUFFO0NBQ3pDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBqb2kgZnJvbSAnam9pJztcbmltcG9ydCBVdGlscyBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgYWRkcmVzc1NjaGVtYSA9IGpvaS5zdHJpbmcoKS5jdXN0b20oKGFkZHIpID0+IFV0aWxzLmlzVmFsaWRBZGRyZXNzKGFkZHIpKTtcblxuY29uc3QgcHJveHlUeXBlcyA9IFtcbiAgJ0FueScsXG4gICdOb25UcmFuc2ZlcicsXG4gICdHb3Zlcm5hbmNlJyxcbiAgJ1N0YWtpbmcnLFxuICAnVW51c2VkU3Vkb0JhbGFuY2VzJyxcbiAgJ0lkZW50aXR5SnVkZ2VtZW50JyxcbiAgJ0NhbmNlbFByb3h5Jyxcbl07XG5cbmV4cG9ydCBjb25zdCBCYXNlVHJhbnNhY3Rpb25TY2hlbWEgPSBqb2kub2JqZWN0KHtcbiAgc2VuZGVyOiBhZGRyZXNzU2NoZW1hLnJlcXVpcmVkKCksXG4gIGJsb2NrTnVtYmVyOiBqb2kubnVtYmVyKCkucmVxdWlyZWQoKSxcbiAgYmxvY2tIYXNoOiBqb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgZ2VuZXNpc0hhc2g6IGpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICBzcGVjVmVyc2lvbjogam9pLm51bWJlcigpLnJlcXVpcmVkKCksXG4gIHNwZWNOYW1lOiBqb2kuc3RyaW5nKCkudmFsaWQoJ2t1c2FtYScsICdwb2xrYWRvdCcsICd3ZXN0ZW5kJywgJ3N0YXRlbWludCcsICdzdGF0ZW1pbmUnKS5yZXF1aXJlZCgpLFxuICB0cmFuc2FjdGlvblZlcnNpb246IGpvaS5udW1iZXIoKS5yZXF1aXJlZCgpLFxuICBjaGFpbk5hbWU6IGpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICBlcmFQZXJpb2Q6IGpvaS5udW1iZXIoKS5yZXF1aXJlZCgpLFxuICBub25jZTogam9pLm51bWJlcigpLnJlcXVpcmVkKCksXG4gIHRpcDogam9pLm51bWJlcigpLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IFNpZ25pbmdQYXlsb2FkVHJhbnNhY3Rpb25TY2hlbWEgPSBqb2kub2JqZWN0KHtcbiAgZXJhUGVyaW9kOiBqb2kubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgYmxvY2tIYXNoOiBqb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgbm9uY2U6IGpvaS5udW1iZXIoKS5yZXF1aXJlZCgpLFxuICB0aXA6IGpvaS5udW1iZXIoKS5vcHRpb25hbCgpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBTaWduZWRUcmFuc2FjdGlvblNjaGVtYSA9IGpvaS5vYmplY3Qoe1xuICBzZW5kZXI6IGFkZHJlc3NTY2hlbWEucmVxdWlyZWQoKSxcbiAgbm9uY2U6IGpvaS5udW1iZXIoKS5yZXF1aXJlZCgpLFxuICBlcmFQZXJpb2Q6IGpvaS5udW1iZXIoKS5vcHRpb25hbCgpLFxuICB0aXA6IGpvaS5udW1iZXIoKS5vcHRpb25hbCgpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUcmFuc2ZlclRyYW5zYWN0aW9uU2NoZW1hID0gam9pLm9iamVjdCh7XG4gIGFtb3VudDogam9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gIHRvOiBhZGRyZXNzU2NoZW1hLnJlcXVpcmVkKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IFN0YWtlVHJhbnNhY3Rpb25TY2hlbWEgPSBqb2kub2JqZWN0KHtcbiAgdmFsdWU6IGpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICBjb250cm9sbGVyOiBhZGRyZXNzU2NoZW1hLnJlcXVpcmVkKCksXG4gIHBheWVlOiBbXG4gICAgam9pLnN0cmluZygpLFxuICAgIGpvaS5vYmplY3Qoe1xuICAgICAgYWNjb3VudDogam9pLnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICBjb250cm9sbGVyOiBqb2kuZXF1YWwobnVsbCkub3B0aW9uYWwoKSxcbiAgICAgIHN0YWtlZDogam9pLmVxdWFsKG51bGwpLm9wdGlvbmFsKCksXG4gICAgICBzdGFzaDogam9pLmVxdWFsKG51bGwpLm9wdGlvbmFsKCksXG4gICAgfSksXG4gICAgam9pLm9iamVjdCh7XG4gICAgICBBY2NvdW50OiBqb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgICB9KSxcbiAgXSxcbn0pO1xuXG5leHBvcnQgY29uc3QgQWRkcmVzc0luaXRpYWxpemF0aW9uU2NoZW1hID0gam9pLm9iamVjdCh7XG4gIHByb3h5VHlwZTogam9pXG4gICAgLnN0cmluZygpXG4gICAgLnZhbGlkKC4uLnByb3h5VHlwZXMpXG4gICAgLnJlcXVpcmVkKCksXG4gIGRlbGVnYXRlOiBhZGRyZXNzU2NoZW1hLnJlcXVpcmVkKCksXG4gIGRlbGF5OiBqb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgQW5vbnltb3VzQWRkcmVzc0luaXRpYWxpemF0aW9uU2NoZW1hID0gam9pLm9iamVjdCh7XG4gIHByb3h5VHlwZTogam9pXG4gICAgLnN0cmluZygpXG4gICAgLnZhbGlkKC4uLnByb3h5VHlwZXMpXG4gICAgLnJlcXVpcmVkKCksXG4gIGluZGV4OiBqb2kubnVtYmVyKCkucmVxdWlyZWQoKSxcbiAgZGVsYXk6IGpvaS5udW1iZXIoKS5yZXF1aXJlZCgpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBCYXRjaFRyYW5zYWN0aW9uU2NoZW1hID0gam9pLm9iamVjdCh7XG4gIGNhbGxzOiBqb2lcbiAgICAuYWx0ZXJuYXRpdmVzKClcbiAgICAudHJ5KFxuICAgICAgam9pLmFycmF5KCkuaXRlbXMoam9pLnN0cmluZygpKSxcbiAgICAgIGpvaS5hcnJheSgpLml0ZW1zKGpvaS5vYmplY3QoeyBjYWxsSW5kZXg6IGpvaS5zdHJpbmcoKSwgYXJnczogam9pLm9iamVjdCgpIH0pKSxcbiAgICApLFxufSk7XG5cbmV4cG9ydCBjb25zdCBQcm94eVRyYW5zYWN0aW9uU2NoZW1hID0gam9pLm9iamVjdCh7XG4gIHJlYWw6IGFkZHJlc3NTY2hlbWEucmVxdWlyZWQoKSxcbiAgZm9yY2VQcm94eVR5cGU6IGpvaVxuICAgIC5zdHJpbmcoKVxuICAgIC52YWxpZCguLi5wcm94eVR5cGVzKVxuICAgIC5yZXF1aXJlZCgpLFxuICBhbW91bnQ6IGpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICB0bzogYWRkcmVzc1NjaGVtYS5yZXF1aXJlZCgpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBVbnN0YWtlVHJhbnNhY3Rpb25TY2hlbWEgPSBqb2kub2JqZWN0KHtcbiAgdmFsdWU6IGpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBXaXRoZHJhd1Vuc3Rha2VkVHJhbnNhY3Rpb25TY2hlbWEgPSBqb2kub2JqZWN0KHtcbiAgdmFsdWU6IGpvaS5udW1iZXIoKS5yZXF1aXJlZCgpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBDbGFpbVRyYW5zYWN0aW9uU2NoZW1hID0gam9pLm9iamVjdCh7XG4gIGNsYWltRXJhOiBqb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgdmFsaWRhdG9yU3Rhc2g6IGFkZHJlc3NTY2hlbWEucmVxdWlyZWQoKSxcbn0pO1xuIl19