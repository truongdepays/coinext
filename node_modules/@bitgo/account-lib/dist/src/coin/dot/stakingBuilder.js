"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingBuilder = void 0;
var txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var utils_1 = __importDefault(require("./utils"));
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var iface_1 = require("./iface");
var transactionBuilder_1 = require("./transactionBuilder");
var txnSchema_1 = require("./txnSchema");
var StakingBuilder = /** @class */ (function (_super) {
    __extends(StakingBuilder, _super);
    function StakingBuilder(_coinConfig) {
        return _super.call(this, _coinConfig) || this;
    }
    /**
     * Take the origin account as a stash and lock up value of its balance.
     * Controller will be the account that controls it.
     *
     * @returns {UnsignedTransaction} an unsigned Dot transaction
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#staking
     */
    StakingBuilder.prototype.buildTransaction = function () {
        var baseTxInfo = this.createBaseTxInfo();
        return txwrapper_polkadot_1.methods.staking.bond({
            value: this._amount,
            controller: this._controller,
            payee: this._payee,
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
    };
    Object.defineProperty(StakingBuilder.prototype, "transactionType", {
        get: function () {
            return baseCoin_1.TransactionType.StakingActivate;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * The amount to stake.
     *
     * @param {string} amount
     * @returns {StakeBuilder} This staking builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-nominator#required-minimum-stake
     */
    StakingBuilder.prototype.amount = function (amount) {
        this.validateValue(new bignumber_js_1.default(amount));
        this._amount = amount;
        return this;
    };
    /**
     * The controller of the staked amount.
     *
     * @param {string} controller
     * @returns {StakeBuilder} This staking builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-staking#accounts
     */
    StakingBuilder.prototype.owner = function (controller) {
        this.validateAddress(controller);
        this._controller = controller.address;
        return this;
    };
    /**
     * The rewards destination of the staked amount.
     * Can be set to another accounts address.
     *
     * @param {string} payee
     * @returns {StakeBuilder} This staking builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-staking#4-rewards-mechanism
     */
    StakingBuilder.prototype.payee = function (payee) {
        if (typeof payee !== 'string') {
            this.validateAddress({ address: payee.Account });
            this._payee = { Account: payee.Account };
        }
        else {
            this._payee = payee;
        }
        return this;
    };
    /** @inheritdoc */
    StakingBuilder.prototype.validateDecodedTransaction = function (decodedTxn) {
        var _a;
        if (((_a = decodedTxn.method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.Bond) {
            var txMethod = decodedTxn.method.args;
            var value = txMethod.value;
            var controller = txMethod.controller.id;
            var payee = txMethod.payee;
            var validationResult = txnSchema_1.StakeTransactionSchema.validate({ value: value, controller: controller, payee: payee });
            if (validationResult.error) {
                throw new errors_1.InvalidTransactionError("Transaction validation failed: " + validationResult.error.message);
            }
        }
    };
    /** @inheritdoc */
    StakingBuilder.prototype.fromImplementation = function (rawTransaction) {
        var _a, _b;
        var tx = _super.prototype.fromImplementation.call(this, rawTransaction);
        if (((_a = this._method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.Bond) {
            var txMethod = this._method.args;
            this.amount(txMethod.value);
            this.owner({ address: utils_1.default.decodeDotAddress(txMethod.controller.id) });
            var payee = txMethod.payee;
            if (payee.account) {
                this.payee({ Account: utils_1.default.decodeDotAddress(payee.account) });
            }
            else {
                var payeeType = utils_1.default.capitalizeFirstLetter(Object.keys(payee)[0]);
                this.payee(payeeType);
            }
        }
        else {
            throw new errors_1.InvalidTransactionError("Invalid Transaction Type: " + ((_b = this._method) === null || _b === void 0 ? void 0 : _b.name) + ". Expected bond");
        }
        return tx;
    };
    /** @inheritdoc */
    StakingBuilder.prototype.validateTransaction = function (_) {
        _super.prototype.validateTransaction.call(this, _);
        this.validateFields(this._amount, this._controller, this._payee);
    };
    StakingBuilder.prototype.validateFields = function (value, controller, payee) {
        var validationResult = txnSchema_1.StakeTransactionSchema.validate({
            value: value,
            controller: controller,
            payee: payee,
        });
        if (validationResult.error) {
            throw new errors_1.InvalidTransactionError("Stake Builder Transaction validation failed: " + validationResult.error.message);
        }
    };
    return StakingBuilder;
}(transactionBuilder_1.TransactionBuilder));
exports.StakingBuilder = StakingBuilder;
//# sourceMappingURL=data:application/json;base64,