import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseTransactionBuilderFactory } from '../baseCoin';
import { TransactionBuilder } from './transactionBuilder';
import { TransferBuilder } from './transferBuilder';
import { AddressInitializationBuilder } from './addressInitializationBuilder';
import { StakingBuilder } from './stakingBuilder';
import { Material } from './iface';
import { BatchTransactionBuilder, ClaimBuilder, UnstakeBuilder, WithdrawUnstakedBuilder } from '.';
import { UnnominateBuilder } from './unnominateBuilder';
export declare class TransactionBuilderFactory extends BaseTransactionBuilderFactory {
    protected _material: Material;
    constructor(_coinConfig: Readonly<CoinConfig>);
    getTransferBuilder(): TransferBuilder;
    getStakingBuilder(): StakingBuilder;
    getAddressInitializationBuilder(): AddressInitializationBuilder;
    getBatchTransactionBuilder(): BatchTransactionBuilder;
    getWalletInitializationBuilder(): void;
    getUnstakeBuilder(): UnstakeBuilder;
    getWithdrawUnstakedBuilder(): WithdrawUnstakedBuilder;
    getClaimBuilder(): ClaimBuilder;
    getUnnominateBuilder(): UnnominateBuilder;
    from(rawTxn: string): TransactionBuilder;
    material(material: Material): this;
    private getBuilder;
}
//# sourceMappingURL=transactionBuilderFactory.d.ts.map