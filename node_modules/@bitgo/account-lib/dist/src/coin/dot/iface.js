"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionTypes = exports.ProxyType = exports.MethodNames = void 0;
/**
 * Method names for the transaction method. Names change based on the type of transaction e.g 'bond' for the staking transaction
 */
var MethodNames;
(function (MethodNames) {
    MethodNames["AddProxy"] = "addProxy";
    MethodNames["Proxy"] = "proxy";
    MethodNames["Bond"] = "bond";
    MethodNames["TransferKeepAlive"] = "transferKeepAlive";
    MethodNames["Unbond"] = "unbond";
    MethodNames["Anonymous"] = "anonymous";
    MethodNames["Batch"] = "batch";
    MethodNames["Chill"] = "chill";
    MethodNames["WithdrawUnbonded"] = "withdrawUnbonded";
    MethodNames["PayoutStakers"] = "payoutStakers";
})(MethodNames = exports.MethodNames || (exports.MethodNames = {}));
/**
 * The types of proxies that can be setup and used
 * https://wiki.polkadot.network/docs/learn-proxies#proxy-types
 */
var ProxyType;
(function (ProxyType) {
    ProxyType["ANY"] = "Any";
    ProxyType["NON_TRANSFER"] = "NonTransfer";
    ProxyType["STAKING"] = "Staking";
    ProxyType["IDENTTITY_JUDGEMENT"] = "IdentityJudgement";
    ProxyType["CANCEL_PROXY"] = "CancelProxy";
})(ProxyType = exports.ProxyType || (exports.ProxyType = {}));
var TransactionTypes;
(function (TransactionTypes) {
    TransactionTypes["TRANSFER"] = "transfer";
    TransactionTypes["STAKING"] = "staking";
    TransactionTypes["ADDR_INIT"] = "addressInitialization";
    TransactionTypes["UNSTAKING"] = "unstaking";
})(TransactionTypes = exports.TransactionTypes || (exports.TransactionTypes = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWZhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29pbi9kb3QvaWZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBT0E7O0dBRUc7QUFDSCxJQUFZLFdBV1g7QUFYRCxXQUFZLFdBQVc7SUFDckIsb0NBQXFCLENBQUE7SUFDckIsOEJBQWUsQ0FBQTtJQUNmLDRCQUFhLENBQUE7SUFDYixzREFBdUMsQ0FBQTtJQUN2QyxnQ0FBaUIsQ0FBQTtJQUNqQixzQ0FBdUIsQ0FBQTtJQUN2Qiw4QkFBZSxDQUFBO0lBQ2YsOEJBQWUsQ0FBQTtJQUNmLG9EQUFxQyxDQUFBO0lBQ3JDLDhDQUErQixDQUFBO0FBQ2pDLENBQUMsRUFYVyxXQUFXLEdBQVgsbUJBQVcsS0FBWCxtQkFBVyxRQVd0QjtBQWdGRDs7O0dBR0c7QUFDSCxJQUFZLFNBTVg7QUFORCxXQUFZLFNBQVM7SUFDbkIsd0JBQVcsQ0FBQTtJQUNYLHlDQUE0QixDQUFBO0lBQzVCLGdDQUFtQixDQUFBO0lBQ25CLHNEQUF5QyxDQUFBO0lBQ3pDLHlDQUE0QixDQUFBO0FBQzlCLENBQUMsRUFOVyxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQU1wQjtBQThGRCxJQUFZLGdCQUtYO0FBTEQsV0FBWSxnQkFBZ0I7SUFDMUIseUNBQXFCLENBQUE7SUFDckIsdUNBQW1CLENBQUE7SUFDbkIsdURBQW1DLENBQUE7SUFDbkMsMkNBQXVCLENBQUE7QUFDekIsQ0FBQyxFQUxXLGdCQUFnQixHQUFoQix3QkFBZ0IsS0FBaEIsd0JBQWdCLFFBSzNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9sa2Fkb3RTcGVjTmFtZVR5cGUgfSBmcm9tICdAYml0Z28vc3RhdGljcyc7XG5pbXBvcnQgeyBCYXNlVHhJbmZvLCBUeXBlUmVnaXN0cnksIERlY29kZWRVbnNpZ25lZFR4IH0gZnJvbSAnQHN1YnN0cmF0ZS90eHdyYXBwZXItY29yZS9saWIvdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25UeXBlIH0gZnJvbSAnLi4vYmFzZUNvaW4nO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25FeHBsYW5hdGlvbiBhcyBCYXNlVHJhbnNhY3Rpb25FeHBsYW5hdGlvbiB9IGZyb20gJy4uL2Jhc2VDb2luL2lmYWNlJztcblxuZXhwb3J0IHsgSGV4U3RyaW5nIH0gZnJvbSAnQHBvbGthZG90L3V0aWwvdHlwZXMnO1xuXG4vKipcbiAqIE1ldGhvZCBuYW1lcyBmb3IgdGhlIHRyYW5zYWN0aW9uIG1ldGhvZC4gTmFtZXMgY2hhbmdlIGJhc2VkIG9uIHRoZSB0eXBlIG9mIHRyYW5zYWN0aW9uIGUuZyAnYm9uZCcgZm9yIHRoZSBzdGFraW5nIHRyYW5zYWN0aW9uXG4gKi9cbmV4cG9ydCBlbnVtIE1ldGhvZE5hbWVzIHtcbiAgQWRkUHJveHkgPSAnYWRkUHJveHknLFxuICBQcm94eSA9ICdwcm94eScsXG4gIEJvbmQgPSAnYm9uZCcsXG4gIFRyYW5zZmVyS2VlcEFsaXZlID0gJ3RyYW5zZmVyS2VlcEFsaXZlJyxcbiAgVW5ib25kID0gJ3VuYm9uZCcsXG4gIEFub255bW91cyA9ICdhbm9ueW1vdXMnLFxuICBCYXRjaCA9ICdiYXRjaCcsXG4gIENoaWxsID0gJ2NoaWxsJyxcbiAgV2l0aGRyYXdVbmJvbmRlZCA9ICd3aXRoZHJhd1VuYm9uZGVkJyxcbiAgUGF5b3V0U3Rha2VycyA9ICdwYXlvdXRTdGFrZXJzJyxcbn1cblxuLyoqXG4gKiBUaGUgdHJhbnNhY3Rpb24gZGF0YSByZXR1cm5lZCBmcm9tIHRoZSB0b0pzb24oKSBmdW5jdGlvbiBvZiBhIHRyYW5zYWN0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHhEYXRhIHtcbiAgaWQ6IHN0cmluZztcbiAgc2VuZGVyOiBzdHJpbmc7XG4gIHJlZmVyZW5jZUJsb2NrOiBzdHJpbmc7XG4gIGJsb2NrTnVtYmVyOiBudW1iZXI7XG4gIGdlbmVzaXNIYXNoOiBzdHJpbmc7XG4gIG5vbmNlOiBudW1iZXI7XG4gIHNwZWNWZXJzaW9uOiBudW1iZXI7XG4gIHRyYW5zYWN0aW9uVmVyc2lvbjogbnVtYmVyO1xuICBjaGFpbk5hbWU6IHN0cmluZztcbiAgbWV0aG9kPzogc3RyaW5nO1xuICBzcGVjTmFtZT86IHN0cmluZztcbiAgYW1vdW50Pzogc3RyaW5nO1xuICB0bz86IHN0cmluZztcbiAgdGlwPzogbnVtYmVyO1xuICBlcmFQZXJpb2Q/OiBudW1iZXI7XG4gIGNvbnRyb2xsZXI/OiBzdHJpbmc7XG4gIHBheWVlPzogc3RyaW5nO1xuICBvd25lcj86IHN0cmluZztcbiAgcHJveHlUeXBlPzogc3RyaW5nO1xuICBkZWxheT86IHN0cmluZztcbiAgZm9yY2VQcm94eVR5cGU/OiBQcm94eVR5cGU7XG4gIGluZGV4Pzogc3RyaW5nO1xuICBiYXRjaENhbGxzPzogQmF0Y2hDYWxsT2JqZWN0W107XG4gIG51bVNsYXNoaW5nU3BhbnM/OiBudW1iZXI7XG4gIHZhbGlkYXRvclN0YXNoPzogc3RyaW5nO1xuICBjbGFpbUVyYT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBUcmFuc2FjdGlvbiBtZXRob2Qgc3BlY2lmaWMgYXJnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zZmVyQXJncyB7XG4gIGRlc3Q6IHsgaWQ6IHN0cmluZyB9O1xuICB2YWx1ZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRyYW5zYWN0aW9uIG1ldGhvZCBzcGVjaWZpYyBhcmdzXG4gKi9cbmV4cG9ydCB0eXBlIFN0YWtlQXJnc1BheWVlID1cbiAgfCAnU3Rha2VkJ1xuICB8ICdTdGFzaCdcbiAgfCAnQ29udHJvbGxlcidcbiAgfCB7XG4gICAgICBBY2NvdW50OiBzdHJpbmc7XG4gICAgfTtcblxuLyoqXG4gKiBUcmFuc2FjdGlvbiBtZXRob2Qgc3BlY2lmaWMgYXJnc1xuICovXG5leHBvcnQgdHlwZSBTdGFrZUFyZ3NQYXllZVJhdyA9IHsgY29udHJvbGxlcj86IG51bGw7IHN0YXNoPzogbnVsbDsgc3Rha2VkPzogbnVsbDsgYWNjb3VudD86IHN0cmluZyB9O1xuXG4vKipcbiAqIFRyYW5zYWN0aW9uIG1ldGhvZCBzcGVjaWZpYyBhcmdzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3Rha2VBcmdzIHtcbiAgdmFsdWU6IHN0cmluZztcbiAgY29udHJvbGxlcjogeyBpZDogc3RyaW5nIH07XG4gIHBheWVlOiBTdGFrZUFyZ3NQYXllZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVbnN0YWtlQXJncyB7XG4gIHZhbHVlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2l0aGRyYXdVbnN0YWtlZEFyZ3Mge1xuICBudW1TbGFzaGluZ1NwYW5zOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhaW1BcmdzIHtcbiAgdmFsaWRhdG9yU3Rhc2g6IHN0cmluZztcbiAgZXJhOiBzdHJpbmc7XG59XG5cbi8qKlxuICogVGhlIHR5cGVzIG9mIHByb3hpZXMgdGhhdCBjYW4gYmUgc2V0dXAgYW5kIHVzZWRcbiAqIGh0dHBzOi8vd2lraS5wb2xrYWRvdC5uZXR3b3JrL2RvY3MvbGVhcm4tcHJveGllcyNwcm94eS10eXBlc1xuICovXG5leHBvcnQgZW51bSBQcm94eVR5cGUge1xuICBBTlkgPSAnQW55JyxcbiAgTk9OX1RSQU5TRkVSID0gJ05vblRyYW5zZmVyJyxcbiAgU1RBS0lORyA9ICdTdGFraW5nJyxcbiAgSURFTlRUSVRZX0pVREdFTUVOVCA9ICdJZGVudGl0eUp1ZGdlbWVudCcsXG4gIENBTkNFTF9QUk9YWSA9ICdDYW5jZWxQcm94eScsXG59XG5cbi8qKlxuICogVHJhbnNhY3Rpb24gbWV0aG9kIHNwZWNpZmljIGFyZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBZGRQcm94eUFyZ3Mge1xuICBkZWxlZ2F0ZTogc3RyaW5nO1xuICBkZWxheTogc3RyaW5nO1xuICBwcm94eVR5cGU6IFByb3h5VHlwZTtcbn1cblxuLyoqXG4gKiBUcmFuc2FjdGlvbiBtZXRob2Qgc3BlY2lmaWMgYXJnc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEFkZEFub255bW91c1Byb3h5QXJncyB7XG4gIHByb3h5VHlwZTogUHJveHlUeXBlO1xuICBpbmRleDogc3RyaW5nO1xuICBkZWxheTogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRyYW5zYWN0aW9uIG1ldGhvZCBzcGVjaWZpYyBhcmdzXG4gKi9cbmV4cG9ydCB0eXBlIEJhdGNoQ2FsbE9iamVjdCA9IHtcbiAgY2FsbEluZGV4OiBzdHJpbmc7XG4gIGFyZ3M6IFJlY29yZDxzdHJpbmcsIGFueT47XG59O1xuZXhwb3J0IGludGVyZmFjZSBCYXRjaEFyZ3Mge1xuICBjYWxsczogQmF0Y2hDYWxsT2JqZWN0W107XG59XG5cbi8qKlxuICogVHJhbnNhY3Rpb24gbWV0aG9kIHNwZWNpZmljIGFyZ3NcbiAqL1xuZXhwb3J0IHR5cGUgUHJveHlDYWxsQXJncyA9IHtcbiAgY2FsbEluZGV4OiBzdHJpbmc7XG4gIGFyZ3M6IFRyYW5zZmVyQXJncztcbn07XG5cbi8qKlxuICogVHJhbnNhY3Rpb24gbWV0aG9kIHNwZWNpZmljIGFyZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm94eUFyZ3Mge1xuICByZWFsOiBzdHJpbmc7XG4gIGZvcmNlUHJveHlUeXBlOiBQcm94eVR5cGU7XG59XG5cbi8qKlxuICogRGVjb2RlZCBUeE1ldGhvZCBmcm9tIGEgdHJhbnNhY3Rpb24gaGV4XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHhNZXRob2Qge1xuICBhcmdzOlxuICAgIHwgVHJhbnNmZXJBcmdzXG4gICAgfCBTdGFrZUFyZ3NcbiAgICB8IEFkZFByb3h5QXJnc1xuICAgIHwgUHJveHlBcmdzXG4gICAgfCBVbnN0YWtlQXJnc1xuICAgIHwgQWRkQW5vbnltb3VzUHJveHlBcmdzXG4gICAgfCBCYXRjaEFyZ3NcbiAgICB8IFdpdGhkcmF3VW5zdGFrZWRBcmdzXG4gICAgfCBDbGFpbUFyZ3M7XG4gIG5hbWU6IE1ldGhvZE5hbWVzO1xuICBwYWxsZXQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBNb2RpZmllZCB1bnNpZ25lZCB0cmFuc2FjdGlvbiB3aXRoIGEgZGVjb2RlZCBtZXRob2QgaW5zdGVhZCBvZiBhIG1ldGhvZCBoZXhcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZWNvZGVkVHggZXh0ZW5kcyBPbWl0PERlY29kZWRVbnNpZ25lZFR4LCAnbWV0aG9kJz4ge1xuICBtZXRob2Q6IFR4TWV0aG9kO1xufVxuXG4vKipcbiAqIEJhc2UgdHJhbnNhY3Rpb24gaW5mbyBzaGFyZWQgYWNyb3NzIGFsbCB0eXBlcyBvZiB0cmFuc2FjdGlvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVCYXNlVHhJbmZvIHtcbiAgYmFzZVR4SW5mbzogQmFzZVR4SW5mbztcbiAgb3B0aW9uczoge1xuICAgIG1ldGFkYXRhUnBjOiBgMHgke3N0cmluZ31gO1xuICAgIHJlZ2lzdHJ5OiBUeXBlUmVnaXN0cnk7XG4gICAgaXNJbW1vcnRhbEVyYT86IGJvb2xlYW47XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNhY3Rpb25FeHBsYW5hdGlvbiBleHRlbmRzIEJhc2VUcmFuc2FjdGlvbkV4cGxhbmF0aW9uIHtcbiAgdHlwZTogVHJhbnNhY3Rpb25UeXBlO1xuICBmb3JjZVByb3h5VHlwZT86IFByb3h5VHlwZTtcbiAgY29udHJvbGxlcj86IHN0cmluZztcbiAgcGF5ZWU/OiBzdHJpbmc7XG4gIG93bmVyPzogc3RyaW5nO1xuICBwcm94eVR5cGU/OiBzdHJpbmc7XG4gIGRlbGF5Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgZW51bSBUcmFuc2FjdGlvblR5cGVzIHtcbiAgVFJBTlNGRVIgPSAndHJhbnNmZXInLFxuICBTVEFLSU5HID0gJ3N0YWtpbmcnLFxuICBBRERSX0lOSVQgPSAnYWRkcmVzc0luaXRpYWxpemF0aW9uJyxcbiAgVU5TVEFLSU5HID0gJ3Vuc3Rha2luZycsXG59XG5leHBvcnQgaW50ZXJmYWNlIE1hdGVyaWFsIHtcbiAgZ2VuZXNpc0hhc2g6IHN0cmluZztcbiAgY2hhaW5OYW1lOiBzdHJpbmc7XG4gIHNwZWNOYW1lOiBQb2xrYWRvdFNwZWNOYW1lVHlwZTtcbiAgc3BlY1ZlcnNpb246IG51bWJlcjtcbiAgdHhWZXJzaW9uOiBudW1iZXI7XG4gIG1ldGFkYXRhOiBgMHgke3N0cmluZ31gO1xufVxuIl19