import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { TransactionBuilder } from './transactionBuilder';
import { Transaction } from './transaction';
import { DecodedSignedTx, DecodedSigningPayload, UnsignedTransaction } from '@substrate/txwrapper-core';
import { TransactionType } from '../baseCoin';
import { ProxyType } from './iface';
import { BaseAddress } from '../baseCoin/iface';
export declare class TransferBuilder extends TransactionBuilder {
    protected _amount: string;
    protected _to: string;
    protected _owner: string;
    protected _forceProxyType: ProxyType;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /**
     *
     * Dispatch the given call from an account that the sender is authorised for through add_proxy.
     *
     * @returns {UnsignedTransaction} an unsigned Dot transaction
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#proxy
     */
    protected buildTransaction(): UnsignedTransaction;
    protected get transactionType(): TransactionType;
    /**
     *
     * The amount for transfer transaction.
     *
     * @param {string} amount
     * @returns {TransferBuilder} This transfer builder.
     *
     * @see https://wiki.polkadot.network/docs/build-protocol-info
     */
    amount(amount: string): this;
    /**
     *
     * The destination address for transfer transaction.
     *
     * @param {string} dest
     * @returns {TransferBuilder} This transfer builder.
     *
     * @see https://wiki.polkadot.network/docs/build-protocol-info
     */
    to({ address }: BaseAddress): this;
    /**
     *
     * The real address of the original tx
     *
     * @param {BaseAddress} real
     * @returns {TransferBuilder} This builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-proxies#why-use-a-proxy
     */
    owner(owner: BaseAddress): this;
    /**
     *
     * The proxy type to execute
     *
     * @param {proxyType} forceProxyType
     * @returns {TransferBuilder} This builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-proxies#proxy-types
     */
    forceProxyType(forceProxyType: ProxyType): this;
    /** @inheritdoc */
    validateDecodedTransaction(decodedTxn: DecodedSigningPayload | DecodedSignedTx, rawTransaction: string): void;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): Transaction;
    /** @inheritdoc */
    validateTransaction(_: Transaction): void;
    private validateFields;
}
//# sourceMappingURL=transferBuilder.d.ts.map