import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { DecodedSignedTx, DecodedSigningPayload, UnsignedTransaction } from '@substrate/txwrapper-core';
import { TransactionType } from '../baseCoin';
import { Transaction } from './transaction';
import { TransactionBuilder } from './transactionBuilder';
export declare class UnstakeBuilder extends TransactionBuilder {
    protected _amount: string;
    constructor(_coinConfig: Readonly<CoinConfig>);
    /**
     *
     * Take the origin account as a stash and lock up value of its balance.
     * Controller will be the account that controls it.
     *
     * @returns {UnsignedTransaction} an unsigned Dot transaction
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#staking
     */
    protected buildTransaction(): UnsignedTransaction;
    protected get transactionType(): TransactionType;
    /**
     *
     * The amount to unstake.
     *
     * @param {string} amount
     * @returns {StakeBuilder} This stake builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-nominator#required-minimum-stake
     */
    amount(amount: string): this;
    /** @inheritdoc */
    validateDecodedTransaction(decodedTxn: DecodedSigningPayload | DecodedSignedTx): void;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): Transaction;
    /** @inheritdoc */
    validateTransaction(_: Transaction): void;
    private validateFields;
}
//# sourceMappingURL=unstakeBuilder.d.ts.map