"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
var keyring_1 = __importStar(require("@polkadot/keyring"));
var keyPair_1 = require("./keyPair");
var utils_1 = __importDefault(require("./utils"));
var util_1 = require("@polkadot/util");
var Transaction = /** @class */ (function (_super) {
    __extends(Transaction, _super);
    function Transaction(coinConfig) {
        return _super.call(this, coinConfig) || this;
    }
    /** @inheritdoc */
    Transaction.prototype.canSign = function (_a) {
        var key = _a.key;
        var kp = new keyPair_1.KeyPair({ prv: key });
        var addr = kp.getAddress();
        return addr === this._sender;
    };
    /**
     * Sign a polkadot transaction and update the transaction hex
     *
     * @param {KeyPair} keyPair - ed signature
     */
    Transaction.prototype.sign = function (keyPair) {
        if (!this._dotTransaction) {
            throw new errors_1.InvalidTransactionError('No transaction data to sign');
        }
        var _a = keyPair.getKeys(), prv = _a.prv, pub = _a.pub;
        if (!prv) {
            throw new errors_1.SigningError('Missing private key');
        }
        var signingPayload = txwrapper_polkadot_1.construct.signingPayload(this._dotTransaction, {
            registry: this._registry,
        });
        // Sign a payload. This operation should be performed on an offline device.
        var keyring = new keyring_1.default({ type: 'ed25519' });
        var secretKey = new Uint8Array(Buffer.from(prv, 'hex'));
        var publicKey = new Uint8Array(Buffer.from(pub, 'hex'));
        var signingKeyPair = keyring.addFromPair({ secretKey: secretKey, publicKey: publicKey });
        var txHex = utils_1.default.createSignedTx(signingKeyPair, signingPayload, this._dotTransaction, {
            metadataRpc: this._dotTransaction.metadataRpc,
            registry: this._registry,
        });
        // get signature from signed txHex generated above
        this._signatures = [utils_1.default.recoverSignatureFromRawTx(txHex, { registry: this._registry })];
        this._signedTransaction = txHex;
    };
    /**
     * Adds the signature to the DOT Transaction
     * @param {string} signature
     */
    Transaction.prototype.addSignature = function (signature) {
        this._signedTransaction = utils_1.default.serializeSignedTransaction(this._dotTransaction, signature, this._dotTransaction.metadataRpc, this._registry);
    };
    Transaction.prototype.registry = function (registry) {
        this._registry = registry;
    };
    Transaction.prototype.chainName = function (chainName) {
        this._chainName = chainName;
    };
    Transaction.prototype.sender = function (sender) {
        this._sender = sender;
    };
    /** @inheritdoc */
    Transaction.prototype.toBroadcastFormat = function () {
        if (!this._dotTransaction) {
            throw new errors_1.InvalidTransactionError('Empty transaction');
        }
        if (this._signedTransaction && this._signedTransaction.length > 0) {
            return this._signedTransaction;
        }
        else {
            return txwrapper_polkadot_1.construct.signingPayload(this._dotTransaction, {
                registry: this._registry,
            });
        }
    };
    Transaction.prototype.transactionSize = function () {
        return this.toBroadcastFormat().length / 2;
    };
    /** @inheritdoc */
    Transaction.prototype.toJson = function () {
        var _a;
        if (!this._dotTransaction) {
            throw new errors_1.InvalidTransactionError('Empty transaction');
        }
        var decodedTx = txwrapper_polkadot_1.decode(this._dotTransaction, {
            metadataRpc: this._dotTransaction.metadataRpc,
            registry: this._registry,
            isImmortalEra: utils_1.default.isZeroHex(this._dotTransaction.era),
        });
        var result = {
            id: txwrapper_polkadot_1.construct.txHash(this.toBroadcastFormat()),
            sender: decodedTx.address,
            referenceBlock: decodedTx.blockHash,
            blockNumber: decodedTx.blockNumber,
            genesisHash: decodedTx.genesisHash,
            nonce: decodedTx.nonce,
            specVersion: decodedTx.specVersion,
            transactionVersion: decodedTx.transactionVersion,
            eraPeriod: decodedTx.eraPeriod,
            chainName: this._chainName,
            tip: decodedTx.tip,
        };
        if (this.type === baseCoin_1.TransactionType.Send) {
            var txMethod = decodedTx.method.args;
            if (utils_1.default.isProxyTransfer(txMethod)) {
                var keypairReal = new keyPair_1.KeyPair({
                    pub: Buffer.from(keyring_1.decodeAddress(txMethod.real)).toString('hex'),
                });
                result.owner = keypairReal.getAddress();
                result.forceProxyType = txMethod.forceProxyType;
                var decodedCall = utils_1.default.decodeCallMethod(this._dotTransaction, {
                    metadataRpc: this._dotTransaction.metadataRpc,
                    registry: this._registry,
                });
                var keypairDest = new keyPair_1.KeyPair({
                    pub: Buffer.from(keyring_1.decodeAddress(decodedCall.dest.id)).toString('hex'),
                });
                result.to = keypairDest.getAddress();
                result.amount = decodedCall.value;
            }
            else if (utils_1.default.isTransfer(txMethod)) {
                var keypairDest = new keyPair_1.KeyPair({
                    pub: Buffer.from(keyring_1.decodeAddress(txMethod.dest.id)).toString('hex'),
                });
                result.to = keypairDest.getAddress();
                result.amount = txMethod.value;
            }
            else {
                throw new errors_1.ParseTransactionError("Serializing unknown Transfer type parameters");
            }
        }
        if (this.type === baseCoin_1.TransactionType.StakingActivate) {
            var txMethod = decodedTx.method.args;
            var keypair = new keyPair_1.KeyPair({
                pub: Buffer.from(keyring_1.decodeAddress(txMethod.controller.id, false, this._registry.chainSS58)).toString('hex'),
            });
            result.controller = keypair.getAddress();
            result.amount = txMethod.value;
            var payee = txMethod.payee;
            if (payee.account) {
                var keypair_1 = new keyPair_1.KeyPair({
                    pub: Buffer.from(keyring_1.decodeAddress(payee.account, false, this._registry.chainSS58)).toString('hex'),
                });
                result.payee = keypair_1.getAddress();
            }
            else {
                var payeeType = utils_1.default.capitalizeFirstLetter(Object.keys(payee)[0]);
                result.payee = payeeType;
            }
        }
        if (this.type === baseCoin_1.TransactionType.AddressInitialization) {
            var txMethod = void 0;
            if (((_a = decodedTx.method) === null || _a === void 0 ? void 0 : _a.args).delegate) {
                txMethod = decodedTx.method.args;
                var keypair = new keyPair_1.KeyPair({
                    pub: Buffer.from(keyring_1.decodeAddress(txMethod.delegate, false, this._registry.chainSS58)).toString('hex'),
                });
                result.owner = keypair.getAddress();
            }
            else {
                txMethod = decodedTx.method.args;
                result.index = txMethod.index;
            }
            result.method = this._dotTransaction.method;
            result.proxyType = txMethod.proxyType;
            result.delay = txMethod.delay;
        }
        if (this.type === baseCoin_1.TransactionType.StakingUnlock) {
            var txMethod = decodedTx.method.args;
            result.amount = txMethod.value;
        }
        if (this.type === baseCoin_1.TransactionType.StakingWithdraw) {
            var txMethod = decodedTx.method.args;
            result.numSlashingSpans = txMethod.numSlashingSpans;
        }
        if (this.type === baseCoin_1.TransactionType.StakingClaim) {
            var txMethod = decodedTx.method.args;
            result.validatorStash = txMethod.validatorStash;
            result.claimEra = txMethod.era;
        }
        if (this.type === baseCoin_1.TransactionType.Batch) {
            var txMethod = decodedTx.method.args;
            result.batchCalls = txMethod.calls;
        }
        return result;
    };
    Transaction.prototype.explainTransferTransaction = function (json, explanationResult) {
        var _a, _b;
        explanationResult.displayOrder.push('owner', 'forceProxyType');
        return __assign(__assign({}, explanationResult), { outputs: [
                {
                    address: ((_a = json.to) === null || _a === void 0 ? void 0 : _a.toString()) || '',
                    amount: ((_b = json.amount) === null || _b === void 0 ? void 0 : _b.toString()) || '',
                },
            ], owner: json.owner, forceProxyType: json.forceProxyType });
    };
    Transaction.prototype.explainStakingActivateTransaction = function (json, explanationResult) {
        var _a;
        explanationResult.displayOrder.push('payee', 'forceProxyType');
        return __assign(__assign({}, explanationResult), { outputs: [
                {
                    address: ((_a = json.controller) === null || _a === void 0 ? void 0 : _a.toString()) || '',
                    amount: json.amount || '',
                },
            ], payee: json.payee, forceProxyType: json.forceProxyType });
    };
    Transaction.prototype.explainAddressInitializationTransaction = function (json, explanationResult) {
        explanationResult.displayOrder.push('owner', 'proxyType', 'delay');
        return __assign(__assign({}, explanationResult), { owner: json.owner, proxyType: json.proxyType, delay: json.delay });
    };
    Transaction.prototype.explainStakingUnlockTransaction = function (json, explanationResult) {
        return __assign(__assign({}, explanationResult), { outputs: [
                {
                    address: json.sender.toString(),
                    amount: json.amount || '',
                },
            ] });
    };
    /** @inheritdoc */
    Transaction.prototype.explainTransaction = function () {
        var _a, _b;
        var result = this.toJson();
        var displayOrder = ['outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee', 'type'];
        var outputs = [];
        var explanationResult = {
            // txhash used to identify the transactions
            id: result.id,
            displayOrder: displayOrder,
            outputAmount: ((_a = result.amount) === null || _a === void 0 ? void 0 : _a.toString()) || '0',
            changeAmount: '0',
            changeOutputs: [],
            outputs: outputs,
            fee: {
                fee: ((_b = result.tip) === null || _b === void 0 ? void 0 : _b.toString()) || '',
                type: 'tip',
            },
            type: this.type,
        };
        switch (this.type) {
            case baseCoin_1.TransactionType.Send:
                return this.explainTransferTransaction(result, explanationResult);
            case baseCoin_1.TransactionType.StakingActivate:
                return this.explainStakingActivateTransaction(result, explanationResult);
            case baseCoin_1.TransactionType.AddressInitialization:
                return this.explainAddressInitializationTransaction(result, explanationResult);
            case baseCoin_1.TransactionType.StakingUnlock:
                return this.explainStakingUnlockTransaction(result, explanationResult);
            default:
                throw new errors_1.InvalidTransactionError('Transaction type not supported');
        }
    };
    /**
     * Load the input and output data on this transaction.
     */
    Transaction.prototype.loadInputsAndOutputs = function () {
        if (!this._dotTransaction) {
            return;
        }
        var decodedTx = txwrapper_polkadot_1.decode(this._dotTransaction, {
            metadataRpc: this._dotTransaction.metadataRpc,
            registry: this._registry,
            isImmortalEra: utils_1.default.isZeroHex(this._dotTransaction.era),
        });
        if (this.type === baseCoin_1.TransactionType.Send) {
            var txMethod = decodedTx.method.args;
            var to = void 0;
            var value = void 0;
            var from = void 0;
            if (utils_1.default.isProxyTransfer(txMethod)) {
                var decodedCall = utils_1.default.decodeCallMethod(this._dotTransaction, {
                    metadataRpc: this._dotTransaction.metadataRpc,
                    registry: this._registry,
                });
                var keypairDest = new keyPair_1.KeyPair({
                    pub: Buffer.from(keyring_1.decodeAddress(decodedCall.dest.id)).toString('hex'),
                });
                var keypairFrom = new keyPair_1.KeyPair({
                    pub: Buffer.from(keyring_1.decodeAddress(txMethod.real)).toString('hex'),
                });
                to = keypairDest.getAddress();
                value = "" + decodedCall.value;
                from = keypairFrom.getAddress();
            }
            else if (utils_1.default.isTransfer(txMethod)) {
                var keypairDest = new keyPair_1.KeyPair({
                    pub: Buffer.from(keyring_1.decodeAddress(txMethod.dest.id)).toString('hex'),
                });
                to = keypairDest.getAddress();
                value = txMethod.value;
                from = decodedTx.address;
            }
            else {
                throw new errors_1.ParseTransactionError("Loading inputs of unknown Transfer type parameters");
            }
            this._outputs = [
                {
                    address: to,
                    value: value,
                    coin: this._coinConfig.name,
                },
            ];
            this._inputs = [
                {
                    address: from,
                    value: value,
                    coin: this._coinConfig.name,
                },
            ];
        }
    };
    /**
     * Constructs a signed payload using construct.signTx
     * This method will be called during the build step if a TSS signature
     * is added and will set the signTransaction which is the txHex that will be broadcasted
     * As well as add the signature used to sign to the signature array in hex format
     *
     * @param {Buffer} signature The signature to be added to a dot transaction
     */
    Transaction.prototype.constructSignedPayload = function (signature) {
        // 0x00 means its an ED25519 signature
        var edSignature = "0x00" + signature.toString('hex');
        try {
            this._signedTransaction = txwrapper_polkadot_1.construct.signedTx(this._dotTransaction, edSignature, {
                registry: this._registry,
                metadataRpc: this._dotTransaction.metadataRpc,
            });
        }
        catch (e) {
            throw new errors_1.SigningError("Unable to sign dot transaction with signature " + edSignature + " " + e);
        }
        this._signatures = [signature.toString('hex')];
    };
    Transaction.prototype.setTransaction = function (tx) {
        this._dotTransaction = tx;
    };
    Object.defineProperty(Transaction.prototype, "signablePayload", {
        /** @inheritdoc **/
        get: function () {
            var extrinsicPayload = this._registry.createType('ExtrinsicPayload', this._dotTransaction, {
                version: this._dotTransaction.version,
            });
            return util_1.u8aToBuffer(extrinsicPayload.toU8a({ method: true }));
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    Transaction.prototype.transactionType = function (transactionType) {
        this._type = transactionType;
    };
    return Transaction;
}(baseCoin_1.BaseTransaction));
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,