"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
var keyring_1 = require("@polkadot/keyring");
var decode_1 = require("@polkadot/keyring/pair/decode");
var Extrinsic_1 = require("@polkadot/types/extrinsic/v4/Extrinsic");
var util_1 = require("@polkadot/util");
var util_crypto_1 = require("@polkadot/util-crypto");
var crypto_1 = require("../../utils/crypto");
var txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
var hi_base32_1 = __importDefault(require("hi-base32"));
var _1 = require(".");
var tweetnacl_1 = __importDefault(require("tweetnacl"));
var types_1 = require("@polkadot/types");
var bs58_1 = __importDefault(require("bs58"));
var crypto_2 = require("./../../utils/crypto");
var PROXY_METHOD_ARG = 2;
var Utils = /** @class */ (function () {
    function Utils() {
    }
    /** @inheritdoc */
    Utils.prototype.isValidAddress = function (address) {
        try {
            keyring_1.encodeAddress(util_1.isHex(address) ? util_1.hexToU8a(address) : keyring_1.decodeAddress(address));
            return true;
        }
        catch (error) {
            return false;
        }
    };
    /** @inheritdoc */
    Utils.prototype.isValidBlockId = function (hash) {
        return util_1.isHex(hash, 256);
    };
    /** @inheritdoc */
    Utils.prototype.isValidPrivateKey = function (key) {
        try {
            var decodedPrv = util_1.hexToU8a(key);
            return decodedPrv.length === tweetnacl_1.default.sign.secretKeyLength / 2;
        }
        catch (e) {
            return false;
        }
    };
    /** @inheritdoc */
    Utils.prototype.isValidPublicKey = function (key) {
        var pubKey = key;
        // convert base58 pub key to hex format
        // tss common pub is in base58 format and decodes to length of 32
        if (crypto_2.isBase58(pubKey, 32)) {
            var base58Decode = bs58_1.default.decode(pubKey);
            pubKey = base58Decode.toString('hex');
        }
        return crypto_1.isValidEd25519PublicKey(pubKey);
    };
    /** @inheritdoc */
    Utils.prototype.isValidSignature = function (signature) {
        var signatureU8a = util_1.u8aToU8a(signature);
        return [64, 65, 66].includes(signatureU8a.length);
    };
    /**
     * Verifies the signature on a given message
     *
     * @param {string} signedMessage the signed message for the signature
     * @param {string} signature the signature to verify
     * @param {string} address the address of the signer
     * @returns {boolean} whether the signature is valid or not
     */
    Utils.prototype.verifySignature = function (signedMessage, signature, address) {
        var publicKey = keyring_1.decodeAddress(address);
        var hexPublicKey = util_1.u8aToHex(publicKey);
        return util_crypto_1.signatureVerify(signedMessage, signature, hexPublicKey).isValid;
    };
    /** @inheritdoc */
    Utils.prototype.isValidTransactionId = function (txId) {
        return util_1.isHex(txId, 256);
    };
    /**
     * decodeSeed decodes a dot seed
     *
     * @param {string} seed - the seed to be validated.
     * @returns {Seed} - the object Seed
     */
    Utils.prototype.decodeSeed = function (seed) {
        var decoded = hi_base32_1.default.decode.asBytes(seed);
        return {
            seed: Buffer.from(decoded),
        };
    };
    /**
     * Helper function to capitalize the first letter of a string
     *
     * @param {string} val
     * @returns {string}
     */
    Utils.prototype.capitalizeFirstLetter = function (val) {
        return val.charAt(0).toUpperCase() + val.slice(1);
    };
    /**
     * Helper function to decode the internal method hex in case of a proxy transaction
     *
     * @param {string | UnsignedTransaction} tx
     * @param { metadataRpc: string; registry: TypeRegistry } options
     * @returns {TransferArgs}
     */
    Utils.prototype.decodeCallMethod = function (tx, options) {
        var registry = options.registry;
        var methodCall;
        if (typeof tx === 'string') {
            try {
                var payload = types_1.createTypeUnsafe(registry, 'ExtrinsicPayload', [
                    tx,
                    { version: Extrinsic_1.EXTRINSIC_VERSION },
                ]);
                methodCall = types_1.createTypeUnsafe(registry, 'Call', [payload.method]);
            }
            catch (e) {
                methodCall = registry.createType('Extrinsic', util_1.hexToU8a(tx), {
                    isSigned: true,
                });
            }
        }
        else {
            methodCall = registry.createType('Call', tx.method);
        }
        var method = methodCall.args[PROXY_METHOD_ARG];
        var decodedArgs = method.toJSON();
        return decodedArgs.args;
    };
    /**
     * keyPairFromSeed generates an object with secretKey and publicKey using the polkadot sdk
     * @param seed 32 bytes long seed
     * @returns KeyPair
     */
    Utils.prototype.keyPairFromSeed = function (seed) {
        var keyring = new keyring_1.Keyring({ type: 'ed25519' });
        var keyringPair = keyring.addFromSeed(seed);
        var pairJson = keyringPair.toJson();
        var decodedKeyPair = decode_1.decodePair('', util_crypto_1.base64Decode(pairJson.encoded), pairJson.encoding.type);
        return new _1.KeyPair({ prv: Buffer.from(decodedKeyPair.secretKey).toString('hex') });
    };
    /**
     * Signing function. Implement this on the OFFLINE signing device.
     *
     * @param {KeyringPair} pair - The signing pair.
     * @param {string} signingPayload - Payload to sign.
     * @param {UnsignedTransaction} transaction - raw transaction to sign
     * @param {Object} options
     * @param {HexString} options.metadataRpc - metadata that is needed for dot to sign
     * @param {TypeRegistry} options.registry - metadata that is needed for dot to sign
     */
    Utils.prototype.createSignedTx = function (pair, signingPayload, transaction, options) {
        var registry = options.registry, metadataRpc = options.metadataRpc;
        var signature = registry
            .createType('ExtrinsicPayload', signingPayload, {
            version: Extrinsic_1.EXTRINSIC_VERSION,
        })
            .sign(pair).signature;
        // Serialize a signed transaction.
        return this.serializeSignedTransaction(transaction, signature, metadataRpc, registry);
    };
    /**
     * Serializes the signed transaction
     *
     * @param transaction Transaction to serialize
     * @param signature Signature of the message
     * @param metadataRpc Network metadata
     * @param registry Transaction registry
     * @returns string Serialized transaction
     */
    Utils.prototype.serializeSignedTransaction = function (transaction, signature, metadataRpc, registry) {
        return txwrapper_polkadot_1.construct.signedTx(transaction, signature, {
            metadataRpc: metadataRpc,
            registry: registry,
        });
    };
    /**
     * Decodes the dot address from the given format
     *
     * @param {string} address
     * @param {number} [ss58Format]
     * @returns {string}
     */
    Utils.prototype.decodeDotAddress = function (address, ss58Format) {
        var keypair = new _1.KeyPair({ pub: Buffer.from(keyring_1.decodeAddress(address, undefined, ss58Format)).toString('hex') });
        return keypair.getAddress();
    };
    /**
     * Decodes the dot address from the given format
     *
     * @param {string} address
     * @param {number} [ss58Format]
     * @returns {string}
     */
    Utils.prototype.encodeDotAddress = function (address, ss58Format) {
        return keyring_1.encodeAddress(address, ss58Format);
    };
    /**
     * Retrieves the txHash of a signed txHex
     *
     * @param txHex signed transaction hex
     * @returns {string}
     */
    Utils.prototype.getTxHash = function (txHex) {
        return txwrapper_polkadot_1.construct.txHash(txHex);
    };
    Utils.prototype.getMaterial = function (coinConfig) {
        var networkConfig = coinConfig.network;
        var specName = networkConfig.specName, specVersion = networkConfig.specVersion, chainName = networkConfig.chainName, txVersion = networkConfig.txVersion, genesisHash = networkConfig.genesisHash;
        return {
            specName: specName,
            specVersion: specVersion,
            chainName: chainName,
            metadata: networkConfig.metadataRpc,
            txVersion: txVersion,
            genesisHash: genesisHash,
        };
    };
    Utils.prototype.isSigningPayload = function (payload) {
        return payload.blockHash !== undefined;
    };
    Utils.prototype.isProxyTransfer = function (arg) {
        return arg.real !== undefined;
    };
    Utils.prototype.isTransfer = function (arg) {
        var _a;
        return ((_a = arg.dest) === null || _a === void 0 ? void 0 : _a.id) !== undefined && arg.value !== undefined;
    };
    /**
     * extracts and returns the signature in hex format given a raw signed transaction
     *
     * @param {string} rawTx signed raw transaction
     * @param options registry dot registry used to retrieve the signature
     */
    Utils.prototype.recoverSignatureFromRawTx = function (rawTx, options) {
        var registry = options.registry;
        var methodCall = registry.createType('Extrinsic', rawTx, {
            isSigned: true,
        });
        var signature = util_1.u8aToHex(methodCall.signature);
        // remove 0x from the signature since this is how it's returned from TSS signing
        if (signature.startsWith('0x')) {
            signature = signature.substr(2);
        }
        return signature;
    };
    /**
     * Decodes the dot address from the given format
     *
     * @param {string} address
     * @param {number} [ss58Format]
     * @returns {KeyPair}
     */
    Utils.prototype.decodeDotAddressToKeyPair = function (address, ss58Format) {
        return new _1.KeyPair({ pub: Buffer.from(keyring_1.decodeAddress(address, undefined, ss58Format)).toString('hex') });
    };
    /**
     * Checks whether the given input is a hex string with with 0 value
     * used to check whether a given transaction is immortal or mortal
     * @param hexValue
     */
    Utils.prototype.isZeroHex = function (hexValue) {
        return hexValue === '0x00';
    };
    return Utils;
}());
exports.Utils = Utils;
var utils = new Utils();
exports.default = utils;
//# sourceMappingURL=data:application/json;base64,