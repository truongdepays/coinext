"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
var txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
var _ = __importStar(require("lodash"));
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var crypto_1 = require("../../utils/crypto");
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var errors_2 = require("./errors");
var keyPair_1 = require("./keyPair");
var transaction_1 = require("./transaction");
var txnSchema_1 = require("./txnSchema");
var singletonRegistry_1 = require("./singletonRegistry");
var utils_1 = __importDefault(require("./utils"));
var TransactionBuilder = /** @class */ (function (_super) {
    __extends(TransactionBuilder, _super);
    function TransactionBuilder(_coinConfig) {
        var _this = _super.call(this, _coinConfig) || this;
        // signatures that will be used to sign a transaction when building
        // not the same as the _signatures in transaction which is the signature in
        // string hex format used for validation after we call .build()
        _this._signatures = []; // only support single sig for now
        _this._transaction = new transaction_1.Transaction(_coinConfig);
        return _this;
    }
    /**
     * Sets the address of sending account.
     *
     * @param {BaseAddress} address The SS58-encoded address.
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://wiki.polkadot.network/docs/build-transaction-construction
     */
    TransactionBuilder.prototype.sender = function (_a) {
        var address = _a.address;
        this.validateAddress({ address: address });
        this._sender = address;
        this._transaction.sender(address);
        return this;
    };
    /**
     * The nonce for this transaction.
     *
     * @param {number} nonce
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://wiki.polkadot.network/docs/build-transaction-construction
     */
    TransactionBuilder.prototype.sequenceId = function (nonce) {
        var value = new bignumber_js_1.default(nonce.value);
        this.validateValue(value);
        this._nonce = value.toNumber();
        return this;
    };
    /**
     * The tip to increase transaction priority.
     *
     * @param {number | undefined} [fee.type] options for building fee tx
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://wiki.polkadot.network/docs/build-transaction-construction
     */
    TransactionBuilder.prototype.fee = function (fee) {
        if (fee.type !== 'tip') {
            throw new errors_2.InvalidFeeError(fee.type, 'tip');
        }
        var tipBN = new bignumber_js_1.default(fee.amount);
        this.validateValue(tipBN);
        this._tip = tipBN.toNumber();
        return this;
    };
    /**
     * The number of the checkpoint block after which the transaction is valid
     *
     * @param {ValidityWindow} firstValid block checkpoint where transaction is first valid
     * @param {ValidityWindow} maxDuration number of blocks after checkpoint for which transaction is valid
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://wiki.polkadot.network/docs/build-transaction-construction
     */
    TransactionBuilder.prototype.validity = function (_a) {
        var firstValid = _a.firstValid, maxDuration = _a.maxDuration;
        if (!_.isUndefined(firstValid)) {
            this.validateValue(new bignumber_js_1.default(firstValid));
            this._blockNumber = firstValid;
        }
        if (!_.isUndefined(maxDuration)) {
            this.validateValue(new bignumber_js_1.default(maxDuration));
            this._eraPeriod = maxDuration;
        }
        return this;
    };
    /**
     * The hash of the checkpoint block.
     *
     * @param {number} referenceBlock block hash checkpoint from where the transaction is valid
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://wiki.polkadot.network/docs/build-transaction-construction
     * @see https://wiki.polkadot.network/docs/build-protocol-info#transaction-mortality
     */
    TransactionBuilder.prototype.referenceBlock = function (referenceBlock) {
        this._referenceBlock = referenceBlock;
        return this;
    };
    /**
     * The current version for transaction format.
     *
     * @param {number} transactionVersion
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://wiki.polkadot.network/docs/build-transaction-construction
     * @deprecated This field was added in material data.
     */
    TransactionBuilder.prototype.version = function (transactionVersion) {
        // this._transactionVersion = transactionVersion;
        return this;
    };
    TransactionBuilder.prototype.method = function (method) {
        this._method = method;
        return this;
    };
    /**
     * The material data for the block.
     *
     * @param {Material} material
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://wiki.polkadot.network/docs/build-transaction-construction
     */
    TransactionBuilder.prototype.material = function (material) {
        this.__material = material;
        this._registry = singletonRegistry_1.SingletonRegistry.getInstance(material);
        return this;
    };
    Object.defineProperty(TransactionBuilder.prototype, "_material", {
        get: function () {
            if (!this.__material) {
                var m = utils_1.default.getMaterial(this._coinConfig);
                this.material(m);
                return m;
            }
            return this.__material;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionBuilder.prototype, "transaction", {
        /** @inheritdoc */
        get: function () {
            return this._transaction;
        },
        /** @inheritdoc */
        set: function (transaction) {
            this._transaction = transaction;
        },
        enumerable: false,
        configurable: true
    });
    /** @inheritdoc */
    TransactionBuilder.prototype.fromImplementation = function (rawTransaction) {
        var decodedTxn = txwrapper_polkadot_1.decode(rawTransaction, {
            metadataRpc: this._material.metadata,
            registry: this._registry,
        });
        if (utils_1.default.isSigningPayload(decodedTxn)) {
            this.referenceBlock(decodedTxn.blockHash);
        }
        else {
            var keypair = utils_1.default.decodeDotAddressToKeyPair(decodedTxn.address);
            this.sender({ address: keypair.getAddress() });
            var edSignature = utils_1.default.recoverSignatureFromRawTx(rawTransaction, { registry: this._registry });
            this.addSignature(keypair.getKeys(), Buffer.from(edSignature, 'hex'));
        }
        this.validity({ maxDuration: decodedTxn.eraPeriod });
        this.sequenceId({
            name: 'Nonce',
            keyword: 'nonce',
            value: decodedTxn.nonce,
        });
        if (decodedTxn.tip) {
            this.fee({ amount: "" + decodedTxn.tip, type: 'tip' });
        }
        this.method(decodedTxn.method);
        return this._transaction;
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.buildImplementation = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                this.transaction.setTransaction(this.buildTransaction());
                this.transaction.transactionType(this.transactionType);
                this.transaction.registry(this._registry);
                this.transaction.chainName(this._material.chainName);
                if (this._keyPair) {
                    this.transaction.sign(this._keyPair);
                }
                if (((_a = this._signatures) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                    // if we have a signature, apply that and update this._signedTransaction
                    this.transaction.constructSignedPayload(this._signatures[0].signature);
                }
                this._transaction.loadInputsAndOutputs();
                return [2 /*return*/, this._transaction];
            });
        });
    };
    TransactionBuilder.prototype.createBaseTxInfo = function () {
        return {
            baseTxInfo: {
                address: this._sender,
                blockHash: this._referenceBlock,
                blockNumber: this._registry.createType('BlockNumber', this._blockNumber).toNumber(),
                eraPeriod: this._eraPeriod,
                genesisHash: this._material.genesisHash,
                metadataRpc: this._material.metadata,
                specVersion: this._material.specVersion,
                transactionVersion: this._material.txVersion,
                nonce: this._nonce,
                tip: this._tip,
            },
            options: {
                metadataRpc: this._material.metadata,
                registry: this._registry,
                isImmortalEra: this._eraPeriod === 0,
            },
        };
    };
    // region Validators
    /** @inheritdoc */
    TransactionBuilder.prototype.validateAddress = function (address, addressFormat) {
        if (!utils_1.default.isValidAddress(address.address)) {
            throw new errors_2.AddressValidationError(address.address);
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateKey = function (_a) {
        var key = _a.key;
        var isValidPrivateKeyFromBytes;
        var isValidPrivateKeyFromHex = crypto_1.isValidEd25519Seed(key);
        var isValidPrivateKeyFromBase64 = crypto_1.isValidEd25519Seed(Buffer.from(key, 'base64').toString('hex'));
        try {
            var decodedSeed = utils_1.default.decodeSeed(key);
            isValidPrivateKeyFromBytes = crypto_1.isValidEd25519Seed(Buffer.from(decodedSeed.seed).toString('hex'));
        }
        catch (err) {
            isValidPrivateKeyFromBytes = false;
        }
        if (!isValidPrivateKeyFromBytes && !isValidPrivateKeyFromHex && !isValidPrivateKeyFromBase64) {
            throw new errors_1.BuildTransactionError("Key validation failed");
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateRawTransaction = function (rawTransaction) {
        var decodedTxn = txwrapper_polkadot_1.decode(rawTransaction, {
            metadataRpc: this._material.metadata,
            registry: this._registry,
        });
        var eraPeriod = decodedTxn.eraPeriod;
        var nonce = decodedTxn.nonce;
        var tip = decodedTxn.tip;
        if (utils_1.default.isSigningPayload(decodedTxn)) {
            var blockHash = decodedTxn.blockHash;
            var validationResult = txnSchema_1.SigningPayloadTransactionSchema.validate({
                eraPeriod: eraPeriod,
                blockHash: blockHash,
                nonce: nonce,
                tip: tip,
            });
            if (validationResult.error) {
                throw new errors_1.InvalidTransactionError("Transaction validation failed: " + validationResult.error.message);
            }
        }
        else {
            var sender = decodedTxn.address;
            var validationResult = txnSchema_1.SignedTransactionSchema.validate({
                sender: sender,
                nonce: nonce,
                eraPeriod: eraPeriod,
                tip: tip,
            });
            if (validationResult.error) {
                throw new errors_1.InvalidTransactionError("Transaction validation failed: " + validationResult.error.message);
            }
        }
        this.validateDecodedTransaction(decodedTxn, rawTransaction);
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateTransaction = function (_) {
        this.validateBaseFields(this._sender, this._blockNumber, this._referenceBlock, this._material.genesisHash, this._material.chainName, this._nonce, this._material.specVersion, this._material.specName, this._material.txVersion, this._eraPeriod, this._tip);
    };
    TransactionBuilder.prototype.validateBaseFields = function (sender, blockNumber, blockHash, genesisHash, chainName, nonce, specVersion, specName, transactionVersion, eraPeriod, tip) {
        var validationResult = txnSchema_1.BaseTransactionSchema.validate({
            sender: sender,
            blockNumber: blockNumber,
            blockHash: blockHash,
            genesisHash: genesisHash,
            chainName: chainName,
            nonce: nonce,
            specVersion: specVersion,
            specName: specName,
            transactionVersion: transactionVersion,
            eraPeriod: eraPeriod,
            tip: tip,
        });
        if (validationResult.error) {
            throw new errors_1.InvalidTransactionError("Transaction validation failed: " + validationResult.error.message);
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateValue = function (value) {
        if (value.isLessThan(0)) {
            throw new errors_1.BuildTransactionError('Value cannot be less than zero');
        }
    };
    // endregion
    /** @inheritdoc */
    TransactionBuilder.prototype.addSignature = function (publicKey, signature) {
        this._signatures.push({ publicKey: publicKey, signature: signature });
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.signImplementation = function (_a) {
        var key = _a.key;
        this._keyPair = new keyPair_1.KeyPair({ prv: key });
        return this._transaction;
    };
    return TransactionBuilder;
}(baseCoin_1.BaseTransactionBuilder));
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,