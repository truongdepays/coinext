"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithdrawUnstakedBuilder = void 0;
var txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var iface_1 = require("./iface");
var transactionBuilder_1 = require("./transactionBuilder");
var txnSchema_1 = require("./txnSchema");
var WithdrawUnstakedBuilder = /** @class */ (function (_super) {
    __extends(WithdrawUnstakedBuilder, _super);
    function WithdrawUnstakedBuilder(_coinConfig) {
        return _super.call(this, _coinConfig) || this;
    }
    /**
     *
     * Frees up any unlocked chunks.
     * The balance can now be used by the stash account to do whatever it wants.
     *
     * @returns {UnsignedTransaction} an unsigned Dot transaction
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#withdrawunbondednum_slashing_spans-u32
     */
    WithdrawUnstakedBuilder.prototype.buildTransaction = function () {
        var baseTxInfo = this.createBaseTxInfo();
        // TODO: The method changes the args type from number to string, verify it doesn't break anything
        return txwrapper_polkadot_1.methods.staking.withdrawUnbonded({
            numSlashingSpans: this._numSlashingSpans,
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
    };
    Object.defineProperty(WithdrawUnstakedBuilder.prototype, "transactionType", {
        get: function () {
            return baseCoin_1.TransactionType.StakingWithdraw;
        },
        enumerable: false,
        configurable: true
    });
    /**
     *
     * The number of slashing spans.
     *
     * @param {number} slashingSpans
     * @returns {WithdrawUnstakedBuilder} This withdrawUnstaked builder.
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#withdrawunbondednum_slashing_spans-u32
     */
    WithdrawUnstakedBuilder.prototype.slashingSpans = function (slashingSpans) {
        this.validateValue(new bignumber_js_1.default(slashingSpans));
        this._numSlashingSpans = slashingSpans;
        return this;
    };
    /** @inheritdoc */
    WithdrawUnstakedBuilder.prototype.validateDecodedTransaction = function (decodedTxn) {
        var _a;
        if (((_a = decodedTxn.method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.WithdrawUnbonded) {
            var txMethod = decodedTxn.method.args;
            var value = txMethod.numSlashingSpans;
            var validationResult = txnSchema_1.WithdrawUnstakedTransactionSchema.validate({ value: value });
            if (validationResult.error) {
                throw new errors_1.InvalidTransactionError("WithdrawUnstaked Transaction validation failed: " + validationResult.error.message);
            }
        }
    };
    /** @inheritdoc */
    WithdrawUnstakedBuilder.prototype.fromImplementation = function (rawTransaction) {
        var _a, _b;
        var tx = _super.prototype.fromImplementation.call(this, rawTransaction);
        if (((_a = this._method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.WithdrawUnbonded) {
            var txMethod = this._method.args;
            this.slashingSpans(txMethod.numSlashingSpans);
        }
        else {
            throw new errors_1.InvalidTransactionError("Invalid Transaction Type: " + ((_b = this._method) === null || _b === void 0 ? void 0 : _b.name) + ". Expected withdrawUnbonded");
        }
        return tx;
    };
    /** @inheritdoc */
    WithdrawUnstakedBuilder.prototype.validateTransaction = function (_) {
        _super.prototype.validateTransaction.call(this, _);
        this.validateFields(this._numSlashingSpans);
    };
    WithdrawUnstakedBuilder.prototype.validateFields = function (value) {
        var validationResult = txnSchema_1.WithdrawUnstakedTransactionSchema.validate({
            value: value,
        });
        if (validationResult.error) {
            throw new errors_1.InvalidTransactionError("WithdrawUnstaked Builder Transaction validation failed: " + validationResult.error.message);
        }
    };
    return WithdrawUnstakedBuilder;
}(transactionBuilder_1.TransactionBuilder));
exports.WithdrawUnstakedBuilder = WithdrawUnstakedBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aGRyYXdVbnN0YWtlZEJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29pbi9kb3Qvd2l0aGRyYXdVbnN0YWtlZEJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsb0VBQXdEO0FBQ3hELDhEQUFxQztBQUNyQyx3Q0FBOEM7QUFDOUMsNkNBQTZEO0FBQzdELGlDQUE0RDtBQUU1RCwyREFBMEQ7QUFDMUQseUNBQWdFO0FBRWhFO0lBQTZDLDJDQUFrQjtJQUc3RCxpQ0FBWSxXQUFpQztlQUMzQyxrQkFBTSxXQUFXLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ08sa0RBQWdCLEdBQTFCO1FBQ0UsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDM0MsaUdBQWlHO1FBQ2pHLE9BQU8sNEJBQU8sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQ3JDO1lBQ0UsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtTQUN6QyxFQUNELFVBQVUsQ0FBQyxVQUFVLEVBQ3JCLFVBQVUsQ0FBQyxPQUFPLENBQ25CLENBQUM7SUFDSixDQUFDO0lBRUQsc0JBQWMsb0RBQWU7YUFBN0I7WUFDRSxPQUFPLDBCQUFlLENBQUMsZUFBZSxDQUFDO1FBQ3pDLENBQUM7OztPQUFBO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCwrQ0FBYSxHQUFiLFVBQWMsYUFBcUI7UUFDakMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLHNCQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsYUFBYSxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGtCQUFrQjtJQUNsQiw0REFBMEIsR0FBMUIsVUFBMkIsVUFBbUQ7O1FBQzVFLElBQUksQ0FBQSxNQUFBLFVBQVUsQ0FBQyxNQUFNLDBDQUFFLElBQUksTUFBSyxtQkFBVyxDQUFDLGdCQUFnQixFQUFFO1lBQzVELElBQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBdUMsQ0FBQztZQUMzRSxJQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUM7WUFDeEMsSUFBTSxnQkFBZ0IsR0FBRyw2Q0FBaUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFDLENBQUM7WUFDL0UsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUU7Z0JBQzFCLE1BQU0sSUFBSSxnQ0FBdUIsQ0FDL0IscURBQW1ELGdCQUFnQixDQUFDLEtBQUssQ0FBQyxPQUFTLENBQ3BGLENBQUM7YUFDSDtTQUNGO0lBQ0gsQ0FBQztJQUVELGtCQUFrQjtJQUNSLG9EQUFrQixHQUE1QixVQUE2QixjQUFzQjs7UUFDakQsSUFBTSxFQUFFLEdBQUcsaUJBQU0sa0JBQWtCLFlBQUMsY0FBYyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFBLE1BQUEsSUFBSSxDQUFDLE9BQU8sMENBQUUsSUFBSSxNQUFLLG1CQUFXLENBQUMsZ0JBQWdCLEVBQUU7WUFDdkQsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUE0QixDQUFDO1lBQzNELElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDL0M7YUFBTTtZQUNMLE1BQU0sSUFBSSxnQ0FBdUIsQ0FBQyxnQ0FBNkIsTUFBQSxJQUFJLENBQUMsT0FBTywwQ0FBRSxJQUFJLGlDQUE2QixDQUFDLENBQUM7U0FDakg7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxrQkFBa0I7SUFDbEIscURBQW1CLEdBQW5CLFVBQW9CLENBQWM7UUFDaEMsaUJBQU0sbUJBQW1CLFlBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRU8sZ0RBQWMsR0FBdEIsVUFBdUIsS0FBYTtRQUNsQyxJQUFNLGdCQUFnQixHQUFHLDZDQUFpQyxDQUFDLFFBQVEsQ0FBQztZQUNsRSxLQUFLLE9BQUE7U0FDTixDQUFDLENBQUM7UUFFSCxJQUFJLGdCQUFnQixDQUFDLEtBQUssRUFBRTtZQUMxQixNQUFNLElBQUksZ0NBQXVCLENBQy9CLDZEQUEyRCxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsT0FBUyxDQUM1RixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBQ0gsOEJBQUM7QUFBRCxDQUFDLEFBMUZELENBQTZDLHVDQUFrQixHQTBGOUQ7QUExRlksMERBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUNvaW4gYXMgQ29pbkNvbmZpZyB9IGZyb20gJ0BiaXRnby9zdGF0aWNzJztcbmltcG9ydCB7IERlY29kZWRTaWduZWRUeCwgRGVjb2RlZFNpZ25pbmdQYXlsb2FkLCBVbnNpZ25lZFRyYW5zYWN0aW9uIH0gZnJvbSAnQHN1YnN0cmF0ZS90eHdyYXBwZXItY29yZSc7XG5pbXBvcnQgeyBtZXRob2RzIH0gZnJvbSAnQHN1YnN0cmF0ZS90eHdyYXBwZXItcG9sa2Fkb3QnO1xuaW1wb3J0IEJpZ051bWJlciBmcm9tICdiaWdudW1iZXIuanMnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25UeXBlIH0gZnJvbSAnLi4vYmFzZUNvaW4nO1xuaW1wb3J0IHsgSW52YWxpZFRyYW5zYWN0aW9uRXJyb3IgfSBmcm9tICcuLi9iYXNlQ29pbi9lcnJvcnMnO1xuaW1wb3J0IHsgTWV0aG9kTmFtZXMsIFdpdGhkcmF3VW5zdGFrZWRBcmdzIH0gZnJvbSAnLi9pZmFjZSc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJy4vdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25CdWlsZGVyIH0gZnJvbSAnLi90cmFuc2FjdGlvbkJ1aWxkZXInO1xuaW1wb3J0IHsgV2l0aGRyYXdVbnN0YWtlZFRyYW5zYWN0aW9uU2NoZW1hIH0gZnJvbSAnLi90eG5TY2hlbWEnO1xuXG5leHBvcnQgY2xhc3MgV2l0aGRyYXdVbnN0YWtlZEJ1aWxkZXIgZXh0ZW5kcyBUcmFuc2FjdGlvbkJ1aWxkZXIge1xuICBwcm90ZWN0ZWQgX251bVNsYXNoaW5nU3BhbnM6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihfY29pbkNvbmZpZzogUmVhZG9ubHk8Q29pbkNvbmZpZz4pIHtcbiAgICBzdXBlcihfY29pbkNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogRnJlZXMgdXAgYW55IHVubG9ja2VkIGNodW5rcy5cbiAgICogVGhlIGJhbGFuY2UgY2FuIG5vdyBiZSB1c2VkIGJ5IHRoZSBzdGFzaCBhY2NvdW50IHRvIGRvIHdoYXRldmVyIGl0IHdhbnRzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7VW5zaWduZWRUcmFuc2FjdGlvbn0gYW4gdW5zaWduZWQgRG90IHRyYW5zYWN0aW9uXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9wb2xrYWRvdC5qcy5vcmcvZG9jcy9zdWJzdHJhdGUvZXh0cmluc2ljcy8jd2l0aGRyYXd1bmJvbmRlZG51bV9zbGFzaGluZ19zcGFucy11MzJcbiAgICovXG4gIHByb3RlY3RlZCBidWlsZFRyYW5zYWN0aW9uKCk6IFVuc2lnbmVkVHJhbnNhY3Rpb24ge1xuICAgIGNvbnN0IGJhc2VUeEluZm8gPSB0aGlzLmNyZWF0ZUJhc2VUeEluZm8oKTtcbiAgICAvLyBUT0RPOiBUaGUgbWV0aG9kIGNoYW5nZXMgdGhlIGFyZ3MgdHlwZSBmcm9tIG51bWJlciB0byBzdHJpbmcsIHZlcmlmeSBpdCBkb2Vzbid0IGJyZWFrIGFueXRoaW5nXG4gICAgcmV0dXJuIG1ldGhvZHMuc3Rha2luZy53aXRoZHJhd1VuYm9uZGVkKFxuICAgICAge1xuICAgICAgICBudW1TbGFzaGluZ1NwYW5zOiB0aGlzLl9udW1TbGFzaGluZ1NwYW5zLFxuICAgICAgfSxcbiAgICAgIGJhc2VUeEluZm8uYmFzZVR4SW5mbyxcbiAgICAgIGJhc2VUeEluZm8ub3B0aW9ucyxcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldCB0cmFuc2FjdGlvblR5cGUoKTogVHJhbnNhY3Rpb25UeXBlIHtcbiAgICByZXR1cm4gVHJhbnNhY3Rpb25UeXBlLlN0YWtpbmdXaXRoZHJhdztcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBUaGUgbnVtYmVyIG9mIHNsYXNoaW5nIHNwYW5zLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2xhc2hpbmdTcGFuc1xuICAgKiBAcmV0dXJucyB7V2l0aGRyYXdVbnN0YWtlZEJ1aWxkZXJ9IFRoaXMgd2l0aGRyYXdVbnN0YWtlZCBidWlsZGVyLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vcG9sa2Fkb3QuanMub3JnL2RvY3Mvc3Vic3RyYXRlL2V4dHJpbnNpY3MvI3dpdGhkcmF3dW5ib25kZWRudW1fc2xhc2hpbmdfc3BhbnMtdTMyXG4gICAqL1xuICBzbGFzaGluZ1NwYW5zKHNsYXNoaW5nU3BhbnM6IG51bWJlcik6IHRoaXMge1xuICAgIHRoaXMudmFsaWRhdGVWYWx1ZShuZXcgQmlnTnVtYmVyKHNsYXNoaW5nU3BhbnMpKTtcbiAgICB0aGlzLl9udW1TbGFzaGluZ1NwYW5zID0gc2xhc2hpbmdTcGFucztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICB2YWxpZGF0ZURlY29kZWRUcmFuc2FjdGlvbihkZWNvZGVkVHhuOiBEZWNvZGVkU2lnbmluZ1BheWxvYWQgfCBEZWNvZGVkU2lnbmVkVHgpOiB2b2lkIHtcbiAgICBpZiAoZGVjb2RlZFR4bi5tZXRob2Q/Lm5hbWUgPT09IE1ldGhvZE5hbWVzLldpdGhkcmF3VW5ib25kZWQpIHtcbiAgICAgIGNvbnN0IHR4TWV0aG9kID0gZGVjb2RlZFR4bi5tZXRob2QuYXJncyBhcyB1bmtub3duIGFzIFdpdGhkcmF3VW5zdGFrZWRBcmdzO1xuICAgICAgY29uc3QgdmFsdWUgPSB0eE1ldGhvZC5udW1TbGFzaGluZ1NwYW5zO1xuICAgICAgY29uc3QgdmFsaWRhdGlvblJlc3VsdCA9IFdpdGhkcmF3VW5zdGFrZWRUcmFuc2FjdGlvblNjaGVtYS52YWxpZGF0ZSh7IHZhbHVlIH0pO1xuICAgICAgaWYgKHZhbGlkYXRpb25SZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRUcmFuc2FjdGlvbkVycm9yKFxuICAgICAgICAgIGBXaXRoZHJhd1Vuc3Rha2VkIFRyYW5zYWN0aW9uIHZhbGlkYXRpb24gZmFpbGVkOiAke3ZhbGlkYXRpb25SZXN1bHQuZXJyb3IubWVzc2FnZX1gLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBwcm90ZWN0ZWQgZnJvbUltcGxlbWVudGF0aW9uKHJhd1RyYW5zYWN0aW9uOiBzdHJpbmcpOiBUcmFuc2FjdGlvbiB7XG4gICAgY29uc3QgdHggPSBzdXBlci5mcm9tSW1wbGVtZW50YXRpb24ocmF3VHJhbnNhY3Rpb24pO1xuICAgIGlmICh0aGlzLl9tZXRob2Q/Lm5hbWUgPT09IE1ldGhvZE5hbWVzLldpdGhkcmF3VW5ib25kZWQpIHtcbiAgICAgIGNvbnN0IHR4TWV0aG9kID0gdGhpcy5fbWV0aG9kLmFyZ3MgYXMgV2l0aGRyYXdVbnN0YWtlZEFyZ3M7XG4gICAgICB0aGlzLnNsYXNoaW5nU3BhbnModHhNZXRob2QubnVtU2xhc2hpbmdTcGFucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkVHJhbnNhY3Rpb25FcnJvcihgSW52YWxpZCBUcmFuc2FjdGlvbiBUeXBlOiAke3RoaXMuX21ldGhvZD8ubmFtZX0uIEV4cGVjdGVkIHdpdGhkcmF3VW5ib25kZWRgKTtcbiAgICB9XG4gICAgcmV0dXJuIHR4O1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHZhbGlkYXRlVHJhbnNhY3Rpb24oXzogVHJhbnNhY3Rpb24pOiB2b2lkIHtcbiAgICBzdXBlci52YWxpZGF0ZVRyYW5zYWN0aW9uKF8pO1xuICAgIHRoaXMudmFsaWRhdGVGaWVsZHModGhpcy5fbnVtU2xhc2hpbmdTcGFucyk7XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlRmllbGRzKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCB2YWxpZGF0aW9uUmVzdWx0ID0gV2l0aGRyYXdVbnN0YWtlZFRyYW5zYWN0aW9uU2NoZW1hLnZhbGlkYXRlKHtcbiAgICAgIHZhbHVlLFxuICAgIH0pO1xuXG4gICAgaWYgKHZhbGlkYXRpb25SZXN1bHQuZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkVHJhbnNhY3Rpb25FcnJvcihcbiAgICAgICAgYFdpdGhkcmF3VW5zdGFrZWQgQnVpbGRlciBUcmFuc2FjdGlvbiB2YWxpZGF0aW9uIGZhaWxlZDogJHt2YWxpZGF0aW9uUmVzdWx0LmVycm9yLm1lc3NhZ2V9YCxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iXX0=