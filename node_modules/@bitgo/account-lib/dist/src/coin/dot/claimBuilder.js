"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClaimBuilder = void 0;
var txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var iface_1 = require("./iface");
var transactionBuilder_1 = require("./transactionBuilder");
var txnSchema_1 = require("./txnSchema");
var utils_1 = __importDefault(require("./utils"));
var ClaimBuilder = /** @class */ (function (_super) {
    __extends(ClaimBuilder, _super);
    function ClaimBuilder(_coinConfig) {
        return _super.call(this, _coinConfig) || this;
    }
    /**
     *
     * Pay out all the stakers behind a single validator for a single era.
     * Any account can create this transaction.
     *
     * @returns {UnsignedTransaction} an unsigned Dot transaction
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#payoutstakersvalidator_stash-accountid32-era-u32
     */
    ClaimBuilder.prototype.buildTransaction = function () {
        var baseTxInfo = this.createBaseTxInfo();
        return txwrapper_polkadot_1.methods.staking.payoutStakers({
            validatorStash: this._validatorStash,
            era: this._claimEra,
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
    };
    Object.defineProperty(ClaimBuilder.prototype, "transactionType", {
        /**
         * Get the transaction type.
         */
        get: function () {
            return baseCoin_1.TransactionType.StakingClaim;
        },
        enumerable: false,
        configurable: true
    });
    /**
     *
     * The stash account of the validator.
     *
     * @param {string} validatorStash
     * @returns {ClaimBuilder} This claim builder.
     *
     */
    ClaimBuilder.prototype.validatorStash = function (validatorStash) {
        this.validateAddress(validatorStash);
        this._validatorStash = validatorStash.address;
        return this;
    };
    /**
     * The era to claim.
     *
     * @param {string} claimEra
     * @returns {ClaimBuilder} This claim builder.
     *
     */
    ClaimBuilder.prototype.claimEra = function (claimEra) {
        this.validateValue(new bignumber_js_1.default(claimEra));
        this._claimEra = claimEra;
        return this;
    };
    /** @inheritdoc */
    ClaimBuilder.prototype.validateDecodedTransaction = function (decodedTxn) {
        var _a;
        if (((_a = decodedTxn.method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.PayoutStakers) {
            var txMethod = decodedTxn.method.args;
            var claimEra = txMethod.era;
            var validatorStash = txMethod.validatorStash;
            var validationResult = txnSchema_1.ClaimTransactionSchema.validate({ claimEra: claimEra, validatorStash: validatorStash });
            if (validationResult.error) {
                throw new errors_1.InvalidTransactionError("Claim Transaction validation failed: " + validationResult.error.message);
            }
        }
    };
    /** @inheritdoc */
    ClaimBuilder.prototype.fromImplementation = function (rawTransaction) {
        var _a, _b;
        var tx = _super.prototype.fromImplementation.call(this, rawTransaction);
        if (((_a = this._method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.PayoutStakers) {
            var txMethod = this._method.args;
            this.validatorStash({ address: utils_1.default.decodeDotAddress(txMethod.validatorStash) });
            this.claimEra(txMethod.era);
        }
        else {
            throw new errors_1.InvalidTransactionError("Invalid Transaction Type: " + ((_b = this._method) === null || _b === void 0 ? void 0 : _b.name) + ". Expected payoutStakers");
        }
        return tx;
    };
    /** @inheritdoc */
    ClaimBuilder.prototype.validateTransaction = function (_) {
        _super.prototype.validateTransaction.call(this, _);
        this.validateFields(this._claimEra, this._validatorStash);
    };
    /**
     *
     * The stash account of the validator.
     *
     * @param {string} claimEra
     * @param {string} validatorStash
     * @throws {Error} If the expected fields are not valid.
     *
     */
    ClaimBuilder.prototype.validateFields = function (claimEra, validatorStash) {
        var validationResult = txnSchema_1.ClaimTransactionSchema.validate({
            claimEra: claimEra,
            validatorStash: validatorStash,
        });
        if (validationResult.error) {
            throw new errors_1.InvalidTransactionError("Claim Builder Transaction validation failed: " + validationResult.error.message);
        }
    };
    return ClaimBuilder;
}(transactionBuilder_1.TransactionBuilder));
exports.ClaimBuilder = ClaimBuilder;
//# sourceMappingURL=data:application/json;base64,