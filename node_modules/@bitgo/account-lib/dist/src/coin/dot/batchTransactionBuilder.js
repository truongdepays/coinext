"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchTransactionBuilder = void 0;
var transactionBuilder_1 = require("./transactionBuilder");
var txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
var baseCoin_1 = require("../baseCoin");
var iface_1 = require("./iface");
var errors_1 = require("../baseCoin/errors");
var txnSchema_1 = require("./txnSchema");
var BatchTransactionBuilder = /** @class */ (function (_super) {
    __extends(BatchTransactionBuilder, _super);
    function BatchTransactionBuilder(_coinConfig) {
        return _super.call(this, _coinConfig) || this;
    }
    /** @inheritDoc */
    BatchTransactionBuilder.prototype.buildTransaction = function () {
        return this.buildBatchTransaction();
    };
    /**
     * Build a transaction which batches together multiple transactions.
     * The transactions which are batched together are passed in as an array of hex strings
     * which are composed of the method to call and the arguments to pass into the method.
     *
     * @returns {UnsignedTransaction}
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#batchcalls-veccall
     */
    BatchTransactionBuilder.prototype.buildBatchTransaction = function () {
        var baseTxInfo = this.createBaseTxInfo();
        return txwrapper_polkadot_1.methods.utility.batch({
            calls: this._calls,
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
    };
    Object.defineProperty(BatchTransactionBuilder.prototype, "transactionType", {
        get: function () {
            return baseCoin_1.TransactionType.Batch;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Set multiple unsigned transactions to be batched and broadcast as a single transaction
     *
     * @param {BatchCall[]} calls unsigned transactions
     * @returns {BatchTransactionBuilder} This batch transaction builder.
     */
    BatchTransactionBuilder.prototype.calls = function (calls) {
        this.validateCalls(calls);
        this._calls = calls;
        return this;
    };
    /** @inheritdoc */
    BatchTransactionBuilder.prototype.validateDecodedTransaction = function (decodedTxn) {
        var txMethod = decodedTxn.method.args;
        var validationResult = this.validateBatchTransactionFields(txMethod.calls);
        if (validationResult.error) {
            throw new errors_1.InvalidTransactionError("Transaction validation failed: " + validationResult.error.message);
        }
    };
    /** @inheritdoc */
    BatchTransactionBuilder.prototype.fromImplementation = function (rawTransaction) {
        var _this = this;
        var _a, _b;
        var tx = _super.prototype.fromImplementation.call(this, rawTransaction);
        if (((_a = this._method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.Batch) {
            var txMethod = this._method.args;
            if (!txMethod.calls) {
                throw new errors_1.InvalidTransactionError('failed to decode calls from batch transaction');
            }
            var callsToBatch_1 = [];
            txMethod.calls.forEach(function (call) {
                var method = call.callIndex;
                if (method === '0x1604') {
                    callsToBatch_1.push(_this.getAnonymousProxyCall(call));
                }
                else {
                    throw new errors_1.NotImplementedError("batching of transactions with index " + method + " unsupported");
                }
            });
            this.calls(callsToBatch_1);
        }
        else {
            throw new errors_1.InvalidTransactionError("Invalid Transaction Type: " + ((_b = this._method) === null || _b === void 0 ? void 0 : _b.name) + ". Expected " + iface_1.MethodNames.Batch);
        }
        return tx;
    };
    /** @inheritdoc */
    BatchTransactionBuilder.prototype.validateTransaction = function (_) {
        _super.prototype.validateTransaction.call(this, _);
        this.validateFields();
    };
    /**
     * Validate list of unsigned transactions added to batch
     *
     * @param {string[]} calls
     *
     */
    BatchTransactionBuilder.prototype.validateCalls = function (calls) {
        calls.forEach(function (call) {
            if (call.slice(0, 2) !== '0x') {
                // example: '0x160400000000000000'
                throw new errors_1.BuildTransactionError('call in string format must be hex format of a method and its arguments');
            }
        });
    };
    BatchTransactionBuilder.prototype.validateFields = function () {
        var validationResult = this.validateBatchTransactionFields(this._calls);
        if (validationResult.error) {
            throw new errors_1.InvalidTransactionError("AddressInitialization Transaction validation failed: " + validationResult.error.message);
        }
    };
    BatchTransactionBuilder.prototype.validateBatchTransactionFields = function (calls) {
        return txnSchema_1.BatchTransactionSchema.validate({
            calls: calls,
        });
    };
    BatchTransactionBuilder.prototype.getAnonymousProxyCall = function (callObject) {
        var _a, _b, _c;
        var baseTxInfo = this.createBaseTxInfo();
        var unsigned = txwrapper_polkadot_1.methods.proxy.anonymous({
            proxyType: (_a = callObject.args) === null || _a === void 0 ? void 0 : _a.proxy_type,
            index: (_b = callObject.args) === null || _b === void 0 ? void 0 : _b.index,
            delay: (_c = callObject.args) === null || _c === void 0 ? void 0 : _c.delay,
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
        return unsigned.method;
    };
    return BatchTransactionBuilder;
}(transactionBuilder_1.TransactionBuilder));
exports.BatchTransactionBuilder = BatchTransactionBuilder;
//# sourceMappingURL=data:application/json;base64,