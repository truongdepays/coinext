"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilderFactory = void 0;
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
var transferBuilder_1 = require("./transferBuilder");
var addressInitializationBuilder_1 = require("./addressInitializationBuilder");
var stakingBuilder_1 = require("./stakingBuilder");
var iface_1 = require("./iface");
var utils_1 = __importDefault(require("./utils"));
var _1 = require(".");
var unnominateBuilder_1 = require("./unnominateBuilder");
var singletonRegistry_1 = require("./singletonRegistry");
var TransactionBuilderFactory = /** @class */ (function (_super) {
    __extends(TransactionBuilderFactory, _super);
    function TransactionBuilderFactory(_coinConfig) {
        var _this = _super.call(this, _coinConfig) || this;
        _this._material = utils_1.default.getMaterial(_coinConfig);
        return _this;
    }
    TransactionBuilderFactory.prototype.getTransferBuilder = function () {
        return new transferBuilder_1.TransferBuilder(this._coinConfig).material(this._material);
    };
    TransactionBuilderFactory.prototype.getStakingBuilder = function () {
        return new stakingBuilder_1.StakingBuilder(this._coinConfig).material(this._material);
    };
    TransactionBuilderFactory.prototype.getAddressInitializationBuilder = function () {
        return new addressInitializationBuilder_1.AddressInitializationBuilder(this._coinConfig).material(this._material);
    };
    TransactionBuilderFactory.prototype.getBatchTransactionBuilder = function () {
        return new _1.BatchTransactionBuilder(this._coinConfig).material(this._material);
    };
    TransactionBuilderFactory.prototype.getWalletInitializationBuilder = function () {
        throw new errors_1.NotImplementedError("walletInitialization for " + this._coinConfig.name + " not implemented");
    };
    TransactionBuilderFactory.prototype.getUnstakeBuilder = function () {
        return new _1.UnstakeBuilder(this._coinConfig).material(this._material);
    };
    TransactionBuilderFactory.prototype.getWithdrawUnstakedBuilder = function () {
        return new _1.WithdrawUnstakedBuilder(this._coinConfig).material(this._material);
    };
    TransactionBuilderFactory.prototype.getClaimBuilder = function () {
        return new _1.ClaimBuilder(this._coinConfig).material(this._material);
    };
    TransactionBuilderFactory.prototype.getUnnominateBuilder = function () {
        return new unnominateBuilder_1.UnnominateBuilder(this._coinConfig);
    };
    TransactionBuilderFactory.prototype.from = function (rawTxn) {
        var builder = this.getBuilder(rawTxn);
        builder.from(rawTxn);
        return builder;
    };
    TransactionBuilderFactory.prototype.material = function (material) {
        this._material = material;
        return this;
    };
    TransactionBuilderFactory.prototype.getBuilder = function (rawTxn) {
        var _a;
        var registry = singletonRegistry_1.SingletonRegistry.getInstance(this._material);
        var decodedTxn = txwrapper_polkadot_1.decode(rawTxn, {
            metadataRpc: this._material.metadata,
            registry: registry,
        });
        var methodName = (_a = decodedTxn.method) === null || _a === void 0 ? void 0 : _a.name;
        if (methodName === iface_1.MethodNames.TransferKeepAlive || methodName === iface_1.MethodNames.Proxy) {
            return this.getTransferBuilder();
        }
        else if (methodName === iface_1.MethodNames.Bond) {
            return this.getStakingBuilder();
        }
        else if (methodName === iface_1.MethodNames.AddProxy) {
            return this.getAddressInitializationBuilder();
        }
        else if (methodName === iface_1.MethodNames.Unbond) {
            return this.getUnstakeBuilder();
        }
        else if (methodName === iface_1.MethodNames.Chill) {
            return this.getUnnominateBuilder();
        }
        else if (methodName === iface_1.MethodNames.WithdrawUnbonded) {
            return this.getWithdrawUnstakedBuilder();
        }
        else if (methodName === iface_1.MethodNames.PayoutStakers) {
            return this.getClaimBuilder();
        }
        else {
            throw new errors_1.NotSupported('Transaction cannot be parsed or has an unsupported transaction type');
        }
    };
    return TransactionBuilderFactory;
}(baseCoin_1.BaseTransactionBuilderFactory));
exports.TransactionBuilderFactory = TransactionBuilderFactory;
//# sourceMappingURL=data:application/json;base64,