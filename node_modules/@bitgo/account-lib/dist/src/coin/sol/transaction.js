"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var web3_js_1 = require("@solana/web3.js");
var bs58_1 = __importDefault(require("bs58"));
var utils_1 = require("./utils");
var instructionParamsFactory_1 = require("./instructionParamsFactory");
var constants_1 = require("./constants");
var UNAVAILABLE_TEXT = 'UNAVAILABLE';
var Transaction = /** @class */ (function (_super) {
    __extends(Transaction, _super);
    function Transaction(_coinConfig) {
        return _super.call(this, _coinConfig) || this;
    }
    Object.defineProperty(Transaction.prototype, "solTransaction", {
        get: function () {
            return this._solTransaction;
        },
        set: function (tx) {
            this._solTransaction = tx;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "numberOfRequiredSignatures", {
        get: function () {
            return this._solTransaction.compileMessage().header.numRequiredSignatures;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "signablePayload", {
        /** @inheritDoc */
        get: function () {
            return this._solTransaction.serializeMessage();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "id", {
        /** @inheritDoc **/
        get: function () {
            // Solana transaction ID === first signature: https://docs.solana.com/terminology#transaction-id
            if (this._solTransaction.signature) {
                return bs58_1.default.encode(this._solTransaction.signature);
            }
            else {
                return UNAVAILABLE_TEXT;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "lamportsPerSignature", {
        get: function () {
            return this._lamportsPerSignature;
        },
        set: function (lamportsPerSignature) {
            this._lamportsPerSignature = lamportsPerSignature;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "signature", {
        /** @inheritDoc */
        get: function () {
            var signatures = [];
            for (var _i = 0, _a = this._solTransaction.signatures; _i < _a.length; _i++) {
                var solSignature = _a[_i];
                if (solSignature.signature) {
                    signatures.push(bs58_1.default.encode(solSignature.signature));
                }
            }
            return signatures;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    Transaction.prototype.setTransactionType = function (transactionType) {
        this._type = transactionType;
    };
    /** @inheritdoc */
    Transaction.prototype.canSign = function () {
        return true;
    };
    /**
     * Signs transaction.
     *
     * @param {KeyPair} keyPair Signer keys.
     */
    Transaction.prototype.sign = function (keyPair) {
        return __awaiter(this, void 0, void 0, function () {
            var keyPairs, signers, _i, keyPairs_1, kp, keys;
            var _a;
            return __generator(this, function (_b) {
                if (!this._solTransaction || !this._solTransaction.recentBlockhash) {
                    throw new errors_1.SigningError('Nonce is required before signing');
                }
                if (!this._solTransaction || !this._solTransaction.feePayer) {
                    throw new errors_1.SigningError('feePayer is required before signing');
                }
                keyPairs = keyPair instanceof Array ? keyPair : [keyPair];
                signers = [];
                for (_i = 0, keyPairs_1 = keyPairs; _i < keyPairs_1.length; _i++) {
                    kp = keyPairs_1[_i];
                    keys = kp.getKeys(true);
                    if (!keys.prv) {
                        throw new errors_1.SigningError('Missing private key');
                    }
                    signers.push({ publicKey: new web3_js_1.PublicKey(keys.pub), secretKey: keys.prv });
                }
                try {
                    (_a = this._solTransaction).partialSign.apply(_a, signers);
                }
                catch (e) {
                    throw e;
                }
                return [2 /*return*/];
            });
        });
    };
    /** @inheritdoc */
    Transaction.prototype.toBroadcastFormat = function () {
        if (!this._solTransaction) {
            throw new errors_1.ParseTransactionError('Empty transaction');
        }
        // The signatures can have null signatures (which means they are required but yet unsigned)
        // In order to be able to serializer the txs, we have to change the requireAllSignatures based
        // on if the TX is fully signed or not
        var requireAllSignatures = utils_1.requiresAllSignatures(this._solTransaction.signatures);
        try {
            // Based on the recomendation encoding found here https://docs.solana.com/developing/clients/jsonrpc-api#sendtransaction
            // We use base64 encoding
            return this._solTransaction.serialize({ requireAllSignatures: requireAllSignatures }).toString('base64');
        }
        catch (e) {
            throw e;
        }
    };
    /**
     * Sets this transaction payload
     *
     * @param rawTransaction
     */
    Transaction.prototype.fromRawTransaction = function (rawTransaction) {
        try {
            utils_1.isValidRawTransaction(rawTransaction);
            this._solTransaction = web3_js_1.Transaction.from(Buffer.from(rawTransaction, 'base64'));
            if (this._solTransaction.signature && this._solTransaction.signature !== null) {
                this._id = bs58_1.default.encode(this._solTransaction.signature);
            }
            var transactionType = utils_1.getTransactionType(this._solTransaction);
            switch (transactionType) {
                case baseCoin_1.TransactionType.WalletInitialization:
                    this.setTransactionType(baseCoin_1.TransactionType.WalletInitialization);
                    break;
                case baseCoin_1.TransactionType.Send:
                    this.setTransactionType(baseCoin_1.TransactionType.Send);
                    break;
                case baseCoin_1.TransactionType.StakingActivate:
                    this.setTransactionType(baseCoin_1.TransactionType.StakingActivate);
                    break;
                case baseCoin_1.TransactionType.StakingDeactivate:
                    this.setTransactionType(baseCoin_1.TransactionType.StakingDeactivate);
                    break;
                case baseCoin_1.TransactionType.StakingWithdraw:
                    this.setTransactionType(baseCoin_1.TransactionType.StakingWithdraw);
                    break;
                case baseCoin_1.TransactionType.AssociatedTokenAccountInitialization:
                    this.setTransactionType(baseCoin_1.TransactionType.AssociatedTokenAccountInitialization);
                    break;
            }
            this.loadInputsAndOutputs();
        }
        catch (e) {
            throw e;
        }
    };
    /** @inheritdoc */
    Transaction.prototype.toJson = function () {
        var _a;
        if (!this._solTransaction) {
            throw new errors_1.ParseTransactionError('Empty transaction');
        }
        var durableNonce;
        if (this._solTransaction.nonceInfo) {
            var nonceInstruction = web3_js_1.SystemInstruction.decodeNonceAdvance(this._solTransaction.nonceInfo.nonceInstruction);
            durableNonce = {
                walletNonceAddress: nonceInstruction.noncePubkey.toString(),
                authWalletAddress: nonceInstruction.authorizedPubkey.toString(),
            };
        }
        var result = {
            id: this._solTransaction.signature ? this.id : undefined,
            feePayer: (_a = this._solTransaction.feePayer) === null || _a === void 0 ? void 0 : _a.toString(),
            lamportsPerSignature: this.lamportsPerSignature,
            nonce: this.getNonce(),
            durableNonce: durableNonce,
            numSignatures: this.signature.length,
            instructionsData: instructionParamsFactory_1.instructionParamsFactory(this._type, this._solTransaction.instructions),
        };
        return result;
    };
    /**
     * Get the nonce from the Solana Transaction
     * Throws if not set
     */
    Transaction.prototype.getNonce = function () {
        if (this._solTransaction.recentBlockhash) {
            return this._solTransaction.recentBlockhash;
        }
        else if (this._solTransaction.nonceInfo) {
            return this._solTransaction.nonceInfo.nonce;
        }
        else {
            throw new errors_1.InvalidTransactionError('Nonce is not set');
        }
    };
    /**
     * Load the input and output data on this transaction.
     */
    Transaction.prototype.loadInputsAndOutputs = function () {
        var _a;
        if (!this._solTransaction || ((_a = this._solTransaction.instructions) === null || _a === void 0 ? void 0 : _a.length) === 0) {
            return;
        }
        var outputs = [];
        var inputs = [];
        var instructionParams = instructionParamsFactory_1.instructionParamsFactory(this.type, this._solTransaction.instructions);
        for (var _i = 0, instructionParams_1 = instructionParams; _i < instructionParams_1.length; _i++) {
            var instruction = instructionParams_1[_i];
            switch (instruction.type) {
                case constants_1.InstructionBuilderTypes.CreateNonceAccount:
                    inputs.push({
                        address: instruction.params.fromAddress,
                        value: instruction.params.amount,
                        coin: this._coinConfig.name,
                    });
                    break;
                case constants_1.InstructionBuilderTypes.Transfer:
                    inputs.push({
                        address: instruction.params.fromAddress,
                        value: instruction.params.amount,
                        coin: this._coinConfig.name,
                    });
                    outputs.push({
                        address: instruction.params.toAddress,
                        value: instruction.params.amount,
                        coin: this._coinConfig.name,
                    });
                    break;
                case constants_1.InstructionBuilderTypes.TokenTransfer:
                    inputs.push({
                        address: instruction.params.fromAddress,
                        value: instruction.params.amount,
                        coin: instruction.params.tokenName,
                    });
                    outputs.push({
                        address: instruction.params.toAddress,
                        value: instruction.params.amount,
                        coin: instruction.params.tokenName,
                    });
                    break;
                case constants_1.InstructionBuilderTypes.StakingActivate:
                    inputs.push({
                        address: instruction.params.fromAddress,
                        value: instruction.params.amount,
                        coin: this._coinConfig.name,
                    });
                    outputs.push({
                        address: instruction.params.stakingAddress,
                        value: instruction.params.amount,
                        coin: this._coinConfig.name,
                    });
                    break;
                case constants_1.InstructionBuilderTypes.StakingWithdraw:
                    inputs.push({
                        address: instruction.params.stakingAddress,
                        value: instruction.params.amount,
                        coin: this._coinConfig.name,
                    });
                    outputs.push({
                        address: instruction.params.fromAddress,
                        value: instruction.params.amount,
                        coin: this._coinConfig.name,
                    });
                    break;
                case constants_1.InstructionBuilderTypes.CreateAssociatedTokenAccount:
                    // taken care of in subclass
                    break;
            }
        }
        this._outputs = outputs;
        this._inputs = inputs;
    };
    /** @inheritDoc */
    Transaction.prototype.explainTransaction = function () {
        var decodedInstructions = instructionParamsFactory_1.instructionParamsFactory(this._type, this._solTransaction.instructions);
        var memo = undefined;
        var durableNonce = undefined;
        var outputAmount = new bignumber_js_1.default(0);
        var outputs = [];
        for (var _i = 0, decodedInstructions_1 = decodedInstructions; _i < decodedInstructions_1.length; _i++) {
            var instruction = decodedInstructions_1[_i];
            switch (instruction.type) {
                case constants_1.InstructionBuilderTypes.NonceAdvance:
                    durableNonce = instruction.params;
                    break;
                case constants_1.InstructionBuilderTypes.Memo:
                    memo = instruction.params.memo;
                    break;
                case constants_1.InstructionBuilderTypes.Transfer:
                    var transferInstruction = instruction;
                    outputs.push({
                        address: transferInstruction.params.toAddress,
                        amount: transferInstruction.params.amount,
                    });
                    outputAmount = outputAmount.plus(transferInstruction.params.amount);
                    break;
                case constants_1.InstructionBuilderTypes.TokenTransfer:
                    var tokenTransferInstruction = instruction;
                    outputs.push({
                        address: tokenTransferInstruction.params.toAddress,
                        amount: tokenTransferInstruction.params.amount,
                        tokenName: tokenTransferInstruction.params.tokenName,
                    });
                    break;
                case constants_1.InstructionBuilderTypes.CreateNonceAccount:
                    var createInstruction = instruction;
                    outputs.push({
                        address: createInstruction.params.nonceAddress,
                        amount: createInstruction.params.amount,
                    });
                    outputAmount = outputAmount.plus(createInstruction.params.amount);
                    break;
                case constants_1.InstructionBuilderTypes.StakingActivate:
                    var stakingActivateInstruction = instruction;
                    outputs.push({
                        address: stakingActivateInstruction.params.stakingAddress,
                        amount: stakingActivateInstruction.params.amount,
                    });
                    outputAmount = outputAmount.plus(stakingActivateInstruction.params.amount);
                    break;
                case constants_1.InstructionBuilderTypes.StakingWithdraw:
                    var stakingWithdrawInstruction = instruction;
                    outputs.push({
                        address: stakingWithdrawInstruction.params.fromAddress,
                        amount: stakingWithdrawInstruction.params.amount,
                    });
                    outputAmount = outputAmount.plus(stakingWithdrawInstruction.params.amount);
                    break;
                case constants_1.InstructionBuilderTypes.CreateAssociatedTokenAccount:
                    // taken care of in subclass
                    break;
                default:
                    continue;
            }
        }
        return this.getExplainedTransaction(outputAmount, outputs, memo, durableNonce);
    };
    Transaction.prototype.getExplainedTransaction = function (outputAmount, outputs, memo, durableNonce) {
        if (memo === void 0) { memo = undefined; }
        if (durableNonce === void 0) { durableNonce = undefined; }
        var feeString = this.lamportsPerSignature
            ? new bignumber_js_1.default(this.lamportsPerSignature).multipliedBy(this.numberOfRequiredSignatures).toFixed(0)
            : UNAVAILABLE_TEXT;
        return {
            displayOrder: [
                'id',
                'type',
                'blockhash',
                'durableNonce',
                'outputAmount',
                'changeAmount',
                'outputs',
                'changeOutputs',
                'fee',
                'memo',
            ],
            id: this.id,
            type: baseCoin_1.TransactionType[this.type].toString(),
            changeOutputs: [],
            changeAmount: '0',
            outputAmount: outputAmount.toFixed(0),
            outputs: outputs,
            fee: {
                fee: feeString,
                feeRate: this.lamportsPerSignature,
            },
            memo: memo,
            blockhash: this.getNonce(),
            durableNonce: durableNonce,
        };
    };
    return Transaction;
}(baseCoin_1.BaseTransaction));
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,