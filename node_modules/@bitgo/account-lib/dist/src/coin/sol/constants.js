"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ataInitInstructionIndexes = exports.stakingWithdrawInstructionsIndexes = exports.stakingDeactivateInstructionsIndexes = exports.stakingActivateInstructionsIndexes = exports.walletInitInstructionIndexes = exports.VALID_SYSTEM_INSTRUCTION_TYPES = exports.InstructionBuilderTypes = exports.ValidInstructionTypesEnum = exports.MAX_MEMO_LENGTH = exports.SEED_LENGTH = exports.MEMO_PROGRAM_PK = void 0;
exports.MEMO_PROGRAM_PK = 'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr';
exports.SEED_LENGTH = 32;
exports.MAX_MEMO_LENGTH = 100;
// Sdk instructions, mainly to check decoded types.
var ValidInstructionTypesEnum;
(function (ValidInstructionTypesEnum) {
    ValidInstructionTypesEnum["AdvanceNonceAccount"] = "AdvanceNonceAccount";
    ValidInstructionTypesEnum["Create"] = "Create";
    ValidInstructionTypesEnum["InitializeNonceAccount"] = "InitializeNonceAccount";
    ValidInstructionTypesEnum["StakingInitialize"] = "Initialize";
    ValidInstructionTypesEnum["StakingDelegate"] = "Delegate";
    ValidInstructionTypesEnum["StakingDeactivate"] = "Deactivate";
    ValidInstructionTypesEnum["StakingWithdraw"] = "Withdraw";
    ValidInstructionTypesEnum["Transfer"] = "Transfer";
    ValidInstructionTypesEnum["TokenTransfer"] = "TokenTransfer";
    ValidInstructionTypesEnum["Memo"] = "Memo";
    ValidInstructionTypesEnum["InitializeAssociatedTokenAccount"] = "InitializeAssociatedTokenAccount";
})(ValidInstructionTypesEnum = exports.ValidInstructionTypesEnum || (exports.ValidInstructionTypesEnum = {}));
// Internal instructions types
var InstructionBuilderTypes;
(function (InstructionBuilderTypes) {
    InstructionBuilderTypes["CreateNonceAccount"] = "CreateNonceAccount";
    InstructionBuilderTypes["StakingActivate"] = "Activate";
    InstructionBuilderTypes["StakingDeactivate"] = "Deactivate";
    InstructionBuilderTypes["StakingWithdraw"] = "Withdraw";
    InstructionBuilderTypes["Transfer"] = "Transfer";
    InstructionBuilderTypes["Memo"] = "Memo";
    InstructionBuilderTypes["NonceAdvance"] = "NonceAdvance";
    InstructionBuilderTypes["CreateAssociatedTokenAccount"] = "CreateAssociatedTokenAccount";
    InstructionBuilderTypes["TokenTransfer"] = "TokenTransfer";
})(InstructionBuilderTypes = exports.InstructionBuilderTypes || (exports.InstructionBuilderTypes = {}));
exports.VALID_SYSTEM_INSTRUCTION_TYPES = [
    ValidInstructionTypesEnum.AdvanceNonceAccount,
    ValidInstructionTypesEnum.Create,
    ValidInstructionTypesEnum.StakingInitialize,
    ValidInstructionTypesEnum.StakingDelegate,
    ValidInstructionTypesEnum.StakingDeactivate,
    ValidInstructionTypesEnum.StakingWithdraw,
    ValidInstructionTypesEnum.Transfer,
    ValidInstructionTypesEnum.InitializeNonceAccount,
    ValidInstructionTypesEnum.Memo,
    ValidInstructionTypesEnum.InitializeAssociatedTokenAccount,
    ValidInstructionTypesEnum.TokenTransfer,
];
/** Const to check the order of the Wallet Init instructions when decode */
exports.walletInitInstructionIndexes = {
    Create: 0,
    InitializeNonceAccount: 1,
    Memo: 2,
};
/** Const to check the order of the Staking Activate instructions when decode */
exports.stakingActivateInstructionsIndexes = {
    Create: 0,
    Initialize: 1,
    Delegate: 2,
    Memo: 3,
};
/** Const to check the order of the Staking Deactivate instructions when decode */
exports.stakingDeactivateInstructionsIndexes = {
    Deactivate: 0,
    Memo: 1,
};
/** Const to check the order of the Staking Withdraw instructions when decode */
exports.stakingWithdrawInstructionsIndexes = {
    Withdraw: 0,
    Memo: 1,
};
/** Const to check the order of the ATA init instructions when decode */
exports.ataInitInstructionIndexes = {
    InitializeAssociatedTokenAccount: 0,
    Memo: 1,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvaW4vc29sL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFYSxRQUFBLGVBQWUsR0FBRyw2Q0FBNkMsQ0FBQztBQUVoRSxRQUFBLFdBQVcsR0FBRyxFQUFFLENBQUM7QUFFakIsUUFBQSxlQUFlLEdBQUcsR0FBRyxDQUFDO0FBRW5DLG1EQUFtRDtBQUNuRCxJQUFZLHlCQVlYO0FBWkQsV0FBWSx5QkFBeUI7SUFDbkMsd0VBQTJDLENBQUE7SUFDM0MsOENBQWlCLENBQUE7SUFDakIsOEVBQWlELENBQUE7SUFDakQsNkRBQWdDLENBQUE7SUFDaEMseURBQTRCLENBQUE7SUFDNUIsNkRBQWdDLENBQUE7SUFDaEMseURBQTRCLENBQUE7SUFDNUIsa0RBQXFCLENBQUE7SUFDckIsNERBQStCLENBQUE7SUFDL0IsMENBQWEsQ0FBQTtJQUNiLGtHQUFxRSxDQUFBO0FBQ3ZFLENBQUMsRUFaVyx5QkFBeUIsR0FBekIsaUNBQXlCLEtBQXpCLGlDQUF5QixRQVlwQztBQUVELDhCQUE4QjtBQUM5QixJQUFZLHVCQVVYO0FBVkQsV0FBWSx1QkFBdUI7SUFDakMsb0VBQXlDLENBQUE7SUFDekMsdURBQTRCLENBQUE7SUFDNUIsMkRBQWdDLENBQUE7SUFDaEMsdURBQTRCLENBQUE7SUFDNUIsZ0RBQXFCLENBQUE7SUFDckIsd0NBQWEsQ0FBQTtJQUNiLHdEQUE2QixDQUFBO0lBQzdCLHdGQUE2RCxDQUFBO0lBQzdELDBEQUErQixDQUFBO0FBQ2pDLENBQUMsRUFWVyx1QkFBdUIsR0FBdkIsK0JBQXVCLEtBQXZCLCtCQUF1QixRQVVsQztBQUVZLFFBQUEsOEJBQThCLEdBQTRCO0lBQ3JFLHlCQUF5QixDQUFDLG1CQUFtQjtJQUM3Qyx5QkFBeUIsQ0FBQyxNQUFNO0lBQ2hDLHlCQUF5QixDQUFDLGlCQUFpQjtJQUMzQyx5QkFBeUIsQ0FBQyxlQUFlO0lBQ3pDLHlCQUF5QixDQUFDLGlCQUFpQjtJQUMzQyx5QkFBeUIsQ0FBQyxlQUFlO0lBQ3pDLHlCQUF5QixDQUFDLFFBQVE7SUFDbEMseUJBQXlCLENBQUMsc0JBQXNCO0lBQ2hELHlCQUF5QixDQUFDLElBQUk7SUFDOUIseUJBQXlCLENBQUMsZ0NBQWdDO0lBQzFELHlCQUF5QixDQUFDLGFBQWE7Q0FDeEMsQ0FBQztBQUVGLDJFQUEyRTtBQUM5RCxRQUFBLDRCQUE0QixHQUFHO0lBQzFDLE1BQU0sRUFBRSxDQUFDO0lBQ1Qsc0JBQXNCLEVBQUUsQ0FBQztJQUN6QixJQUFJLEVBQUUsQ0FBQztDQUNDLENBQUM7QUFFWCxnRkFBZ0Y7QUFDbkUsUUFBQSxrQ0FBa0MsR0FBRztJQUNoRCxNQUFNLEVBQUUsQ0FBQztJQUNULFVBQVUsRUFBRSxDQUFDO0lBQ2IsUUFBUSxFQUFFLENBQUM7SUFDWCxJQUFJLEVBQUUsQ0FBQztDQUNDLENBQUM7QUFFWCxrRkFBa0Y7QUFDckUsUUFBQSxvQ0FBb0MsR0FBRztJQUNsRCxVQUFVLEVBQUUsQ0FBQztJQUNiLElBQUksRUFBRSxDQUFDO0NBQ0MsQ0FBQztBQUVYLGdGQUFnRjtBQUNuRSxRQUFBLGtDQUFrQyxHQUFHO0lBQ2hELFFBQVEsRUFBRSxDQUFDO0lBQ1gsSUFBSSxFQUFFLENBQUM7Q0FDQyxDQUFDO0FBRVgsd0VBQXdFO0FBQzNELFFBQUEseUJBQXlCLEdBQUc7SUFDdkMsZ0NBQWdDLEVBQUUsQ0FBQztJQUNuQyxJQUFJLEVBQUUsQ0FBQztDQUNDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWYWxpZEluc3RydWN0aW9uVHlwZXMgfSBmcm9tICcuL2lmYWNlJztcblxuZXhwb3J0IGNvbnN0IE1FTU9fUFJPR1JBTV9QSyA9ICdNZW1vU3E0Z3FBQkFYS2I5NnFuSDhUeXNOY1d4TXlXQ3FYZ0RMR21mY0hyJztcblxuZXhwb3J0IGNvbnN0IFNFRURfTEVOR1RIID0gMzI7XG5cbmV4cG9ydCBjb25zdCBNQVhfTUVNT19MRU5HVEggPSAxMDA7XG5cbi8vIFNkayBpbnN0cnVjdGlvbnMsIG1haW5seSB0byBjaGVjayBkZWNvZGVkIHR5cGVzLlxuZXhwb3J0IGVudW0gVmFsaWRJbnN0cnVjdGlvblR5cGVzRW51bSB7XG4gIEFkdmFuY2VOb25jZUFjY291bnQgPSAnQWR2YW5jZU5vbmNlQWNjb3VudCcsXG4gIENyZWF0ZSA9ICdDcmVhdGUnLFxuICBJbml0aWFsaXplTm9uY2VBY2NvdW50ID0gJ0luaXRpYWxpemVOb25jZUFjY291bnQnLFxuICBTdGFraW5nSW5pdGlhbGl6ZSA9ICdJbml0aWFsaXplJyxcbiAgU3Rha2luZ0RlbGVnYXRlID0gJ0RlbGVnYXRlJyxcbiAgU3Rha2luZ0RlYWN0aXZhdGUgPSAnRGVhY3RpdmF0ZScsXG4gIFN0YWtpbmdXaXRoZHJhdyA9ICdXaXRoZHJhdycsXG4gIFRyYW5zZmVyID0gJ1RyYW5zZmVyJyxcbiAgVG9rZW5UcmFuc2ZlciA9ICdUb2tlblRyYW5zZmVyJyxcbiAgTWVtbyA9ICdNZW1vJyxcbiAgSW5pdGlhbGl6ZUFzc29jaWF0ZWRUb2tlbkFjY291bnQgPSAnSW5pdGlhbGl6ZUFzc29jaWF0ZWRUb2tlbkFjY291bnQnLFxufVxuXG4vLyBJbnRlcm5hbCBpbnN0cnVjdGlvbnMgdHlwZXNcbmV4cG9ydCBlbnVtIEluc3RydWN0aW9uQnVpbGRlclR5cGVzIHtcbiAgQ3JlYXRlTm9uY2VBY2NvdW50ID0gJ0NyZWF0ZU5vbmNlQWNjb3VudCcsXG4gIFN0YWtpbmdBY3RpdmF0ZSA9ICdBY3RpdmF0ZScsXG4gIFN0YWtpbmdEZWFjdGl2YXRlID0gJ0RlYWN0aXZhdGUnLFxuICBTdGFraW5nV2l0aGRyYXcgPSAnV2l0aGRyYXcnLFxuICBUcmFuc2ZlciA9ICdUcmFuc2ZlcicsXG4gIE1lbW8gPSAnTWVtbycsXG4gIE5vbmNlQWR2YW5jZSA9ICdOb25jZUFkdmFuY2UnLFxuICBDcmVhdGVBc3NvY2lhdGVkVG9rZW5BY2NvdW50ID0gJ0NyZWF0ZUFzc29jaWF0ZWRUb2tlbkFjY291bnQnLFxuICBUb2tlblRyYW5zZmVyID0gJ1Rva2VuVHJhbnNmZXInLFxufVxuXG5leHBvcnQgY29uc3QgVkFMSURfU1lTVEVNX0lOU1RSVUNUSU9OX1RZUEVTOiBWYWxpZEluc3RydWN0aW9uVHlwZXNbXSA9IFtcbiAgVmFsaWRJbnN0cnVjdGlvblR5cGVzRW51bS5BZHZhbmNlTm9uY2VBY2NvdW50LFxuICBWYWxpZEluc3RydWN0aW9uVHlwZXNFbnVtLkNyZWF0ZSxcbiAgVmFsaWRJbnN0cnVjdGlvblR5cGVzRW51bS5TdGFraW5nSW5pdGlhbGl6ZSxcbiAgVmFsaWRJbnN0cnVjdGlvblR5cGVzRW51bS5TdGFraW5nRGVsZWdhdGUsXG4gIFZhbGlkSW5zdHJ1Y3Rpb25UeXBlc0VudW0uU3Rha2luZ0RlYWN0aXZhdGUsXG4gIFZhbGlkSW5zdHJ1Y3Rpb25UeXBlc0VudW0uU3Rha2luZ1dpdGhkcmF3LFxuICBWYWxpZEluc3RydWN0aW9uVHlwZXNFbnVtLlRyYW5zZmVyLFxuICBWYWxpZEluc3RydWN0aW9uVHlwZXNFbnVtLkluaXRpYWxpemVOb25jZUFjY291bnQsXG4gIFZhbGlkSW5zdHJ1Y3Rpb25UeXBlc0VudW0uTWVtbyxcbiAgVmFsaWRJbnN0cnVjdGlvblR5cGVzRW51bS5Jbml0aWFsaXplQXNzb2NpYXRlZFRva2VuQWNjb3VudCxcbiAgVmFsaWRJbnN0cnVjdGlvblR5cGVzRW51bS5Ub2tlblRyYW5zZmVyLFxuXTtcblxuLyoqIENvbnN0IHRvIGNoZWNrIHRoZSBvcmRlciBvZiB0aGUgV2FsbGV0IEluaXQgaW5zdHJ1Y3Rpb25zIHdoZW4gZGVjb2RlICovXG5leHBvcnQgY29uc3Qgd2FsbGV0SW5pdEluc3RydWN0aW9uSW5kZXhlcyA9IHtcbiAgQ3JlYXRlOiAwLFxuICBJbml0aWFsaXplTm9uY2VBY2NvdW50OiAxLFxuICBNZW1vOiAyLFxufSBhcyBjb25zdDtcblxuLyoqIENvbnN0IHRvIGNoZWNrIHRoZSBvcmRlciBvZiB0aGUgU3Rha2luZyBBY3RpdmF0ZSBpbnN0cnVjdGlvbnMgd2hlbiBkZWNvZGUgKi9cbmV4cG9ydCBjb25zdCBzdGFraW5nQWN0aXZhdGVJbnN0cnVjdGlvbnNJbmRleGVzID0ge1xuICBDcmVhdGU6IDAsXG4gIEluaXRpYWxpemU6IDEsXG4gIERlbGVnYXRlOiAyLFxuICBNZW1vOiAzLFxufSBhcyBjb25zdDtcblxuLyoqIENvbnN0IHRvIGNoZWNrIHRoZSBvcmRlciBvZiB0aGUgU3Rha2luZyBEZWFjdGl2YXRlIGluc3RydWN0aW9ucyB3aGVuIGRlY29kZSAqL1xuZXhwb3J0IGNvbnN0IHN0YWtpbmdEZWFjdGl2YXRlSW5zdHJ1Y3Rpb25zSW5kZXhlcyA9IHtcbiAgRGVhY3RpdmF0ZTogMCxcbiAgTWVtbzogMSxcbn0gYXMgY29uc3Q7XG5cbi8qKiBDb25zdCB0byBjaGVjayB0aGUgb3JkZXIgb2YgdGhlIFN0YWtpbmcgV2l0aGRyYXcgaW5zdHJ1Y3Rpb25zIHdoZW4gZGVjb2RlICovXG5leHBvcnQgY29uc3Qgc3Rha2luZ1dpdGhkcmF3SW5zdHJ1Y3Rpb25zSW5kZXhlcyA9IHtcbiAgV2l0aGRyYXc6IDAsXG4gIE1lbW86IDEsXG59IGFzIGNvbnN0O1xuXG4vKiogQ29uc3QgdG8gY2hlY2sgdGhlIG9yZGVyIG9mIHRoZSBBVEEgaW5pdCBpbnN0cnVjdGlvbnMgd2hlbiBkZWNvZGUgKi9cbmV4cG9ydCBjb25zdCBhdGFJbml0SW5zdHJ1Y3Rpb25JbmRleGVzID0ge1xuICBJbml0aWFsaXplQXNzb2NpYXRlZFRva2VuQWNjb3VudDogMCxcbiAgTWVtbzogMSxcbn0gYXMgY29uc3Q7XG4iXX0=