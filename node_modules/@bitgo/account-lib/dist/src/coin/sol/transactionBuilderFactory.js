"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilderFactory = void 0;
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var transferBuilder_1 = require("./transferBuilder");
var walletInitializationBuilder_1 = require("./walletInitializationBuilder");
var stakingActivateBuilder_1 = require("./stakingActivateBuilder");
var stakingDeactivateBuilder_1 = require("./stakingDeactivateBuilder");
var transaction_1 = require("./transaction");
var utils_1 = require("./utils");
var stakingWithdrawBuilder_1 = require("./stakingWithdrawBuilder");
var ataInitializationBuilder_1 = require("./ataInitializationBuilder");
var ataInitializationTransaction_1 = require("./ataInitializationTransaction");
var tokenTransferBuilder_1 = require("./tokenTransferBuilder");
var TransactionBuilderFactory = /** @class */ (function (_super) {
    __extends(TransactionBuilderFactory, _super);
    function TransactionBuilderFactory(_coinConfig) {
        return _super.call(this, _coinConfig) || this;
    }
    /**
     * Returns a proper builder for the given encoded transaction
     *
     * @param { string} raw - Encoded transaction in base64 string format
     */
    TransactionBuilderFactory.prototype.from = function (raw) {
        utils_1.validateRawTransaction(raw);
        var tx = this.parseTransaction(raw);
        try {
            switch (tx.type) {
                case baseCoin_1.TransactionType.Send:
                    if (tx.inputs[0].coin === 'sol' || tx.inputs[0].coin === 'tsol') {
                        return this.getTransferBuilder(tx);
                    }
                    else {
                        return this.getTokenTransferBuilder(tx);
                    }
                case baseCoin_1.TransactionType.WalletInitialization:
                    return this.getWalletInitializationBuilder(tx);
                case baseCoin_1.TransactionType.StakingActivate:
                    return this.getStakingActivateBuilder(tx);
                case baseCoin_1.TransactionType.StakingDeactivate:
                    return this.getStakingDeactivateBuilder(tx);
                case baseCoin_1.TransactionType.StakingWithdraw:
                    return this.getStakingWithdrawBuilder(tx);
                case baseCoin_1.TransactionType.AssociatedTokenAccountInitialization:
                    var ataTx = new ataInitializationTransaction_1.AtaInitializationTransaction(this._coinConfig);
                    ataTx.fromRawTransaction(raw);
                    return this.getAtaInitializationBuilder(ataTx);
                default:
                    throw new errors_1.InvalidTransactionError('Invalid transaction');
            }
        }
        catch (e) {
            throw e;
        }
    };
    /** @inheritdoc */
    TransactionBuilderFactory.prototype.getWalletInitializationBuilder = function (tx) {
        return this.initializeBuilder(tx, new walletInitializationBuilder_1.WalletInitializationBuilder(this._coinConfig));
    };
    /** @inheritdoc */
    TransactionBuilderFactory.prototype.getTransferBuilder = function (tx) {
        return this.initializeBuilder(tx, new transferBuilder_1.TransferBuilder(this._coinConfig));
    };
    /** @inheritdoc */
    TransactionBuilderFactory.prototype.getTokenTransferBuilder = function (tx) {
        return this.initializeBuilder(tx, new tokenTransferBuilder_1.TokenTransferBuilder(this._coinConfig));
    };
    /**
     * Returns the staking builder to create a staking account and also a delegate in one transaction.
     * once the tx reach the network it will automatically by activated on next epoch
     *
     * @see https://docs.solana.com/cluster/stake-delegation-and-rewards#stake-warmup-cooldown-withdrawal
     *
     * @param {Transaction} tx - the transaction to be used to initialize the builder
     * @returns {StakingDeactivateBuilder} - the initialized staking activate builder
     */
    TransactionBuilderFactory.prototype.getStakingActivateBuilder = function (tx) {
        return this.initializeBuilder(tx, new stakingActivateBuilder_1.StakingActivateBuilder(this._coinConfig));
    };
    /**
     * Returns the builder to create a staking deactivate transaction.
     * Deactivated is set in the current epoch + cooldown
     * The account's stake will ramp down to zero by that epoch, and the lamports will be available for withdrawal.
     *
     * @see https://docs.solana.com/cluster/stake-delegation-and-rewards#stake-warmup-cooldown-withdrawal
     *
     * @param {Transaction} tx - the transaction to be used to initialize the builder
     * @returns {StakingDeactivateBuilder} - the initialized staking deactivate builder
     */
    TransactionBuilderFactory.prototype.getStakingDeactivateBuilder = function (tx) {
        return this.initializeBuilder(tx, new stakingDeactivateBuilder_1.StakingDeactivateBuilder(this._coinConfig));
    };
    /**
     * Returns the builder to create a staking withdraw transaction.
     * once the staking account reach 0 SOL it will not be traceable anymore by the network
     *
     * @see https://docs.solana.com/staking/stake-accounts#destroying-a-stake-account
     *
     * @param {Transaction} tx - the transaction to be used to intialize the builder
     * @returns {StakingWithdrawBuilder} - the initialized staking withdraw builder
     */
    TransactionBuilderFactory.prototype.getStakingWithdrawBuilder = function (tx) {
        return this.initializeBuilder(tx, new stakingWithdrawBuilder_1.StakingWithdrawBuilder(this._coinConfig));
    };
    /**
     * Returns the builder to create a create associated token account transaction.
     */
    TransactionBuilderFactory.prototype.getAtaInitializationBuilder = function (tx) {
        return this.initializeBuilder(tx, new ataInitializationBuilder_1.AtaInitializationBuilder(this._coinConfig));
    };
    /**
     * Initialize the builder with the given transaction
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @param {TransactionBuilder} builder - the builder to be initialized
     * @returns {TransactionBuilder} the builder initialized
     */
    TransactionBuilderFactory.prototype.initializeBuilder = function (tx, builder) {
        if (tx) {
            builder.initBuilder(tx);
        }
        return builder;
    };
    /** Parse the transaction from a raw transaction
     *
     * @param {string} rawTransaction - the raw tx
     * @returns {Transaction} parsed transaction
     */
    TransactionBuilderFactory.prototype.parseTransaction = function (rawTransaction) {
        var tx = new transaction_1.Transaction(this._coinConfig);
        tx.fromRawTransaction(rawTransaction);
        return tx;
    };
    return TransactionBuilderFactory;
}(baseCoin_1.BaseTransactionBuilderFactory));
exports.TransactionBuilderFactory = TransactionBuilderFactory;
//# sourceMappingURL=data:application/json;base64,