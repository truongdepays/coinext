"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeTransferCheckedInstruction = exports.TokenInvalidInstructionTypeError = exports.TokenInvalidInstructionKeysError = exports.TokenInvalidInstructionProgramError = exports.TokenError = exports.TokenInstruction = void 0;
var spl_token_1 = require("@solana/spl-token");
var BigNumber = require('bignumber.js');
/*
  IMPORTANT:

  Since token transfer encoding and decoding is in alpha (v 0.2.0-alpha.2), a version that is currently not functional due to typing bugs,
  this file is the cherry-picked methods that are required to complete the token transfer feature. When the Solana foundation releases a stable
  version, this file should be deleted and the spl-token methods should be used.
 */
var TokenInstruction;
(function (TokenInstruction) {
    TokenInstruction[TokenInstruction["InitializeMint"] = 0] = "InitializeMint";
    TokenInstruction[TokenInstruction["InitializeAccount"] = 1] = "InitializeAccount";
    TokenInstruction[TokenInstruction["InitializeMultisig"] = 2] = "InitializeMultisig";
    TokenInstruction[TokenInstruction["Transfer"] = 3] = "Transfer";
    TokenInstruction[TokenInstruction["Approve"] = 4] = "Approve";
    TokenInstruction[TokenInstruction["Revoke"] = 5] = "Revoke";
    TokenInstruction[TokenInstruction["SetAuthority"] = 6] = "SetAuthority";
    TokenInstruction[TokenInstruction["MintTo"] = 7] = "MintTo";
    TokenInstruction[TokenInstruction["Burn"] = 8] = "Burn";
    TokenInstruction[TokenInstruction["CloseAccount"] = 9] = "CloseAccount";
    TokenInstruction[TokenInstruction["FreezeAccount"] = 10] = "FreezeAccount";
    TokenInstruction[TokenInstruction["ThawAccount"] = 11] = "ThawAccount";
    TokenInstruction[TokenInstruction["TransferChecked"] = 12] = "TransferChecked";
    TokenInstruction[TokenInstruction["ApproveChecked"] = 13] = "ApproveChecked";
    TokenInstruction[TokenInstruction["MintToChecked"] = 14] = "MintToChecked";
    TokenInstruction[TokenInstruction["BurnChecked"] = 15] = "BurnChecked";
    TokenInstruction[TokenInstruction["InitializeAccount2"] = 16] = "InitializeAccount2";
    TokenInstruction[TokenInstruction["SyncNative"] = 17] = "SyncNative";
    TokenInstruction[TokenInstruction["InitializeAccount3"] = 18] = "InitializeAccount3";
    TokenInstruction[TokenInstruction["InitializeMultisig2"] = 19] = "InitializeMultisig2";
    TokenInstruction[TokenInstruction["InitializeMint2"] = 20] = "InitializeMint2";
})(TokenInstruction = exports.TokenInstruction || (exports.TokenInstruction = {}));
var TokenError = /** @class */ (function (_super) {
    __extends(TokenError, _super);
    function TokenError(message) {
        return _super.call(this, message) || this;
    }
    return TokenError;
}(Error));
exports.TokenError = TokenError;
/** Thrown if an instruction's program is invalid */
var TokenInvalidInstructionProgramError = /** @class */ (function (_super) {
    __extends(TokenInvalidInstructionProgramError, _super);
    function TokenInvalidInstructionProgramError() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'TokenInvalidInstructionProgramError';
        return _this;
    }
    return TokenInvalidInstructionProgramError;
}(TokenError));
exports.TokenInvalidInstructionProgramError = TokenInvalidInstructionProgramError;
/** Thrown if an instruction's keys are invalid */
var TokenInvalidInstructionKeysError = /** @class */ (function (_super) {
    __extends(TokenInvalidInstructionKeysError, _super);
    function TokenInvalidInstructionKeysError() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'TokenInvalidInstructionKeysError';
        return _this;
    }
    return TokenInvalidInstructionKeysError;
}(TokenError));
exports.TokenInvalidInstructionKeysError = TokenInvalidInstructionKeysError;
/** Thrown if an instruction's type is invalid */
var TokenInvalidInstructionTypeError = /** @class */ (function (_super) {
    __extends(TokenInvalidInstructionTypeError, _super);
    function TokenInvalidInstructionTypeError() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'TokenInvalidInstructionTypeError';
        return _this;
    }
    return TokenInvalidInstructionTypeError;
}(TokenError));
exports.TokenInvalidInstructionTypeError = TokenInvalidInstructionTypeError;
/**
 * Decode a TransferChecked instruction and validate it
 *
 * @param instruction Transaction instruction to decode
 * @param programId   SPL Token program account
 *
 * @return Decoded, valid instruction
 */
function decodeTransferCheckedInstruction(instruction, programId) {
    if (programId === void 0) { programId = spl_token_1.TOKEN_PROGRAM_ID; }
    if (!instruction.programId.equals(programId))
        throw new TokenInvalidInstructionProgramError();
    var _a = decodeTransferCheckedInstructionUnchecked(instruction), _b = _a.keys, source = _b.source, mint = _b.mint, destination = _b.destination, owner = _b.owner, multiSigners = _b.multiSigners, data = _a.data;
    if (data.instruction !== TokenInstruction.TransferChecked)
        throw new TokenInvalidInstructionTypeError();
    if (!source || !mint || !destination || !owner)
        throw new TokenInvalidInstructionKeysError();
    return {
        programId: programId,
        keys: {
            source: source,
            mint: mint,
            destination: destination,
            owner: owner,
            multiSigners: multiSigners,
        },
        data: data,
    };
}
exports.decodeTransferCheckedInstruction = decodeTransferCheckedInstruction;
function readBigUInt64LE(buffer, offset) {
    if (offset === void 0) { offset = 0; }
    var first = buffer[offset];
    var last = buffer[offset + 7];
    if (first === undefined || last === undefined) {
        throw new Error('Out of bounds');
    }
    var lo = first + buffer[++offset] * Math.pow(2, 8) + buffer[++offset] * Math.pow(2, 16) + buffer[++offset] * Math.pow(2, 24);
    var hi = buffer[++offset] + buffer[++offset] * Math.pow(2, 8) + buffer[++offset] * Math.pow(2, 16) + last * Math.pow(2, 24);
    return (BigNumber(lo) + (BigNumber(hi) << BigNumber(32))) / 10;
}
/**
 * Decode a TransferChecked instruction without validating it
 *
 * @param instruction Transaction instruction to decode
 *
 * @return Decoded, non-validated instruction
 */
function decodeTransferCheckedInstructionUnchecked(_a) {
    var programId = _a.programId, _b = _a.keys, source = _b[0], mint = _b[1], destination = _b[2], owner = _b[3], multiSigners = _b.slice(4), data = _a.data;
    var type = data.slice(0, 1).readUInt8(0);
    var amount = readBigUInt64LE(data.slice(1, 9), 0);
    var decimals = data.slice(9).readUInt8(0);
    return {
        programId: programId,
        keys: {
            source: source,
            mint: mint,
            destination: destination,
            owner: owner,
            multiSigners: multiSigners,
        },
        data: {
            instruction: type,
            amount: amount,
            decimals: decimals,
        },
    };
}
//# sourceMappingURL=data:application/json;base64,