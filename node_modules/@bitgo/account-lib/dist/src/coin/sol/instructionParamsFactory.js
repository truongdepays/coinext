"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.instructionParamsFactory = void 0;
var web3_js_1 = require("@solana/web3.js");
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var constants_1 = require("./constants");
var utils_1 = require("./utils");
var tokenEncodeDecode_1 = require("./tokenEncodeDecode");
var spl_token_1 = require("@solana/spl-token");
var assert_1 = __importDefault(require("assert"));
var statics_1 = require("@bitgo/statics");
/**
 * Construct instructions params from Solana instructions
 *
 * @param {TransactionType} type - the transaction type
 * @param {TransactionInstruction[]} instructions - solana instructions
 * @returns {InstructionParams[]} An array containing instruction params
 */
function instructionParamsFactory(type, instructions) {
    switch (type) {
        case baseCoin_1.TransactionType.WalletInitialization:
            return parseWalletInitInstructions(instructions);
        case baseCoin_1.TransactionType.Send:
            return parseSendInstructions(instructions);
        case baseCoin_1.TransactionType.StakingActivate:
            return parseStakingActivateInstructions(instructions);
        case baseCoin_1.TransactionType.StakingDeactivate:
            return parseStakingDeactivateInstructions(instructions);
        case baseCoin_1.TransactionType.StakingWithdraw:
            return parseStakingWithdrawInstructions(instructions);
        case baseCoin_1.TransactionType.AssociatedTokenAccountInitialization:
            return parseAtaInitInstructions(instructions);
        default:
            throw new errors_1.NotSupported('Invalid transaction, transaction type not supported: ' + type);
    }
}
exports.instructionParamsFactory = instructionParamsFactory;
/**
 * Parses Solana instructions to Wallet initialization tx instructions params
 *
 * @param {TransactionInstruction[]} instructions - containing create and initialize nonce solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for Wallet initialization tx
 */
function parseWalletInitInstructions(instructions) {
    var instructionData = [];
    var createInstruction = web3_js_1.SystemInstruction.decodeCreateAccount(instructions[constants_1.walletInitInstructionIndexes.Create]);
    var nonceInitInstruction = web3_js_1.SystemInstruction.decodeNonceInitialize(instructions[constants_1.walletInitInstructionIndexes.InitializeNonceAccount]);
    var walletInit = {
        type: constants_1.InstructionBuilderTypes.CreateNonceAccount,
        params: {
            fromAddress: createInstruction.fromPubkey.toString(),
            nonceAddress: nonceInitInstruction.noncePubkey.toString(),
            authAddress: nonceInitInstruction.authorizedPubkey.toString(),
            amount: createInstruction.lamports.toString(),
        },
    };
    instructionData.push(walletInit);
    var memo = getMemo(instructions, constants_1.walletInitInstructionIndexes);
    if (memo) {
        instructionData.push(memo);
    }
    return instructionData;
}
/**
 * Parses Solana instructions to Send tx instructions params
 * Only supports Memo, Transfer and Advance Nonce Solana instructions
 *
 * @param {TransactionInstruction[]} instructions - an array of supported Solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for Send tx
 */
function parseSendInstructions(instructions) {
    var instructionData = [];
    var _loop_1 = function (instruction) {
        var type = utils_1.getInstructionType(instruction);
        switch (type) {
            case constants_1.ValidInstructionTypesEnum.Memo:
                var memo = { type: constants_1.InstructionBuilderTypes.Memo, params: { memo: instruction.data.toString() } };
                instructionData.push(memo);
                break;
            case constants_1.ValidInstructionTypesEnum.AdvanceNonceAccount:
                var advanceNonceInstruction = web3_js_1.SystemInstruction.decodeNonceAdvance(instruction);
                var nonce = {
                    type: constants_1.InstructionBuilderTypes.NonceAdvance,
                    params: {
                        walletNonceAddress: advanceNonceInstruction.noncePubkey.toString(),
                        authWalletAddress: advanceNonceInstruction.authorizedPubkey.toString(),
                    },
                };
                instructionData.push(nonce);
                break;
            case constants_1.ValidInstructionTypesEnum.Transfer:
                var transferInstruction = web3_js_1.SystemInstruction.decodeTransfer(instruction);
                var transfer = {
                    type: constants_1.InstructionBuilderTypes.Transfer,
                    params: {
                        fromAddress: transferInstruction.fromPubkey.toString(),
                        toAddress: transferInstruction.toPubkey.toString(),
                        amount: transferInstruction.lamports.toString(),
                    },
                };
                instructionData.push(transfer);
                break;
            case constants_1.ValidInstructionTypesEnum.TokenTransfer:
                var tokenTransferInstruction_1 = tokenEncodeDecode_1.decodeTransferCheckedInstruction(instruction, spl_token_1.TOKEN_PROGRAM_ID);
                var token_1;
                statics_1.coins.forEach(function (value, key) {
                    if (value instanceof statics_1.SolCoin && value.tokenAddress === tokenTransferInstruction_1.keys.mint.pubkey.toString()) {
                        token_1 = value;
                    }
                });
                assert_1.default(token_1);
                var tokenTransfer = {
                    type: constants_1.InstructionBuilderTypes.TokenTransfer,
                    params: {
                        fromAddress: tokenTransferInstruction_1.keys.owner.pubkey.toString(),
                        toAddress: tokenTransferInstruction_1.keys.destination.pubkey.toString(),
                        amount: tokenTransferInstruction_1.data.amount.toString(),
                        tokenName: token_1.name,
                        sourceAddress: tokenTransferInstruction_1.keys.source.pubkey.toString(),
                    },
                };
                instructionData.push(tokenTransfer);
                break;
            default:
                throw new errors_1.NotSupported('Invalid transaction, instruction type not supported: ' + utils_1.getInstructionType(instruction));
        }
    };
    for (var _i = 0, instructions_1 = instructions; _i < instructions_1.length; _i++) {
        var instruction = instructions_1[_i];
        _loop_1(instruction);
    }
    return instructionData;
}
/**
 * Parses Solana instructions to create staking tx and delegate tx instructions params
 * Only supports StakingActivate and Memo Solana instructions
 *
 * @param {TransactionInstruction[]} instructions - an array of supported Solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for staking activate tx
 */
function parseStakingActivateInstructions(instructions) {
    var instructionData = [];
    var createInstruction = web3_js_1.SystemInstruction.decodeCreateAccount(instructions[constants_1.stakingActivateInstructionsIndexes.Create]);
    var initializeInstruction = web3_js_1.StakeInstruction.decodeInitialize(instructions[constants_1.stakingActivateInstructionsIndexes.Initialize]);
    var delegateInstruction = web3_js_1.StakeInstruction.decodeDelegate(instructions[constants_1.stakingActivateInstructionsIndexes.Delegate]);
    var stakingActivate = {
        type: constants_1.InstructionBuilderTypes.StakingActivate,
        params: {
            fromAddress: createInstruction.fromPubkey.toString(),
            stakingAddress: initializeInstruction.stakePubkey.toString(),
            amount: createInstruction.lamports.toString(),
            validator: delegateInstruction.votePubkey.toString(),
        },
    };
    instructionData.push(stakingActivate);
    var memo = getMemo(instructions, constants_1.stakingActivateInstructionsIndexes);
    if (memo) {
        instructionData.push(memo);
    }
    return instructionData;
}
/**
 * Parses Solana instructions to create deactivate tx instructions params
 * Only supports StakingDeactivate and Memo Solana instructions
 *
 * @param {TransactionInstruction[]} instructions - an array of supported Solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for staking deactivate tx
 */
function parseStakingDeactivateInstructions(instructions) {
    var instructionData = [];
    var deactivateInstruction = web3_js_1.StakeInstruction.decodeDeactivate(instructions[constants_1.stakingDeactivateInstructionsIndexes.Deactivate]);
    var stakingDeactivate = {
        type: constants_1.InstructionBuilderTypes.StakingDeactivate,
        params: {
            fromAddress: deactivateInstruction.authorizedPubkey.toString(),
            stakingAddress: deactivateInstruction.stakePubkey.toString(),
        },
    };
    instructionData.push(stakingDeactivate);
    var memo = getMemo(instructions, constants_1.stakingDeactivateInstructionsIndexes);
    if (memo) {
        instructionData.push(memo);
    }
    return instructionData;
}
/**
 * Parses Solana instructions to create staking  withdraw tx instructions params
 * Only supports StakingWithdraw and Memo Solana instructions
 *
 * @param {TransactionInstruction[]} instructions - an array of supported Solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for staking withdraw tx
 */
function parseStakingWithdrawInstructions(instructions) {
    var instructionData = [];
    var withdrawInstruction = web3_js_1.StakeInstruction.decodeWithdraw(instructions[constants_1.stakingWithdrawInstructionsIndexes.Withdraw]);
    var stakingWithdraw = {
        type: constants_1.InstructionBuilderTypes.StakingWithdraw,
        params: {
            fromAddress: withdrawInstruction.authorizedPubkey.toString(),
            stakingAddress: withdrawInstruction.stakePubkey.toString(),
            amount: withdrawInstruction.lamports.toString(),
        },
    };
    instructionData.push(stakingWithdraw);
    var memo = getMemo(instructions, constants_1.stakingWithdrawInstructionsIndexes);
    if (memo) {
        instructionData.push(memo);
    }
    return instructionData;
}
/**
 * Get the memo object from instructions if it exists
 *
 * @param {TransactionInstruction[]} instructions - the array of supported Solana instructions to be parsed
 * @param {Record<string, number>} instructionIndexes - the instructions indexes of the current transaction
 * @returns {Memo | undefined} - memo object or undefined
 */
function getMemo(instructions, instructionIndexes) {
    var instructionsLength = Object.keys(instructionIndexes).length;
    if (instructions.length === instructionsLength && instructions[instructionIndexes.Memo]) {
        return {
            type: constants_1.InstructionBuilderTypes.Memo,
            params: { memo: instructions[instructionIndexes.Memo].data.toString() },
        };
    }
}
var ataInitInstructionKeysIndexes = {
    PayerAddress: 0,
    ATAAddress: 1,
    OwnerAddress: 2,
    MintAddress: 3,
};
/**
 * Parses Solana instructions to initialize associated token account tx instructions params
 *
 * @param {TransactionInstruction[]} instructions - an array of supported Solana instructions
 * @returns {InstructionParams[]} An array containing instruction params for Send tx
 */
function parseAtaInitInstructions(instructions) {
    var instructionData = [];
    var ataInitInstruction = instructions[constants_1.ataInitInstructionIndexes.InitializeAssociatedTokenAccount];
    var ataInit = {
        type: constants_1.InstructionBuilderTypes.CreateAssociatedTokenAccount,
        params: {
            mintAddress: ataInitInstruction.keys[ataInitInstructionKeysIndexes.MintAddress].pubkey.toString(),
            ataAddress: ataInitInstruction.keys[ataInitInstructionKeysIndexes.ATAAddress].pubkey.toString(),
            ownerAddress: ataInitInstruction.keys[ataInitInstructionKeysIndexes.OwnerAddress].pubkey.toString(),
            payerAddress: ataInitInstruction.keys[ataInitInstructionKeysIndexes.PayerAddress].pubkey.toString(),
        },
    };
    instructionData.push(ataInit);
    if (instructions.length === 2 && instructions[constants_1.ataInitInstructionIndexes.Memo]) {
        var memo = {
            type: constants_1.InstructionBuilderTypes.Memo,
            params: { memo: instructions[constants_1.ataInitInstructionIndexes.Memo].data.toString() },
        };
        instructionData.push(memo);
    }
    return instructionData;
}
//# sourceMappingURL=data:application/json;base64,