"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var transaction_1 = require("./transaction");
var web3_js_1 = require("@solana/web3.js");
var utils_1 = require("./utils");
var _1 = require(".");
var constants_1 = require("./constants");
var solInstructionFactory_1 = require("./solInstructionFactory");
var assert_1 = __importDefault(require("assert"));
var instructionParamsFactory_1 = require("./instructionParamsFactory");
var TransactionBuilder = /** @class */ (function (_super) {
    __extends(TransactionBuilder, _super);
    function TransactionBuilder(_coinConfig) {
        var _this = _super.call(this, _coinConfig) || this;
        _this._signatures = [];
        _this._instructionsData = [];
        _this._signers = [];
        _this.transaction = new transaction_1.Transaction(_coinConfig);
        return _this;
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    TransactionBuilder.prototype.initBuilder = function (tx) {
        this._transaction = tx;
        var txData = tx.toJson();
        this.sender(txData.feePayer);
        this.nonce(txData.nonce, txData.durableNonce);
        this._instructionsData = instructionParamsFactory_1.instructionParamsFactory(tx.type, tx.solTransaction.instructions);
        for (var _i = 0, _a = this._instructionsData; _i < _a.length; _i++) {
            var instruction = _a[_i];
            if (instruction.type === constants_1.InstructionBuilderTypes.Memo) {
                var memoInstruction = instruction;
                this.memo(memoInstruction.params.memo);
            }
            if (instruction.type === constants_1.InstructionBuilderTypes.NonceAdvance) {
                var advanceNonceInstruction = instruction;
                this.nonce(txData.nonce, advanceNonceInstruction.params);
            }
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.fromImplementation = function (rawTransaction) {
        var tx = new transaction_1.Transaction(this._coinConfig);
        this.validateRawTransaction(rawTransaction);
        tx.fromRawTransaction(rawTransaction);
        this.initBuilder(tx);
        return this.transaction;
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.buildImplementation = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.transaction.solTransaction = this.buildSolTransaction();
                this.transaction.setTransactionType(this.transactionType);
                this.transaction.loadInputsAndOutputs();
                return [2 /*return*/, this.transaction];
            });
        });
    };
    /**
     * Builds the solana transaction.
     */
    TransactionBuilder.prototype.buildSolTransaction = function () {
        var _a, _b, _c, _d;
        assert_1.default(this._sender, new errors_1.BuildTransactionError('sender is required before building'));
        assert_1.default(this._recentBlockhash, new errors_1.BuildTransactionError('recent blockhash is required before building'));
        var tx = new web3_js_1.Transaction();
        if ((_b = (_a = this._transaction) === null || _a === void 0 ? void 0 : _a.solTransaction) === null || _b === void 0 ? void 0 : _b.signatures) {
            tx.signatures = (_d = (_c = this._transaction) === null || _c === void 0 ? void 0 : _c.solTransaction) === null || _d === void 0 ? void 0 : _d.signatures;
        }
        tx.feePayer = new web3_js_1.PublicKey(this._sender);
        if (this._nonceInfo) {
            tx.nonceInfo = {
                nonce: this._recentBlockhash,
                nonceInstruction: solInstructionFactory_1.solInstructionFactory(this._nonceInfo)[0],
            };
        }
        else {
            tx.recentBlockhash = this._recentBlockhash;
        }
        for (var _i = 0, _e = this._instructionsData; _i < _e.length; _i++) {
            var instruction = _e[_i];
            tx.add.apply(tx, solInstructionFactory_1.solInstructionFactory(instruction));
        }
        if (this._memo) {
            var memoData = {
                type: constants_1.InstructionBuilderTypes.Memo,
                params: {
                    memo: this._memo,
                },
            };
            this._instructionsData.push(memoData);
            tx.add.apply(tx, solInstructionFactory_1.solInstructionFactory(memoData));
        }
        this._transaction.lamportsPerSignature = this._lamportsPerSignature;
        for (var _f = 0, _g = this._signers; _f < _g.length; _f++) {
            var signer = _g[_f];
            var publicKey = new web3_js_1.PublicKey(signer.getKeys().pub);
            var secretKey = signer.getKeys(true).prv;
            assert_1.default(secretKey instanceof Uint8Array);
            tx.partialSign({ publicKey: publicKey, secretKey: secretKey });
        }
        for (var _h = 0, _j = this._signatures; _h < _j.length; _h++) {
            var signature = _j[_h];
            var solPublicKey = new web3_js_1.PublicKey(signature.publicKey.pub);
            tx.addSignature(solPublicKey, signature.signature);
        }
        return tx;
    };
    Object.defineProperty(TransactionBuilder.prototype, "transaction", {
        // region Getters and Setters
        /** @inheritdoc */
        get: function () {
            return this._transaction;
        },
        /** @inheritdoc */
        set: function (transaction) {
            this._transaction = transaction;
        },
        enumerable: false,
        configurable: true
    });
    /** @inheritdoc */
    TransactionBuilder.prototype.signImplementation = function (key) {
        this.validateKey(key);
        this.checkDuplicatedSigner(key);
        var prv = key.key;
        var signer = new _1.KeyPair({ prv: prv });
        this._signers.push(signer);
        return this._transaction;
    };
    /** @inheritDoc */
    TransactionBuilder.prototype.addSignature = function (publicKey, signature) {
        this._signatures.push({ publicKey: publicKey, signature: signature });
    };
    /**
     * Sets the sender of this transaction.
     * This account will be responsible for paying transaction fees.
     *
     * @param {string} senderAddress the account that is sending this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.sender = function (senderAddress) {
        utils_1.validateAddress(senderAddress, 'sender');
        this._sender = senderAddress;
        return this;
    };
    /**
     * Set the transaction nonce
     * Requires both optional params in order to use the durable nonce
     *
     * @param {Blockhash} blockHash The latest blockHash
     * @param {DurableNonceParams} [durableNonceParams] An object containing the walletNonceAddress and the authWalletAddress (required for durable nonce)
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.nonce = function (blockHash, durableNonceParams) {
        if (!blockHash || !utils_1.isValidBlockId(blockHash)) {
            throw new errors_1.BuildTransactionError('Invalid or missing blockHash, got: ' + blockHash);
        }
        if (durableNonceParams) {
            utils_1.validateAddress(durableNonceParams.walletNonceAddress, 'walletNonceAddress');
            utils_1.validateAddress(durableNonceParams.authWalletAddress, 'authWalletAddress');
            if (durableNonceParams.walletNonceAddress === durableNonceParams.authWalletAddress) {
                throw new errors_1.BuildTransactionError('Invalid params: walletNonceAddress cannot be equal to authWalletAddress');
            }
            this._nonceInfo = {
                type: constants_1.InstructionBuilderTypes.NonceAdvance,
                params: durableNonceParams,
            };
        }
        this._recentBlockhash = blockHash;
        return this;
    };
    /**
     *  Set the memo
     *
     * @param {string} memo
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.memo = function (memo) {
        this.validateMemo(memo);
        this._memo = memo;
        return this;
    };
    TransactionBuilder.prototype.fee = function (feeOptions) {
        this._lamportsPerSignature = Number(feeOptions.amount);
        return this;
    };
    // endregion
    // region Validators
    /** @inheritdoc */
    TransactionBuilder.prototype.validateAddress = function (address, addressFormat) {
        if (!utils_1.isValidAddress(address.address)) {
            throw new errors_1.BuildTransactionError('Invalid address ' + address.address);
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateKey = function (key) {
        var keyPair;
        try {
            keyPair = new _1.KeyPair({ prv: key.key });
        }
        catch (_a) {
            throw new errors_1.BuildTransactionError('Invalid key');
        }
        if (!keyPair.getKeys().prv) {
            throw new errors_1.BuildTransactionError('Invalid key');
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateRawTransaction = function (rawTransaction) {
        utils_1.validateRawTransaction(rawTransaction);
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateTransaction = function (transaction) {
        this.validateSender();
        this.validateNonce();
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateValue = function (value) {
        if (value.isLessThan(0)) {
            throw new errors_1.BuildTransactionError('Value cannot be less than zero');
        }
    };
    /** Validates the memo
     *
     * @param {string} memo - the memo as string
     */
    TransactionBuilder.prototype.validateMemo = function (memo) {
        if (!memo) {
            throw new errors_1.BuildTransactionError('Invalid memo, got: ' + memo);
        }
        if (!utils_1.isValidMemo(memo)) {
            throw new errors_1.BuildTransactionError('Memo is too long');
        }
    };
    /**
     * Validates that the given key is not already in this._signers
     *
     * @param {BaseKey} key - The key to check
     */
    TransactionBuilder.prototype.checkDuplicatedSigner = function (key) {
        this._signers.forEach(function (kp) {
            if (kp.getKeys().prv === key.key) {
                throw new errors_1.SigningError('Duplicated signer: ' + key.key);
            }
        });
    };
    /**
     * Validates that the sender field is defined
     */
    TransactionBuilder.prototype.validateSender = function () {
        if (this._sender === undefined) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing sender');
        }
    };
    /**
     * Validates that the nonce field is defined
     */
    TransactionBuilder.prototype.validateNonce = function () {
        if (this._recentBlockhash === undefined) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing nonce blockhash');
        }
    };
    return TransactionBuilder;
}(baseCoin_1.BaseTransactionBuilder));
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,