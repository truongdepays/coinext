"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAssociatedTokenAccountAddress = exports.getSolTokenFromTokenName = exports.getSolTokenFromAddress = exports.validateAddress = exports.validateRawTransaction = exports.validateIntructionTypes = exports.getInstructionType = exports.getTransactionType = exports.matchTransactionTypeByInstructionsOrder = exports.requiresAllSignatures = exports.countNotNullSignatures = exports.Uint8ArrayTobase58 = exports.base58ToUint8Array = exports.verifySignature = exports.isValidRawTransaction = exports.isValidMemo = exports.isValidStakingAmount = exports.isValidAmount = exports.isValidTransactionId = exports.isValidSignature = exports.isValidPublicKey = exports.isValidPrivateKey = exports.isValidBlockId = exports.isValidAddress = void 0;
var web3_js_1 = require("@solana/web3.js");
var bs58_1 = __importDefault(require("bs58"));
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var constants_1 = require("./constants");
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var tweetnacl_1 = __importDefault(require("tweetnacl"));
var Crypto = __importStar(require("./../../utils/crypto"));
var spl_token_1 = require("@solana/spl-token");
var statics_1 = require("@bitgo/statics");
var assert_1 = __importDefault(require("assert"));
var DECODED_BLOCK_HASH_LENGTH = 32; // https://docs.solana.com/developing/programming-model/transactions#blockhash-format
var DECODED_SIGNATURE_LENGTH = 64; // https://docs.solana.com/terminology#signature
var BASE_58_ENCONDING_REGEX = '[1-9A-HJ-NP-Za-km-z]';
/** @inheritdoc */
function isValidAddress(address) {
    return isValidPublicKey(address);
}
exports.isValidAddress = isValidAddress;
/** @inheritdoc */
function isValidBlockId(hash) {
    try {
        return (!!hash && new RegExp(BASE_58_ENCONDING_REGEX).test(hash) && bs58_1.default.decode(hash).length === DECODED_BLOCK_HASH_LENGTH);
    }
    catch (e) {
        return false;
    }
}
exports.isValidBlockId = isValidBlockId;
/** @inheritdoc */
function isValidPrivateKey(prvKey) {
    try {
        var key = typeof prvKey === 'string' ? this.base58ToUint8Array(prvKey) : prvKey;
        return !!web3_js_1.Keypair.fromSecretKey(key);
    }
    catch (e) {
        return false;
    }
}
exports.isValidPrivateKey = isValidPrivateKey;
/** @inheritdoc */
function isValidPublicKey(pubKey) {
    try {
        if (Crypto.isValidXpub(pubKey))
            return true;
        new web3_js_1.PublicKey(pubKey);
        return true;
    }
    catch (_a) {
        return false;
    }
}
exports.isValidPublicKey = isValidPublicKey;
/** @inheritdoc */
function isValidSignature(signature) {
    try {
        return !!signature && bs58_1.default.decode(signature).length === DECODED_SIGNATURE_LENGTH;
    }
    catch (e) {
        return false;
    }
}
exports.isValidSignature = isValidSignature;
/** @inheritdoc */
// TransactionId are the first signature on a Transaction
function isValidTransactionId(txId) {
    return this.isValidSignature(txId);
}
exports.isValidTransactionId = isValidTransactionId;
/**
 * Returns whether or not the string is a valid amount of lamports number
 *
 * @param {string} amount - the string to validate
 * @returns {boolean} - the validation result
 */
function isValidAmount(amount) {
    var bigNumberAmount = new bignumber_js_1.default(amount);
    return bigNumberAmount.isInteger() && bigNumberAmount.isGreaterThanOrEqualTo(0);
}
exports.isValidAmount = isValidAmount;
/**
 * Check if the string is a valid amount of lamports number on staking
 *
 * @param {string} amount - the string to validate
 * @returns {boolean} - the validation result
 */
function isValidStakingAmount(amount) {
    var bigNumberAmount = new bignumber_js_1.default(amount);
    return bigNumberAmount.isInteger() && bigNumberAmount.isGreaterThan(0);
}
exports.isValidStakingAmount = isValidStakingAmount;
/**
 * Check if this is a valid memo or not.
 *
 * @param memo - the memo string
 * @returns {boolean} - the validation result
 */
function isValidMemo(memo) {
    return Buffer.from(memo).length <= constants_1.MAX_MEMO_LENGTH;
}
exports.isValidMemo = isValidMemo;
/**
 * Checks if raw transaction can be deserialized
 *
 * @param {string} rawTransaction - transaction in base64 string format
 * @returns {boolean} - the validation result
 */
function isValidRawTransaction(rawTransaction) {
    try {
        var tx = web3_js_1.Transaction.from(Buffer.from(rawTransaction, 'base64'));
        tx.serialize({ requireAllSignatures: false });
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.isValidRawTransaction = isValidRawTransaction;
/**
 * Verifies if signature for message is valid.
 *
 * @param {Buffer} serializedTx - tx as a base64 string
 * @param {string} signature - signature as a string
 * @param {string} publicKey - public key as base 58
 * @returns {Boolean} true if signature is valid.
 */
function verifySignature(serializedTx, signature, publicKey) {
    if (!isValidRawTransaction(serializedTx)) {
        throw new errors_1.UtilsError('Invalid serializedTx');
    }
    if (!isValidPublicKey(publicKey)) {
        throw new errors_1.UtilsError('Invalid publicKey');
    }
    if (!isValidSignature(signature)) {
        throw new errors_1.UtilsError('Invalid signature');
    }
    var msg = web3_js_1.Transaction.from(Buffer.from(serializedTx, 'base64')).serializeMessage();
    var sig = base58ToUint8Array(signature);
    var pub = new web3_js_1.PublicKey(publicKey);
    return tweetnacl_1.default.sign.detached.verify(msg, sig, pub.toBuffer());
}
exports.verifySignature = verifySignature;
/**
 * Converts a base58 string into a Uint8Array.
 *
 * @param {string} input - a string in base58
 * @returns {Uint8Array} - an Uint8Array
 */
function base58ToUint8Array(input) {
    return new Uint8Array(bs58_1.default.decode(input));
}
exports.base58ToUint8Array = base58ToUint8Array;
/**
 * Converts a Uint8Array to a base58 string.
 *
 * @param {Uint8Array} input - an Uint8Array
 * @returns {string} - a string in base58
 */
function Uint8ArrayTobase58(input) {
    return bs58_1.default.encode(input);
}
exports.Uint8ArrayTobase58 = Uint8ArrayTobase58;
/**
 * Count the amount of signatures are not null.
 *
 * @param {SignaturePubkeyPair[]} signatures - an array of SignaturePubkeyPair
 * @returns {number} - the amount of valid signatures
 */
function countNotNullSignatures(signatures) {
    return signatures.filter(function (sig) { return !!sig.signature; }).length;
}
exports.countNotNullSignatures = countNotNullSignatures;
/**
 * Check if all signatures are completed.
 *
 * @param {SignaturePubkeyPair[]} signatures - signatures
 * @returns {boolean}
 */
function requiresAllSignatures(signatures) {
    return signatures.length > 0 && countNotNullSignatures(signatures) === signatures.length;
}
exports.requiresAllSignatures = requiresAllSignatures;
/**
 * Check the transaction type matching instructions by order.
 *
 * @param {TransactionInstruction[]} instructions - the array of supported Solana instructions to be parsed
 * @param {Record<string, number>} instructionIndexes - the instructions indexes of the current transaction
 * @returns true if it matchs by order.
 */
function matchTransactionTypeByInstructionsOrder(instructions, instructionIndexes) {
    var instructionsKeys = Object.keys(instructionIndexes);
    // Memo is optional and the last instruction added, it does not matter to match the type
    if (instructionsKeys[instructionsKeys.length - 1] === 'Memo') {
        instructionsKeys.pop();
    }
    // Check instructions by order using the index.
    for (var _i = 0, instructionsKeys_1 = instructionsKeys; _i < instructionsKeys_1.length; _i++) {
        var keyName = instructionsKeys_1[_i];
        if (getInstructionType(instructions[instructionIndexes[keyName]]) !== keyName) {
            return false;
        }
    }
    return true;
}
exports.matchTransactionTypeByInstructionsOrder = matchTransactionTypeByInstructionsOrder;
/**
 * Returns the transaction Type based on the  transaction instructions.
 * Wallet initialization, Transfer and Staking transactions are supported.
 *
 * @param {SolTransaction} transaction - the solana transaction
 * @returns {TransactionType} - the type of transaction
 */
function getTransactionType(transaction) {
    var instructions = transaction.instructions;
    validateIntructionTypes(instructions);
    if (matchTransactionTypeByInstructionsOrder(instructions, constants_1.walletInitInstructionIndexes)) {
        return baseCoin_1.TransactionType.WalletInitialization;
    }
    else if (matchTransactionTypeByInstructionsOrder(instructions, constants_1.stakingActivateInstructionsIndexes)) {
        return baseCoin_1.TransactionType.StakingActivate;
    }
    else if (matchTransactionTypeByInstructionsOrder(instructions, constants_1.stakingDeactivateInstructionsIndexes)) {
        return baseCoin_1.TransactionType.StakingDeactivate;
    }
    else if (matchTransactionTypeByInstructionsOrder(instructions, constants_1.stakingWithdrawInstructionsIndexes)) {
        return baseCoin_1.TransactionType.StakingWithdraw;
    }
    else if (matchTransactionTypeByInstructionsOrder(instructions, constants_1.ataInitInstructionIndexes)) {
        return baseCoin_1.TransactionType.AssociatedTokenAccountInitialization;
    }
    return baseCoin_1.TransactionType.Send;
}
exports.getTransactionType = getTransactionType;
/**
 * Returns the instruction Type based on the solana instructions.
 * Throws if the solana instruction program is not supported
 *
 * @param {TransactionInstruction} instruction - a solana instruction
 * @returns {ValidInstructionTypes} - a solana instruction type
 */
function getInstructionType(instruction) {
    switch (instruction.programId.toString()) {
        case new web3_js_1.PublicKey(constants_1.MEMO_PROGRAM_PK).toString():
            return 'Memo';
        case web3_js_1.SystemProgram.programId.toString():
            return web3_js_1.SystemInstruction.decodeInstructionType(instruction);
        case spl_token_1.TOKEN_PROGRAM_ID.toString():
            return 'TokenTransfer';
        case web3_js_1.StakeProgram.programId.toString():
            return web3_js_1.StakeInstruction.decodeInstructionType(instruction);
        case spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID.toString():
            // TODO: change this when @spl-token supports decoding associated token instructions
            if (instruction.data.length === 0) {
                return 'InitializeAssociatedTokenAccount';
            }
            else {
                throw new errors_1.NotSupported('Invalid transaction, instruction program id not supported: ' + instruction.programId.toString());
            }
        default:
            throw new errors_1.NotSupported('Invalid transaction, instruction program id not supported: ' + instruction.programId.toString());
    }
}
exports.getInstructionType = getInstructionType;
/**
 * Validate solana instructions types to see if they are supported by the builder.
 * Throws if the instruction type is invalid.
 *
 * @param {TransactionInstruction} instructions - a solana instruction
 * @returns {void}
 */
function validateIntructionTypes(instructions) {
    for (var _i = 0, instructions_1 = instructions; _i < instructions_1.length; _i++) {
        var instruction = instructions_1[_i];
        if (!constants_1.VALID_SYSTEM_INSTRUCTION_TYPES.includes(getInstructionType(instruction))) {
            throw new errors_1.NotSupported('Invalid transaction, instruction type not supported: ' + getInstructionType(instruction));
        }
    }
}
exports.validateIntructionTypes = validateIntructionTypes;
/**
 * Check the raw transaction has a valid format in the blockchain context, throw otherwise.
 *
 * @param {string} rawTransaction - Transaction in base64 string  format
 */
function validateRawTransaction(rawTransaction) {
    if (!rawTransaction) {
        throw new errors_1.ParseTransactionError('Invalid raw transaction: Undefined');
    }
    if (!isValidRawTransaction(rawTransaction)) {
        throw new errors_1.ParseTransactionError('Invalid raw transaction');
    }
}
exports.validateRawTransaction = validateRawTransaction;
/**
 * Validates address to check if it exists and is a valid Solana public key
 *
 * @param {string} address The address to be validated
 * @param {string} fieldName Name of the field to validate, its needed to return which field is failing on case of error.
 */
function validateAddress(address, fieldName) {
    if (!address || !isValidPublicKey(address)) {
        throw new errors_1.BuildTransactionError("Invalid or missing " + fieldName + ", got: " + address);
    }
}
exports.validateAddress = validateAddress;
/**
 * Get the statics coin object matching a given Solana token address if it exists
 *
 * @param tokenAddress The token address to match against
 * @param network Solana Mainnet or Testnet
 * @returns statics BaseCoin object for the matching token
 */
function getSolTokenFromAddress(tokenAddress, network) {
    var tokens = statics_1.coins.filter(function (coin) {
        if (coin instanceof statics_1.SolCoin) {
            return coin.network.type === network.type && coin.tokenAddress.toLowerCase() === tokenAddress.toLowerCase();
        }
        return false;
    });
    var tokensArray = tokens.map(function (token) { return token; });
    if (tokensArray.length >= 1) {
        // there should never be two tokens with the same contract address, so we assert that here
        assert_1.default(tokensArray.length === 1);
        return tokensArray[0];
    }
    return undefined;
}
exports.getSolTokenFromAddress = getSolTokenFromAddress;
/**
 * Get the solana token object from token name
 * @param tokenName The token name to match against
 * */
function getSolTokenFromTokenName(tokenName) {
    try {
        var token = statics_1.coins.get(tokenName);
        if (!(token.isToken && token instanceof statics_1.SolCoin)) {
            return undefined;
        }
        return token;
    }
    catch (e) {
        if (!(e instanceof statics_1.CoinNotDefinedError)) {
            throw e;
        }
        return undefined;
    }
}
exports.getSolTokenFromTokenName = getSolTokenFromTokenName;
/**
 * Get the solana associated token account address
 * @param tokenAddress The token address
 * @param ownerAddress The owner of the associated token account
 * */
function getAssociatedTokenAccountAddress(tokenAddress, ownerAddress) {
    return __awaiter(this, void 0, void 0, function () {
        var ataAddress;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, spl_token_1.Token.getAssociatedTokenAddress(spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID, spl_token_1.TOKEN_PROGRAM_ID, new web3_js_1.PublicKey(tokenAddress), new web3_js_1.PublicKey(ownerAddress))];
                case 1:
                    ataAddress = _a.sent();
                    return [2 /*return*/, ataAddress.toString()];
            }
        });
    });
}
exports.getAssociatedTokenAccountAddress = getAssociatedTokenAccountAddress;
//# sourceMappingURL=data:application/json;base64,