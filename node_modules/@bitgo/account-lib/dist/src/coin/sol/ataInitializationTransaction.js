"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AtaInitializationTransaction = void 0;
var _1 = require(".");
var instructionParamsFactory_1 = require("./instructionParamsFactory");
var constants_1 = require("./constants");
var utils_1 = require("./utils");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var errors_1 = require("../baseCoin/errors");
var TRANSFER_AMOUNT_UNKNOWN_TEXT = 'TRANSFER_AMOUNT_UNKNOWN';
var AtaInitializationTransaction = /** @class */ (function (_super) {
    __extends(AtaInitializationTransaction, _super);
    function AtaInitializationTransaction(_coinConfig) {
        return _super.call(this, _coinConfig) || this;
    }
    Object.defineProperty(AtaInitializationTransaction.prototype, "tokenAccountRentExemptAmount", {
        get: function () {
            return this._tokenAccountRentExemptAmount;
        },
        set: function (amount) {
            this._tokenAccountRentExemptAmount = amount;
        },
        enumerable: false,
        configurable: true
    });
    /** @inheritDoc */
    AtaInitializationTransaction.prototype.loadInputsAndOutputs = function () {
        var _a;
        if (!this._solTransaction || ((_a = this._solTransaction.instructions) === null || _a === void 0 ? void 0 : _a.length) === 0) {
            return;
        }
        var outputs = [];
        var inputs = [];
        var instructionParams = instructionParamsFactory_1.instructionParamsFactory(this.type, this._solTransaction.instructions);
        for (var _i = 0, instructionParams_1 = instructionParams; _i < instructionParams_1.length; _i++) {
            var instruction = instructionParams_1[_i];
            if (instruction.type === constants_1.InstructionBuilderTypes.CreateAssociatedTokenAccount) {
                var token = utils_1.getSolTokenFromAddress(instruction.params.mintAddress, this._coinConfig.network);
                if (!token) {
                    throw new errors_1.NotSupported('Invalid transaction, token mint address not supported: ' + instruction.params.mintAddress);
                }
                inputs.push({
                    address: instruction.params.ownerAddress,
                    value: this.tokenAccountRentExemptAmount || TRANSFER_AMOUNT_UNKNOWN_TEXT,
                    coin: token.name,
                });
                outputs.push({
                    address: instruction.params.ataAddress,
                    value: this.tokenAccountRentExemptAmount || TRANSFER_AMOUNT_UNKNOWN_TEXT,
                    coin: token.name,
                });
            }
        }
        this._outputs = outputs;
        this._inputs = inputs;
    };
    /** @inheritDoc */
    AtaInitializationTransaction.prototype.explainTransaction = function () {
        var decodedInstructions = instructionParamsFactory_1.instructionParamsFactory(this._type, this._solTransaction.instructions);
        var memo = undefined;
        var outputAmount = new bignumber_js_1.default(0);
        var outputs = [];
        for (var _i = 0, decodedInstructions_1 = decodedInstructions; _i < decodedInstructions_1.length; _i++) {
            var instruction = decodedInstructions_1[_i];
            switch (instruction.type) {
                case constants_1.InstructionBuilderTypes.Memo:
                    memo = instruction.params.memo;
                    break;
                case constants_1.InstructionBuilderTypes.CreateAssociatedTokenAccount:
                    var createAtaInstruction = instruction;
                    outputs.push({
                        address: createAtaInstruction.params.ataAddress,
                        amount: this.tokenAccountRentExemptAmount || TRANSFER_AMOUNT_UNKNOWN_TEXT,
                    });
                    if (this.tokenAccountRentExemptAmount) {
                        outputAmount = outputAmount.plus(this.tokenAccountRentExemptAmount);
                    }
                    break;
            }
        }
        return this.getExplainedTransaction(outputAmount, outputs, memo);
    };
    return AtaInitializationTransaction;
}(_1.Transaction));
exports.AtaInitializationTransaction = AtaInitializationTransaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXRhSW5pdGlhbGl6YXRpb25UcmFuc2FjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2luL3NvbC9hdGFJbml0aWFsaXphdGlvblRyYW5zYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLHNCQUFnQztBQUVoQyx1RUFBc0U7QUFDdEUseUNBQXNEO0FBQ3RELGlDQUFpRDtBQUVqRCw4REFBcUM7QUFDckMsNkNBQWtEO0FBRWxELElBQU0sNEJBQTRCLEdBQUcseUJBQXlCLENBQUM7QUFFL0Q7SUFBa0QsZ0RBQVc7SUFHM0Qsc0NBQVksV0FBaUM7ZUFDM0Msa0JBQU0sV0FBVyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxzQkFBSSxzRUFBNEI7YUFBaEM7WUFDRSxPQUFPLElBQUksQ0FBQyw2QkFBNkIsQ0FBQztRQUM1QyxDQUFDO2FBRUQsVUFBaUMsTUFBYztZQUM3QyxJQUFJLENBQUMsNkJBQTZCLEdBQUcsTUFBTSxDQUFDO1FBQzlDLENBQUM7OztPQUpBO0lBTUQsa0JBQWtCO0lBQ2xCLDJEQUFvQixHQUFwQjs7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFBLE1BQUEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLDBDQUFFLE1BQU0sTUFBSyxDQUFDLEVBQUU7WUFDNUUsT0FBTztTQUNSO1FBQ0QsSUFBTSxPQUFPLEdBQVksRUFBRSxDQUFDO1FBQzVCLElBQU0sTUFBTSxHQUFZLEVBQUUsQ0FBQztRQUMzQixJQUFNLGlCQUFpQixHQUFHLG1EQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVqRyxLQUEwQixVQUFpQixFQUFqQix1Q0FBaUIsRUFBakIsK0JBQWlCLEVBQWpCLElBQWlCLEVBQUU7WUFBeEMsSUFBTSxXQUFXLDBCQUFBO1lBQ3BCLElBQUksV0FBVyxDQUFDLElBQUksS0FBSyxtQ0FBdUIsQ0FBQyw0QkFBNEIsRUFBRTtnQkFDN0UsSUFBTSxLQUFLLEdBQUcsOEJBQXNCLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDL0YsSUFBSSxDQUFDLEtBQUssRUFBRTtvQkFDVixNQUFNLElBQUkscUJBQVksQ0FDcEIseURBQXlELEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQzNGLENBQUM7aUJBQ0g7Z0JBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztvQkFDVixPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxZQUFZO29CQUN4QyxLQUFLLEVBQUUsSUFBSSxDQUFDLDRCQUE0QixJQUFJLDRCQUE0QjtvQkFDeEUsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO2lCQUNqQixDQUFDLENBQUM7Z0JBQ0gsT0FBTyxDQUFDLElBQUksQ0FBQztvQkFDWCxPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFVO29CQUN0QyxLQUFLLEVBQUUsSUFBSSxDQUFDLDRCQUE0QixJQUFJLDRCQUE0QjtvQkFDeEUsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO2lCQUNqQixDQUFDLENBQUM7YUFDSjtTQUNGO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUVELGtCQUFrQjtJQUNsQix5REFBa0IsR0FBbEI7UUFDRSxJQUFNLG1CQUFtQixHQUFHLG1EQUF3QixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVwRyxJQUFJLElBQUksR0FBdUIsU0FBUyxDQUFDO1FBRXpDLElBQUksWUFBWSxHQUFHLElBQUksc0JBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFNLE9BQU8sR0FBMkIsRUFBRSxDQUFDO1FBRTNDLEtBQTBCLFVBQW1CLEVBQW5CLDJDQUFtQixFQUFuQixpQ0FBbUIsRUFBbkIsSUFBbUIsRUFBRTtZQUExQyxJQUFNLFdBQVcsNEJBQUE7WUFDcEIsUUFBUSxXQUFXLENBQUMsSUFBSSxFQUFFO2dCQUN4QixLQUFLLG1DQUF1QixDQUFDLElBQUk7b0JBQy9CLElBQUksR0FBSSxXQUFvQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7b0JBQ3pDLE1BQU07Z0JBQ1IsS0FBSyxtQ0FBdUIsQ0FBQyw0QkFBNEI7b0JBQ3ZELElBQU0sb0JBQW9CLEdBQUcsV0FBc0IsQ0FBQztvQkFDcEQsT0FBTyxDQUFDLElBQUksQ0FBQzt3QkFDWCxPQUFPLEVBQUUsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFVBQVU7d0JBQy9DLE1BQU0sRUFBRSxJQUFJLENBQUMsNEJBQTRCLElBQUksNEJBQTRCO3FCQUMxRSxDQUFDLENBQUM7b0JBQ0gsSUFBSSxJQUFJLENBQUMsNEJBQTRCLEVBQUU7d0JBQ3JDLFlBQVksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO3FCQUNyRTtvQkFDRCxNQUFNO2FBQ1Q7U0FDRjtRQUVELE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLFlBQVksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUNILG1DQUFDO0FBQUQsQ0FBQyxBQTdFRCxDQUFrRCxjQUFXLEdBNkU1RDtBQTdFWSxvRUFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQ29pbiBhcyBDb2luQ29uZmlnIH0gZnJvbSAnQGJpdGdvL3N0YXRpY3MnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tICcuJztcbmltcG9ydCB7IEVudHJ5LCBUcmFuc2FjdGlvblJlY2lwaWVudCB9IGZyb20gJy4uL2Jhc2VDb2luL2lmYWNlJztcbmltcG9ydCB7IGluc3RydWN0aW9uUGFyYW1zRmFjdG9yeSB9IGZyb20gJy4vaW5zdHJ1Y3Rpb25QYXJhbXNGYWN0b3J5JztcbmltcG9ydCB7IEluc3RydWN0aW9uQnVpbGRlclR5cGVzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZ2V0U29sVG9rZW5Gcm9tQWRkcmVzcyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgQXRhSW5pdCwgTWVtbywgVHJhbnNhY3Rpb25FeHBsYW5hdGlvbiB9IGZyb20gJy4vaWZhY2UnO1xuaW1wb3J0IEJpZ051bWJlciBmcm9tICdiaWdudW1iZXIuanMnO1xuaW1wb3J0IHsgTm90U3VwcG9ydGVkIH0gZnJvbSAnLi4vYmFzZUNvaW4vZXJyb3JzJztcblxuY29uc3QgVFJBTlNGRVJfQU1PVU5UX1VOS05PV05fVEVYVCA9ICdUUkFOU0ZFUl9BTU9VTlRfVU5LTk9XTic7XG5cbmV4cG9ydCBjbGFzcyBBdGFJbml0aWFsaXphdGlvblRyYW5zYWN0aW9uIGV4dGVuZHMgVHJhbnNhY3Rpb24ge1xuICBwcml2YXRlIF90b2tlbkFjY291bnRSZW50RXhlbXB0QW1vdW50OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoX2NvaW5Db25maWc6IFJlYWRvbmx5PENvaW5Db25maWc+KSB7XG4gICAgc3VwZXIoX2NvaW5Db25maWcpO1xuICB9XG5cbiAgZ2V0IHRva2VuQWNjb3VudFJlbnRFeGVtcHRBbW91bnQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdG9rZW5BY2NvdW50UmVudEV4ZW1wdEFtb3VudDtcbiAgfVxuXG4gIHNldCB0b2tlbkFjY291bnRSZW50RXhlbXB0QW1vdW50KGFtb3VudDogc3RyaW5nKSB7XG4gICAgdGhpcy5fdG9rZW5BY2NvdW50UmVudEV4ZW1wdEFtb3VudCA9IGFtb3VudDtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICBsb2FkSW5wdXRzQW5kT3V0cHV0cygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX3NvbFRyYW5zYWN0aW9uIHx8IHRoaXMuX3NvbFRyYW5zYWN0aW9uLmluc3RydWN0aW9ucz8ubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG91dHB1dHM6IEVudHJ5W10gPSBbXTtcbiAgICBjb25zdCBpbnB1dHM6IEVudHJ5W10gPSBbXTtcbiAgICBjb25zdCBpbnN0cnVjdGlvblBhcmFtcyA9IGluc3RydWN0aW9uUGFyYW1zRmFjdG9yeSh0aGlzLnR5cGUsIHRoaXMuX3NvbFRyYW5zYWN0aW9uLmluc3RydWN0aW9ucyk7XG5cbiAgICBmb3IgKGNvbnN0IGluc3RydWN0aW9uIG9mIGluc3RydWN0aW9uUGFyYW1zKSB7XG4gICAgICBpZiAoaW5zdHJ1Y3Rpb24udHlwZSA9PT0gSW5zdHJ1Y3Rpb25CdWlsZGVyVHlwZXMuQ3JlYXRlQXNzb2NpYXRlZFRva2VuQWNjb3VudCkge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGdldFNvbFRva2VuRnJvbUFkZHJlc3MoaW5zdHJ1Y3Rpb24ucGFyYW1zLm1pbnRBZGRyZXNzLCB0aGlzLl9jb2luQ29uZmlnLm5ldHdvcmspO1xuICAgICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE5vdFN1cHBvcnRlZChcbiAgICAgICAgICAgICdJbnZhbGlkIHRyYW5zYWN0aW9uLCB0b2tlbiBtaW50IGFkZHJlc3Mgbm90IHN1cHBvcnRlZDogJyArIGluc3RydWN0aW9uLnBhcmFtcy5taW50QWRkcmVzcyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0cy5wdXNoKHtcbiAgICAgICAgICBhZGRyZXNzOiBpbnN0cnVjdGlvbi5wYXJhbXMub3duZXJBZGRyZXNzLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLnRva2VuQWNjb3VudFJlbnRFeGVtcHRBbW91bnQgfHwgVFJBTlNGRVJfQU1PVU5UX1VOS05PV05fVEVYVCxcbiAgICAgICAgICBjb2luOiB0b2tlbi5uYW1lLFxuICAgICAgICB9KTtcbiAgICAgICAgb3V0cHV0cy5wdXNoKHtcbiAgICAgICAgICBhZGRyZXNzOiBpbnN0cnVjdGlvbi5wYXJhbXMuYXRhQWRkcmVzcyxcbiAgICAgICAgICB2YWx1ZTogdGhpcy50b2tlbkFjY291bnRSZW50RXhlbXB0QW1vdW50IHx8IFRSQU5TRkVSX0FNT1VOVF9VTktOT1dOX1RFWFQsXG4gICAgICAgICAgY29pbjogdG9rZW4ubmFtZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX291dHB1dHMgPSBvdXRwdXRzO1xuICAgIHRoaXMuX2lucHV0cyA9IGlucHV0cztcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICBleHBsYWluVHJhbnNhY3Rpb24oKTogVHJhbnNhY3Rpb25FeHBsYW5hdGlvbiB7XG4gICAgY29uc3QgZGVjb2RlZEluc3RydWN0aW9ucyA9IGluc3RydWN0aW9uUGFyYW1zRmFjdG9yeSh0aGlzLl90eXBlLCB0aGlzLl9zb2xUcmFuc2FjdGlvbi5pbnN0cnVjdGlvbnMpO1xuXG4gICAgbGV0IG1lbW86IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgIGxldCBvdXRwdXRBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDApO1xuICAgIGNvbnN0IG91dHB1dHM6IFRyYW5zYWN0aW9uUmVjaXBpZW50W10gPSBbXTtcblxuICAgIGZvciAoY29uc3QgaW5zdHJ1Y3Rpb24gb2YgZGVjb2RlZEluc3RydWN0aW9ucykge1xuICAgICAgc3dpdGNoIChpbnN0cnVjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgSW5zdHJ1Y3Rpb25CdWlsZGVyVHlwZXMuTWVtbzpcbiAgICAgICAgICBtZW1vID0gKGluc3RydWN0aW9uIGFzIE1lbW8pLnBhcmFtcy5tZW1vO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEluc3RydWN0aW9uQnVpbGRlclR5cGVzLkNyZWF0ZUFzc29jaWF0ZWRUb2tlbkFjY291bnQ6XG4gICAgICAgICAgY29uc3QgY3JlYXRlQXRhSW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbiBhcyBBdGFJbml0O1xuICAgICAgICAgIG91dHB1dHMucHVzaCh7XG4gICAgICAgICAgICBhZGRyZXNzOiBjcmVhdGVBdGFJbnN0cnVjdGlvbi5wYXJhbXMuYXRhQWRkcmVzcyxcbiAgICAgICAgICAgIGFtb3VudDogdGhpcy50b2tlbkFjY291bnRSZW50RXhlbXB0QW1vdW50IHx8IFRSQU5TRkVSX0FNT1VOVF9VTktOT1dOX1RFWFQsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHRoaXMudG9rZW5BY2NvdW50UmVudEV4ZW1wdEFtb3VudCkge1xuICAgICAgICAgICAgb3V0cHV0QW1vdW50ID0gb3V0cHV0QW1vdW50LnBsdXModGhpcy50b2tlbkFjY291bnRSZW50RXhlbXB0QW1vdW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ2V0RXhwbGFpbmVkVHJhbnNhY3Rpb24ob3V0cHV0QW1vdW50LCBvdXRwdXRzLCBtZW1vKTtcbiAgfVxufVxuIl19