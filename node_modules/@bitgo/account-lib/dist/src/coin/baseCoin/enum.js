"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingOperationTypes = exports.AddressFormat = exports.TransactionType = void 0;
/**
 * Internal metadata. Defines the type of transaction.
 */
var TransactionType;
(function (TransactionType) {
    TransactionType[TransactionType["Send"] = 0] = "Send";
    // Send ERC721 compliant tokens
    TransactionType[TransactionType["SendERC721"] = 1] = "SendERC721";
    // Send ERC1155 compliant tokens
    TransactionType[TransactionType["SendERC1155"] = 2] = "SendERC1155";
    // Initialize a wallet on-chain (e.g. Multi-sig contract deployment)
    TransactionType[TransactionType["WalletInitialization"] = 3] = "WalletInitialization";
    // Initialize an address on-chain(e.g. Forwarder contract deployment)
    TransactionType[TransactionType["AddressInitialization"] = 4] = "AddressInitialization";
    // Initialized an associated token account
    TransactionType[TransactionType["AssociatedTokenAccountInitialization"] = 5] = "AssociatedTokenAccountInitialization";
    // Flush tokens from a forwarder address to its base address
    TransactionType[TransactionType["FlushTokens"] = 6] = "FlushTokens";
    // Flush native coins (eg. ETH) from a forwarder address to base address
    TransactionType[TransactionType["FlushCoins"] = 7] = "FlushCoins";
    // Send a raw single-sig transaction
    TransactionType[TransactionType["SingleSigSend"] = 8] = "SingleSigSend";
    // Update an account on-chain (e.g. Public key revelation operation for Tezos)
    TransactionType[TransactionType["AccountUpdate"] = 9] = "AccountUpdate";
    // Lock
    TransactionType[TransactionType["StakingLock"] = 10] = "StakingLock";
    // Vote
    TransactionType[TransactionType["StakingVote"] = 11] = "StakingVote";
    // Unvote
    TransactionType[TransactionType["StakingUnvote"] = 12] = "StakingUnvote";
    // Activate
    TransactionType[TransactionType["StakingActivate"] = 13] = "StakingActivate";
    // Unlock
    TransactionType[TransactionType["StakingUnlock"] = 14] = "StakingUnlock";
    // Withdraw
    TransactionType[TransactionType["StakingWithdraw"] = 15] = "StakingWithdraw";
    // Handle smart contract calls
    TransactionType[TransactionType["ContractCall"] = 16] = "ContractCall";
    // Deactivate
    TransactionType[TransactionType["StakingDeactivate"] = 17] = "StakingDeactivate";
    // Batch of multiple transactions broadcast as a single transaction
    TransactionType[TransactionType["Batch"] = 18] = "Batch";
    // Claim the staking rewards
    TransactionType[TransactionType["StakingClaim"] = 19] = "StakingClaim";
})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
/**
 * Generic list of encoding formats. Can be used as arguments for methods inputs.
 */
var AddressFormat;
(function (AddressFormat) {
    AddressFormat["hex"] = "hex";
    AddressFormat["base58"] = "base58";
    // format for westend addresses
    AddressFormat["substrate"] = "substrate";
    // format for polkadot mainnet addresses
    AddressFormat["polkadot"] = "polkadot";
})(AddressFormat = exports.AddressFormat || (exports.AddressFormat = {}));
var StakingOperationTypes;
(function (StakingOperationTypes) {
    StakingOperationTypes[StakingOperationTypes["LOCK"] = 0] = "LOCK";
    StakingOperationTypes[StakingOperationTypes["VOTE"] = 1] = "VOTE";
    StakingOperationTypes[StakingOperationTypes["UNVOTE"] = 2] = "UNVOTE";
    StakingOperationTypes[StakingOperationTypes["ACTIVATE"] = 3] = "ACTIVATE";
    StakingOperationTypes[StakingOperationTypes["UNLOCK"] = 4] = "UNLOCK";
    StakingOperationTypes[StakingOperationTypes["WITHDRAW"] = 5] = "WITHDRAW";
})(StakingOperationTypes = exports.StakingOperationTypes || (exports.StakingOperationTypes = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2luL2Jhc2VDb2luL2VudW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0dBRUc7QUFDSCxJQUFZLGVBd0NYO0FBeENELFdBQVksZUFBZTtJQUN6QixxREFBSSxDQUFBO0lBQ0osK0JBQStCO0lBQy9CLGlFQUFVLENBQUE7SUFDVixnQ0FBZ0M7SUFDaEMsbUVBQVcsQ0FBQTtJQUNYLG9FQUFvRTtJQUNwRSxxRkFBb0IsQ0FBQTtJQUNwQixxRUFBcUU7SUFDckUsdUZBQXFCLENBQUE7SUFDckIsMENBQTBDO0lBQzFDLHFIQUFvQyxDQUFBO0lBQ3BDLDREQUE0RDtJQUM1RCxtRUFBVyxDQUFBO0lBQ1gsd0VBQXdFO0lBQ3hFLGlFQUFVLENBQUE7SUFDVixvQ0FBb0M7SUFDcEMsdUVBQWEsQ0FBQTtJQUNiLDhFQUE4RTtJQUM5RSx1RUFBYSxDQUFBO0lBQ2IsT0FBTztJQUNQLG9FQUFXLENBQUE7SUFDWCxPQUFPO0lBQ1Asb0VBQVcsQ0FBQTtJQUNYLFNBQVM7SUFDVCx3RUFBYSxDQUFBO0lBQ2IsV0FBVztJQUNYLDRFQUFlLENBQUE7SUFDZixTQUFTO0lBQ1Qsd0VBQWEsQ0FBQTtJQUNiLFdBQVc7SUFDWCw0RUFBZSxDQUFBO0lBQ2YsOEJBQThCO0lBQzlCLHNFQUFZLENBQUE7SUFDWixhQUFhO0lBQ2IsZ0ZBQWlCLENBQUE7SUFDakIsbUVBQW1FO0lBQ25FLHdEQUFLLENBQUE7SUFDTCw0QkFBNEI7SUFDNUIsc0VBQVksQ0FBQTtBQUNkLENBQUMsRUF4Q1csZUFBZSxHQUFmLHVCQUFlLEtBQWYsdUJBQWUsUUF3QzFCO0FBRUQ7O0dBRUc7QUFDSCxJQUFZLGFBT1g7QUFQRCxXQUFZLGFBQWE7SUFDdkIsNEJBQVcsQ0FBQTtJQUNYLGtDQUFpQixDQUFBO0lBQ2pCLCtCQUErQjtJQUMvQix3Q0FBdUIsQ0FBQTtJQUN2Qix3Q0FBd0M7SUFDeEMsc0NBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQVBXLGFBQWEsR0FBYixxQkFBYSxLQUFiLHFCQUFhLFFBT3hCO0FBRUQsSUFBWSxxQkFPWDtBQVBELFdBQVkscUJBQXFCO0lBQy9CLGlFQUFJLENBQUE7SUFDSixpRUFBSSxDQUFBO0lBQ0oscUVBQU0sQ0FBQTtJQUNOLHlFQUFRLENBQUE7SUFDUixxRUFBTSxDQUFBO0lBQ04seUVBQVEsQ0FBQTtBQUNWLENBQUMsRUFQVyxxQkFBcUIsR0FBckIsNkJBQXFCLEtBQXJCLDZCQUFxQixRQU9oQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSW50ZXJuYWwgbWV0YWRhdGEuIERlZmluZXMgdGhlIHR5cGUgb2YgdHJhbnNhY3Rpb24uXG4gKi9cbmV4cG9ydCBlbnVtIFRyYW5zYWN0aW9uVHlwZSB7XG4gIFNlbmQsXG4gIC8vIFNlbmQgRVJDNzIxIGNvbXBsaWFudCB0b2tlbnNcbiAgU2VuZEVSQzcyMSxcbiAgLy8gU2VuZCBFUkMxMTU1IGNvbXBsaWFudCB0b2tlbnNcbiAgU2VuZEVSQzExNTUsXG4gIC8vIEluaXRpYWxpemUgYSB3YWxsZXQgb24tY2hhaW4gKGUuZy4gTXVsdGktc2lnIGNvbnRyYWN0IGRlcGxveW1lbnQpXG4gIFdhbGxldEluaXRpYWxpemF0aW9uLFxuICAvLyBJbml0aWFsaXplIGFuIGFkZHJlc3Mgb24tY2hhaW4oZS5nLiBGb3J3YXJkZXIgY29udHJhY3QgZGVwbG95bWVudClcbiAgQWRkcmVzc0luaXRpYWxpemF0aW9uLFxuICAvLyBJbml0aWFsaXplZCBhbiBhc3NvY2lhdGVkIHRva2VuIGFjY291bnRcbiAgQXNzb2NpYXRlZFRva2VuQWNjb3VudEluaXRpYWxpemF0aW9uLFxuICAvLyBGbHVzaCB0b2tlbnMgZnJvbSBhIGZvcndhcmRlciBhZGRyZXNzIHRvIGl0cyBiYXNlIGFkZHJlc3NcbiAgRmx1c2hUb2tlbnMsXG4gIC8vIEZsdXNoIG5hdGl2ZSBjb2lucyAoZWcuIEVUSCkgZnJvbSBhIGZvcndhcmRlciBhZGRyZXNzIHRvIGJhc2UgYWRkcmVzc1xuICBGbHVzaENvaW5zLFxuICAvLyBTZW5kIGEgcmF3IHNpbmdsZS1zaWcgdHJhbnNhY3Rpb25cbiAgU2luZ2xlU2lnU2VuZCxcbiAgLy8gVXBkYXRlIGFuIGFjY291bnQgb24tY2hhaW4gKGUuZy4gUHVibGljIGtleSByZXZlbGF0aW9uIG9wZXJhdGlvbiBmb3IgVGV6b3MpXG4gIEFjY291bnRVcGRhdGUsXG4gIC8vIExvY2tcbiAgU3Rha2luZ0xvY2ssXG4gIC8vIFZvdGVcbiAgU3Rha2luZ1ZvdGUsXG4gIC8vIFVudm90ZVxuICBTdGFraW5nVW52b3RlLFxuICAvLyBBY3RpdmF0ZVxuICBTdGFraW5nQWN0aXZhdGUsXG4gIC8vIFVubG9ja1xuICBTdGFraW5nVW5sb2NrLFxuICAvLyBXaXRoZHJhd1xuICBTdGFraW5nV2l0aGRyYXcsXG4gIC8vIEhhbmRsZSBzbWFydCBjb250cmFjdCBjYWxsc1xuICBDb250cmFjdENhbGwsXG4gIC8vIERlYWN0aXZhdGVcbiAgU3Rha2luZ0RlYWN0aXZhdGUsXG4gIC8vIEJhdGNoIG9mIG11bHRpcGxlIHRyYW5zYWN0aW9ucyBicm9hZGNhc3QgYXMgYSBzaW5nbGUgdHJhbnNhY3Rpb25cbiAgQmF0Y2gsXG4gIC8vIENsYWltIHRoZSBzdGFraW5nIHJld2FyZHNcbiAgU3Rha2luZ0NsYWltLFxufVxuXG4vKipcbiAqIEdlbmVyaWMgbGlzdCBvZiBlbmNvZGluZyBmb3JtYXRzLiBDYW4gYmUgdXNlZCBhcyBhcmd1bWVudHMgZm9yIG1ldGhvZHMgaW5wdXRzLlxuICovXG5leHBvcnQgZW51bSBBZGRyZXNzRm9ybWF0IHtcbiAgaGV4ID0gJ2hleCcsXG4gIGJhc2U1OCA9ICdiYXNlNTgnLFxuICAvLyBmb3JtYXQgZm9yIHdlc3RlbmQgYWRkcmVzc2VzXG4gIHN1YnN0cmF0ZSA9ICdzdWJzdHJhdGUnLFxuICAvLyBmb3JtYXQgZm9yIHBvbGthZG90IG1haW5uZXQgYWRkcmVzc2VzXG4gIHBvbGthZG90ID0gJ3BvbGthZG90Jyxcbn1cblxuZXhwb3J0IGVudW0gU3Rha2luZ09wZXJhdGlvblR5cGVzIHtcbiAgTE9DSyxcbiAgVk9URSxcbiAgVU5WT1RFLFxuICBBQ1RJVkFURSxcbiAgVU5MT0NLLFxuICBXSVRIRFJBVyxcbn1cbiJdfQ==