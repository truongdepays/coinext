"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnsupportedTokenError = exports.InvalidKey = exports.NotSupported = exports.NotImplementedError = exports.InvalidSignatureError = exports.InvalidParameterValueError = exports.InvalidTransactionError = exports.ExtendTransactionError = exports.UtilsError = exports.BuildTransactionError = exports.SigningError = exports.ParseTransactionError = exports.ExtendableError = void 0;
/**
 * This base class ensures that our stack trace is captured properly but also that we have classes of errors
 * that can be found in a switch.
 */
var ExtendableError = /** @class */ (function (_super) {
    __extends(ExtendableError, _super);
    function ExtendableError(message) {
        var _this = _super.call(this, message) || this;
        _this.name = _this.constructor.name;
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(_this, _this.constructor);
        }
        else {
            _this.stack = new Error(message).stack;
        }
        return _this;
    }
    return ExtendableError;
}(Error));
exports.ExtendableError = ExtendableError;
var ParseTransactionError = /** @class */ (function (_super) {
    __extends(ParseTransactionError, _super);
    function ParseTransactionError(message) {
        return _super.call(this, message) || this;
    }
    return ParseTransactionError;
}(ExtendableError));
exports.ParseTransactionError = ParseTransactionError;
var SigningError = /** @class */ (function (_super) {
    __extends(SigningError, _super);
    function SigningError(message) {
        return _super.call(this, message) || this;
    }
    return SigningError;
}(ExtendableError));
exports.SigningError = SigningError;
var BuildTransactionError = /** @class */ (function (_super) {
    __extends(BuildTransactionError, _super);
    function BuildTransactionError(message) {
        return _super.call(this, message) || this;
    }
    return BuildTransactionError;
}(ExtendableError));
exports.BuildTransactionError = BuildTransactionError;
var UtilsError = /** @class */ (function (_super) {
    __extends(UtilsError, _super);
    function UtilsError(message) {
        return _super.call(this, message) || this;
    }
    return UtilsError;
}(ExtendableError));
exports.UtilsError = UtilsError;
var ExtendTransactionError = /** @class */ (function (_super) {
    __extends(ExtendTransactionError, _super);
    function ExtendTransactionError(message) {
        return _super.call(this, message) || this;
    }
    return ExtendTransactionError;
}(ExtendableError));
exports.ExtendTransactionError = ExtendTransactionError;
/**
 * Error for invalid transaction status
 */
var InvalidTransactionError = /** @class */ (function (_super) {
    __extends(InvalidTransactionError, _super);
    function InvalidTransactionError(message) {
        return _super.call(this, message) || this;
    }
    return InvalidTransactionError;
}(ExtendableError));
exports.InvalidTransactionError = InvalidTransactionError;
/**
 * Error for an invalid value for a contract method parameter
 */
var InvalidParameterValueError = /** @class */ (function (_super) {
    __extends(InvalidParameterValueError, _super);
    function InvalidParameterValueError(message) {
        return _super.call(this, message) || this;
    }
    return InvalidParameterValueError;
}(ExtendableError));
exports.InvalidParameterValueError = InvalidParameterValueError;
/**
 * Error produced by not truthy signature values
 */
var InvalidSignatureError = /** @class */ (function (_super) {
    __extends(InvalidSignatureError, _super);
    function InvalidSignatureError(message) {
        return _super.call(this, message) || this;
    }
    return InvalidSignatureError;
}(ExtendableError));
exports.InvalidSignatureError = InvalidSignatureError;
/**
 * Error for an method that needs to be implemented
 */
var NotImplementedError = /** @class */ (function (_super) {
    __extends(NotImplementedError, _super);
    function NotImplementedError(message) {
        return _super.call(this, message) || this;
    }
    return NotImplementedError;
}(ExtendableError));
exports.NotImplementedError = NotImplementedError;
/**
 * Error for not supported features
 */
var NotSupported = /** @class */ (function (_super) {
    __extends(NotSupported, _super);
    function NotSupported(message) {
        return _super.call(this, message) || this;
    }
    return NotSupported;
}(ExtendableError));
exports.NotSupported = NotSupported;
/**
 * Error for invalid seed, public, or private keys
 */
var InvalidKey = /** @class */ (function (_super) {
    __extends(InvalidKey, _super);
    function InvalidKey(message) {
        return _super.call(this, message) || this;
    }
    return InvalidKey;
}(ExtendableError));
exports.InvalidKey = InvalidKey;
/**
 * Error for invalid mint/token
 */
var UnsupportedTokenError = /** @class */ (function (_super) {
    __extends(UnsupportedTokenError, _super);
    function UnsupportedTokenError(message) {
        return _super.call(this, message) || this;
    }
    return UnsupportedTokenError;
}(ExtendableError));
exports.UnsupportedTokenError = UnsupportedTokenError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvaW4vYmFzZUNvaW4vZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7R0FHRztBQUNIO0lBQXFDLG1DQUFLO0lBQ3hDLHlCQUFZLE9BQU87UUFBbkIsWUFDRSxrQkFBTSxPQUFPLENBQUMsU0FPZjtRQU5DLEtBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDbEMsSUFBSSxPQUFPLEtBQUssQ0FBQyxpQkFBaUIsS0FBSyxVQUFVLEVBQUU7WUFDakQsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEtBQUksRUFBRSxLQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDakQ7YUFBTTtZQUNMLEtBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDO1NBQ3ZDOztJQUNILENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUFWRCxDQUFxQyxLQUFLLEdBVXpDO0FBVlksMENBQWU7QUFZNUI7SUFBMkMseUNBQWU7SUFDeEQsK0JBQVksT0FBZTtlQUN6QixrQkFBTSxPQUFPLENBQUM7SUFDaEIsQ0FBQztJQUNILDRCQUFDO0FBQUQsQ0FBQyxBQUpELENBQTJDLGVBQWUsR0FJekQ7QUFKWSxzREFBcUI7QUFNbEM7SUFBa0MsZ0NBQWU7SUFDL0Msc0JBQVksT0FBZTtlQUN6QixrQkFBTSxPQUFPLENBQUM7SUFDaEIsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQyxBQUpELENBQWtDLGVBQWUsR0FJaEQ7QUFKWSxvQ0FBWTtBQU16QjtJQUEyQyx5Q0FBZTtJQUN4RCwrQkFBWSxPQUFlO2VBQ3pCLGtCQUFNLE9BQU8sQ0FBQztJQUNoQixDQUFDO0lBQ0gsNEJBQUM7QUFBRCxDQUFDLEFBSkQsQ0FBMkMsZUFBZSxHQUl6RDtBQUpZLHNEQUFxQjtBQU1sQztJQUFnQyw4QkFBZTtJQUM3QyxvQkFBWSxPQUFlO2VBQ3pCLGtCQUFNLE9BQU8sQ0FBQztJQUNoQixDQUFDO0lBQ0gsaUJBQUM7QUFBRCxDQUFDLEFBSkQsQ0FBZ0MsZUFBZSxHQUk5QztBQUpZLGdDQUFVO0FBTXZCO0lBQTRDLDBDQUFlO0lBQ3pELGdDQUFZLE9BQWU7ZUFDekIsa0JBQU0sT0FBTyxDQUFDO0lBQ2hCLENBQUM7SUFDSCw2QkFBQztBQUFELENBQUMsQUFKRCxDQUE0QyxlQUFlLEdBSTFEO0FBSlksd0RBQXNCO0FBTW5DOztHQUVHO0FBQ0g7SUFBNkMsMkNBQWU7SUFDMUQsaUNBQVksT0FBZTtlQUN6QixrQkFBTSxPQUFPLENBQUM7SUFDaEIsQ0FBQztJQUNILDhCQUFDO0FBQUQsQ0FBQyxBQUpELENBQTZDLGVBQWUsR0FJM0Q7QUFKWSwwREFBdUI7QUFNcEM7O0dBRUc7QUFDSDtJQUFnRCw4Q0FBZTtJQUM3RCxvQ0FBWSxPQUFlO2VBQ3pCLGtCQUFNLE9BQU8sQ0FBQztJQUNoQixDQUFDO0lBQ0gsaUNBQUM7QUFBRCxDQUFDLEFBSkQsQ0FBZ0QsZUFBZSxHQUk5RDtBQUpZLGdFQUEwQjtBQU12Qzs7R0FFRztBQUNIO0lBQTJDLHlDQUFlO0lBQ3hELCtCQUFZLE9BQWU7ZUFDekIsa0JBQU0sT0FBTyxDQUFDO0lBQ2hCLENBQUM7SUFDSCw0QkFBQztBQUFELENBQUMsQUFKRCxDQUEyQyxlQUFlLEdBSXpEO0FBSlksc0RBQXFCO0FBTWxDOztHQUVHO0FBQ0g7SUFBeUMsdUNBQWU7SUFDdEQsNkJBQVksT0FBZTtlQUN6QixrQkFBTSxPQUFPLENBQUM7SUFDaEIsQ0FBQztJQUNILDBCQUFDO0FBQUQsQ0FBQyxBQUpELENBQXlDLGVBQWUsR0FJdkQ7QUFKWSxrREFBbUI7QUFNaEM7O0dBRUc7QUFDSDtJQUFrQyxnQ0FBZTtJQUMvQyxzQkFBWSxPQUFlO2VBQ3pCLGtCQUFNLE9BQU8sQ0FBQztJQUNoQixDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDLEFBSkQsQ0FBa0MsZUFBZSxHQUloRDtBQUpZLG9DQUFZO0FBTXpCOztHQUVHO0FBQ0g7SUFBZ0MsOEJBQWU7SUFDN0Msb0JBQVksT0FBZTtlQUN6QixrQkFBTSxPQUFPLENBQUM7SUFDaEIsQ0FBQztJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQUpELENBQWdDLGVBQWUsR0FJOUM7QUFKWSxnQ0FBVTtBQU12Qjs7R0FFRztBQUNIO0lBQTJDLHlDQUFlO0lBQ3hELCtCQUFZLE9BQWU7ZUFDekIsa0JBQU0sT0FBTyxDQUFDO0lBQ2hCLENBQUM7SUFDSCw0QkFBQztBQUFELENBQUMsQUFKRCxDQUEyQyxlQUFlLEdBSXpEO0FBSlksc0RBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGJhc2UgY2xhc3MgZW5zdXJlcyB0aGF0IG91ciBzdGFjayB0cmFjZSBpcyBjYXB0dXJlZCBwcm9wZXJseSBidXQgYWxzbyB0aGF0IHdlIGhhdmUgY2xhc3NlcyBvZiBlcnJvcnNcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGluIGEgc3dpdGNoLlxuICovXG5leHBvcnQgY2xhc3MgRXh0ZW5kYWJsZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIGlmICh0eXBlb2YgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YWNrID0gbmV3IEVycm9yKG1lc3NhZ2UpLnN0YWNrO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGFyc2VUcmFuc2FjdGlvbkVycm9yIGV4dGVuZHMgRXh0ZW5kYWJsZUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNpZ25pbmdFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCdWlsZFRyYW5zYWN0aW9uRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXRpbHNFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFeHRlbmRUcmFuc2FjdGlvbkVycm9yIGV4dGVuZHMgRXh0ZW5kYWJsZUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFcnJvciBmb3IgaW52YWxpZCB0cmFuc2FjdGlvbiBzdGF0dXNcbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRUcmFuc2FjdGlvbkVycm9yIGV4dGVuZHMgRXh0ZW5kYWJsZUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFcnJvciBmb3IgYW4gaW52YWxpZCB2YWx1ZSBmb3IgYSBjb250cmFjdCBtZXRob2QgcGFyYW1ldGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG59XG5cbi8qKlxuICogRXJyb3IgcHJvZHVjZWQgYnkgbm90IHRydXRoeSBzaWduYXR1cmUgdmFsdWVzXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkU2lnbmF0dXJlRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm9yIGZvciBhbiBtZXRob2QgdGhhdCBuZWVkcyB0byBiZSBpbXBsZW1lbnRlZFxuICovXG5leHBvcnQgY2xhc3MgTm90SW1wbGVtZW50ZWRFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG59XG5cbi8qKlxuICogRXJyb3IgZm9yIG5vdCBzdXBwb3J0ZWQgZmVhdHVyZXNcbiAqL1xuZXhwb3J0IGNsYXNzIE5vdFN1cHBvcnRlZCBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG59XG5cbi8qKlxuICogRXJyb3IgZm9yIGludmFsaWQgc2VlZCwgcHVibGljLCBvciBwcml2YXRlIGtleXNcbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRLZXkgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm9yIGZvciBpbnZhbGlkIG1pbnQvdG9rZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFVuc3VwcG9ydGVkVG9rZW5FcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG59XG4iXX0=