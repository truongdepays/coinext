"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlsKeyPair = void 0;
var assert_1 = __importDefault(require("assert"));
var BLS = __importStar(require("@bitgo/bls-dkg"));
var errors_1 = require("./errors");
var iface_1 = require("./iface");
var crypto_1 = require("../../utils/crypto");
var DEFAULT_SIGNATURE_THRESHOLD = 2;
var DEFAULT_SIGNATURE_PARTICIPANTS = 3;
/**
 * Base class for BLS keypairs.
 */
var BlsKeyPair = /** @class */ (function () {
    /**
     * Public constructor. By default, creates a key pair with a random polynomial.
     *
     * @param {KeyPairOptions} source Either a dkg options, a public and secret shares, or a private key
     */
    function BlsKeyPair(source) {
        if (!source) {
            this.createShares(DEFAULT_SIGNATURE_THRESHOLD, DEFAULT_SIGNATURE_PARTICIPANTS);
        }
        else if (iface_1.isDkg(source)) {
            this.createShares(source.threshold, source.participants);
        }
        else if (iface_1.isBlsKey(source)) {
            assert_1.default(source.secretShares.every(crypto_1.isValidBLSPrivateKey), 'Invalid private keys');
            assert_1.default(crypto_1.isValidBLSPublicKey(source.publicShare), 'Invalid public key');
            this.keyPair = source;
        }
        else if (iface_1.isPrivateKey(source)) {
            this.keyPair = {
                prv: source.prv,
                publicShare: '',
                secretShares: [],
            };
        }
        else {
            throw new Error('Invalid key pair options');
        }
    }
    BlsKeyPair.prototype.createShares = function (threshold, participants) {
        if (participants < threshold) {
            throw new Error('Participants should be greater than threshold');
        }
        var polynomial = BLS.generatePolynomial(threshold);
        var keySecretShares = BLS.secretShares(polynomial, participants);
        var keyPublicShare = BLS.publicShare(polynomial);
        this.keyPair = {
            secretShares: keySecretShares.map(function (secretShare) { return crypto_1.bigIntToHex(secretShare); }),
            publicShare: crypto_1.bigIntToHex(keyPublicShare),
        };
    };
    /**
     * Note - this is not possible using BLS. BLS does not support prvkey derived key gen
     *
     * @param {string[]} prv a hexadecimal private key
     */
    BlsKeyPair.prototype.recordKeysFromPrivateKey = function (prv) {
        throw new errors_1.NotImplementedError('Private key derivation is not supported in bls');
    };
    /**
     * Note - this is not possible using BLS. BLS does not support pubkey derived key gen
     *
     * @param {string} pub - An extended, compressed, or uncompressed public key
     */
    BlsKeyPair.prototype.recordKeysFromPublicKey = function (pub) {
        throw new errors_1.NotImplementedError('Public key derivation is not supported in bls');
    };
    BlsKeyPair.prototype.getAddress = function (format) {
        throw new errors_1.NotImplementedError('getAddress not implemented');
    };
    BlsKeyPair.prototype.getKeys = function () {
        throw new errors_1.NotImplementedError('getKeys not implemented');
    };
    /**
     * Signs bytes using the key pair
     *
     * @param msg The message bytes to sign
     * @return signature of the bytes using this keypair
     */
    BlsKeyPair.prototype.sign = function (msg) {
        return __awaiter(this, void 0, void 0, function () {
            var signedMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.keyPair.prv) return [3 /*break*/, 2];
                        return [4 /*yield*/, BLS.sign(msg, BigInt(this.keyPair.prv))];
                    case 1:
                        signedMessage = _a.sent();
                        return [2 /*return*/, crypto_1.bigIntToHex(signedMessage)];
                    case 2: throw new Error('Missing private key');
                }
            });
        });
    };
    /**
     * Aggregates the secret shares of different key pairs into one private key
     *
     * @param prvKeys an array of secret shares
     * @returns a private key
     */
    BlsKeyPair.aggregatePrvkeys = function (prvKeys) {
        assert_1.default(prvKeys.every(crypto_1.isValidBLSPrivateKey), 'Invalid private keys');
        try {
            var secretShares = prvKeys.map(function (secretShare) { return BigInt(secretShare); });
            var prv = BLS.mergeSecretShares(secretShares);
            return crypto_1.bigIntToHex(prv);
        }
        catch (e) {
            throw new Error('Error aggregating prvkeys: ' + e);
        }
    };
    /**
     * Aggregates the public shares of different key pairs into a common public key
     *
     * @param pubKeys an array of public shares
     * @returns a common public key
     */
    BlsKeyPair.aggregatePubkeys = function (pubKeys) {
        try {
            var secretShares = pubKeys.map(function (secretShare) { return BigInt(secretShare); });
            var commonPubKey = BLS.mergePublicShares(secretShares);
            return crypto_1.bigIntToHex(commonPubKey);
        }
        catch (e) {
            throw new Error('Error aggregating pubkeys: ' + e);
        }
    };
    /**
     * Aggregates the message signed by different key pairs into one sign
     *
     * @param signatures the message signed by different key pairs. The signer id is relevant to ensure a valid signature.
     * @example <caption> E.g., the message is signed by user and wallet, then signatures would be:</caption>
     * {
     *   1: BigInt(messageSignedWithUserPrv),
     *   3: BigInt(messageSignedWithWalletPrv),
     * }
     * @returns a signature combining all the provided signed messages
     */
    BlsKeyPair.aggregateSignatures = function (signatures) {
        try {
            var signature = BLS.mergeSignatures(signatures);
            return crypto_1.bigIntToHex(signature);
        }
        catch (e) {
            throw new Error('Error aggregating signatures: ' + e);
        }
    };
    /**
     * Verifies the signature for this key pair
     * @param pub The public key with which to verify the signature
     * @param msg The message to verify the signature with
     * @param signature the signature to verify
     * @return true if the signature is valid, else false
     */
    BlsKeyPair.verifySignature = function (pub, msg, signature) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(crypto_1.isValidBLSPublicKey(pub), "Invalid public key: " + pub);
                        return [4 /*yield*/, BLS.verify(BigInt(signature), msg, BigInt(pub))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return BlsKeyPair;
}());
exports.BlsKeyPair = BlsKeyPair;
//# sourceMappingURL=data:application/json;base64,