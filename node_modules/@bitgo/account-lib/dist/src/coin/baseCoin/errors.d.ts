/**
 * This base class ensures that our stack trace is captured properly but also that we have classes of errors
 * that can be found in a switch.
 */
export declare class ExtendableError extends Error {
    constructor(message: any);
}
export declare class ParseTransactionError extends ExtendableError {
    constructor(message: string);
}
export declare class SigningError extends ExtendableError {
    constructor(message: string);
}
export declare class BuildTransactionError extends ExtendableError {
    constructor(message: string);
}
export declare class UtilsError extends ExtendableError {
    constructor(message: string);
}
export declare class ExtendTransactionError extends ExtendableError {
    constructor(message: string);
}
/**
 * Error for invalid transaction status
 */
export declare class InvalidTransactionError extends ExtendableError {
    constructor(message: string);
}
/**
 * Error for an invalid value for a contract method parameter
 */
export declare class InvalidParameterValueError extends ExtendableError {
    constructor(message: string);
}
/**
 * Error produced by not truthy signature values
 */
export declare class InvalidSignatureError extends ExtendableError {
    constructor(message: string);
}
/**
 * Error for an method that needs to be implemented
 */
export declare class NotImplementedError extends ExtendableError {
    constructor(message: string);
}
/**
 * Error for not supported features
 */
export declare class NotSupported extends ExtendableError {
    constructor(message: string);
}
/**
 * Error for invalid seed, public, or private keys
 */
export declare class InvalidKey extends ExtendableError {
    constructor(message: string);
}
/**
 * Error for invalid mint/token
 */
export declare class UnsupportedTokenError extends ExtendableError {
    constructor(message: string);
}
//# sourceMappingURL=errors.d.ts.map