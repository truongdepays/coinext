"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseTransactionBuilder = void 0;
var errors_1 = require("./errors");
/**
 * Generic transaction builder to be extended with coin specific logic.
 * Provide a set of default steps (i.e. from, sign, build) and enforces mandatory validations.
 */
var BaseTransactionBuilder = /** @class */ (function () {
    /**
     * Base constructor.
     *
     * @param _coinConfig BaseCoin from statics library
     */
    function BaseTransactionBuilder(_coinConfig) {
        this._coinConfig = _coinConfig;
    }
    /**
     * Parse a transaction based on existing data. The input format is determined by the coin
     * extending this class. Some examples are hex, base64, or JSON.
     *
     * @param rawTransaction A raw transaction to be parsed
     */
    BaseTransactionBuilder.prototype.from = function (rawTransaction) {
        this.validateRawTransaction(rawTransaction);
        this.transaction = this.fromImplementation(rawTransaction);
    };
    /**
     * Validate keys and sign the transaction.
     *
     * @param key One of the keys associated with this transaction
     */
    BaseTransactionBuilder.prototype.sign = function (key) {
        this.validateKey(key);
        if (!this.transaction.canSign(key)) {
            throw new errors_1.SigningError('Private key cannot sign the transaction');
        }
        this.transaction = this.signImplementation(key);
    };
    /**
     * Adds a signature to the transaction.
     *
     * @param publicKey public key that produced the signature
     * @param signature raw signature as a hex encoded Buffer
     */
    BaseTransactionBuilder.prototype.addSignature = function (publicKey, signature) {
        throw new errors_1.SigningError(this.coinName() + " does not support adding signatures directly.");
    };
    /**
     * Finalize the transaction by performing any extra step like calculating hashes, verifying
     * integrity, or adding default values.
     *
     * @returns valid coin specific transaction (signed or unsigned)
     */
    BaseTransactionBuilder.prototype.build = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.validateTransaction(this.transaction);
                return [2 /*return*/, this.buildImplementation()];
            });
        });
    };
    /**
     * Get the underlying coin full name as specified in the statics library.
     */
    BaseTransactionBuilder.prototype.displayName = function () {
        return this._coinConfig.fullName;
    };
    /**
     * Get the underlying coin full name as specified in the statics library.
     */
    BaseTransactionBuilder.prototype.coinName = function () {
        return this._coinConfig.name;
    };
    /**
     * Verified validity windows params if them exist and return a valid validity windows.
     * Unit param must be specified
     * If params are not consistent, default params will be return based on firstValid and minDuration
     * @param {ValidityWindow} params validity windows parameters to validate.
     * @param {String} params.unit Parameter that could be 'blockheight' or 'timestamp'
     * @param {Number} [params.minDuration] Optional - Minimum duration of the window
     * @param {Number} [params.maxDuration] Optional - Maximum duration of the window
     * @param {Number} [params.firstValid] Optional - First valid value
     * @param {Number} [params.lastValid] Optional - Last valid value
     * @returns {ValidityWindow} verified validity windows or default values
     */
    BaseTransactionBuilder.prototype.getValidityWindow = function (params) {
        if (!params.unit || (params.unit !== 'timestamp' && params.unit !== 'blockheight')) {
            throw new Error('Unit parameter must be specified as blockheight or timestamp');
        }
        var unit = params.unit;
        var defaultMinDuration;
        var defaultMaxDuration;
        var defaultFirstValid;
        var defaultLastValid;
        /* Set Default Params
          minimum duration is set as 1 hr (3600000 msec) if unit is timestamp or 20 blocks if it is blockheight
          maximum duration is set as 1 year (31536000000 msec) if unit is timestamp or 1000000 blocks if it is blockheight.
         */
        if (unit === 'timestamp') {
            defaultMinDuration = 0;
            defaultMaxDuration = 31536000000;
            defaultFirstValid = Date.now();
            defaultLastValid = defaultFirstValid + defaultMaxDuration;
        }
        else {
            defaultMinDuration = 0;
            defaultMaxDuration = 1000000;
            defaultFirstValid = 0;
            defaultLastValid = defaultFirstValid + defaultMaxDuration;
        }
        // If any params exist, they will be used, otherwise it will be used default params.
        var firstValid = params.firstValid || defaultFirstValid;
        var lastValid = params.lastValid || defaultLastValid;
        var minDuration = params.minDuration || defaultMinDuration;
        var maxDuration = params.maxDuration || defaultMaxDuration;
        /* Validate Params:
          minDuration < maxDuration
          firstValid < lastValid
          firstValid + minDuration <= lastValid <= firstValid + maxDuration
         */
        if (minDuration >= maxDuration) {
            throw new Error("Expected maxDuration (" + maxDuration + ") to be grather than minDuration (" + minDuration + ")");
        }
        firstValid = firstValid >= 0 ? firstValid : defaultFirstValid;
        minDuration = minDuration >= 0 ? minDuration : defaultMinDuration;
        maxDuration = maxDuration > minDuration ? maxDuration : defaultMaxDuration;
        lastValid =
            lastValid >= firstValid + minDuration && lastValid <= firstValid + maxDuration
                ? lastValid
                : firstValid + maxDuration;
        return {
            firstValid: firstValid,
            lastValid: lastValid,
            minDuration: minDuration,
            maxDuration: maxDuration,
            unit: unit,
        };
    };
    return BaseTransactionBuilder;
}());
exports.BaseTransactionBuilder = BaseTransactionBuilder;
//# sourceMappingURL=data:application/json;base64,