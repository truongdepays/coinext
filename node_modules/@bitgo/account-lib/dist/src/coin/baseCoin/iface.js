"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBlsKey = exports.isDkg = exports.isPublicKey = exports.isPrivateKey = exports.isSeed = void 0;
/**
 * @param source
 */
function isSeed(source) {
    return source.seed !== undefined;
}
exports.isSeed = isSeed;
/**
 * @param source
 */
function isPrivateKey(source) {
    return source.prv !== undefined;
}
exports.isPrivateKey = isPrivateKey;
/**
 * @param source
 */
function isPublicKey(source) {
    return source.pub !== undefined;
}
exports.isPublicKey = isPublicKey;
/**
 * @param source
 */
function isDkg(source) {
    var dkg = source;
    return dkg.threshold !== undefined && dkg.participants !== undefined;
}
exports.isDkg = isDkg;
function isBlsKey(source) {
    var bls = source;
    return bls.publicShare !== undefined && bls.secretShares !== undefined;
}
exports.isBlsKey = isBlsKey;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWZhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29pbi9iYXNlQ29pbi9pZmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFrREE7O0dBRUc7QUFDSCxTQUFnQixNQUFNLENBQUMsTUFBc0I7SUFDM0MsT0FBUSxNQUFlLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQztBQUM3QyxDQUFDO0FBRkQsd0JBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLFlBQVksQ0FBQyxNQUFzQjtJQUNqRCxPQUFRLE1BQXFCLENBQUMsR0FBRyxLQUFLLFNBQVMsQ0FBQztBQUNsRCxDQUFDO0FBRkQsb0NBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLFdBQVcsQ0FBQyxNQUFzQjtJQUNoRCxPQUFRLE1BQW9CLENBQUMsR0FBRyxLQUFLLFNBQVMsQ0FBQztBQUNqRCxDQUFDO0FBRkQsa0NBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLEtBQUssQ0FBQyxNQUFzQjtJQUMxQyxJQUFNLEdBQUcsR0FBRyxNQUFvQixDQUFDO0lBQ2pDLE9BQU8sR0FBRyxDQUFDLFNBQVMsS0FBSyxTQUFTLElBQUksR0FBRyxDQUFDLFlBQVksS0FBSyxTQUFTLENBQUM7QUFDdkUsQ0FBQztBQUhELHNCQUdDO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLE1BQXNCO0lBQzdDLElBQU0sR0FBRyxHQUFHLE1BQWlCLENBQUM7SUFDOUIsT0FBTyxHQUFHLENBQUMsV0FBVyxLQUFLLFNBQVMsSUFBSSxHQUFHLENBQUMsWUFBWSxLQUFLLFNBQVMsQ0FBQztBQUN6RSxDQUFDO0FBSEQsNEJBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlVHJhbnNhY3Rpb25CdWlsZGVyIH0gZnJvbSAnLi9iYXNlVHJhbnNhY3Rpb25CdWlsZGVyJztcbmltcG9ydCB7IEJhc2VUcmFuc2FjdGlvbkJ1aWxkZXJGYWN0b3J5IH0gZnJvbSAnLi9iYXNlVHJhbnNhY3Rpb25CdWlsZGVyRmFjdG9yeSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUtleSB7XG4gIGtleTogYW55O1xufVxuXG4vKipcbiAqIEEgcHJpdmF0ZSBrZXkgaW4gZXh0ZW5kZWQgb3IgcmF3IGZvcm1hdFxuICovXG5leHBvcnQgdHlwZSBQcml2YXRlS2V5ID0ge1xuICBwcnY6IHN0cmluZztcbn07XG5cbi8qKlxuICogQSBwdWJsaWMga2V5IGluIGV4dGVuZGVkLCBjb21wcmVzc2VkLCBvciB1bmNvbXByZXNzZWQgZm9ybWF0XG4gKi9cbmV4cG9ydCB0eXBlIFB1YmxpY0tleSA9IHtcbiAgcHViOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIEEgc2VlZCB0byBjcmVhdGUga2V5IHBhaXJzLiBNdXN0IGJlIGJldHdlZW4gMTYgYW5kIDY0IEJ5dGVzIGxvbmdcbiAqL1xuZXhwb3J0IHR5cGUgU2VlZCA9IHtcbiAgc2VlZDogQnVmZmVyO1xufTtcblxuLyoqXG4gKiBUaGUgbnVtYmVyIG9mIHBhcnRpY2lwYW50cyBmb3Igd2hpY2ggdG8gZ2VuZXJhdGUgc2hhcmVzIGFuZCBhIHRocmVzaG9sZCBvZiB0aG9zZSB0aGF0IHdvdWxkIGJlIHJlcXVpcmVkIHdoZW4gc2lnbmluZ1xuICovXG5leHBvcnQgdHlwZSBEa2dPcHRpb25zID0ge1xuICB0aHJlc2hvbGQ6IG51bWJlcjtcbiAgcGFydGljaXBhbnRzOiBudW1iZXI7XG59O1xuXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIGEgU2lnbmF0dXJlIHRvIGJlIGFkZGVkIHRvIGEgVHJhbnNhY3Rpb24uXG4gKi9cbmV4cG9ydCB0eXBlIFNpZ25hdHVyZSA9IHtcbiAgcHVibGljS2V5OiBQdWJsaWNLZXk7XG4gIHNpZ25hdHVyZTogQnVmZmVyO1xufTtcblxuZXhwb3J0IHR5cGUgQmxzS2V5UGFpck9wdGlvbnMgPSBEa2dPcHRpb25zIHwgQmxzS2V5cztcblxuZXhwb3J0IHR5cGUgS2V5UGFpck9wdGlvbnMgPSBTZWVkIHwgUHJpdmF0ZUtleSB8IFB1YmxpY0tleSB8IEJsc0tleVBhaXJPcHRpb25zO1xuXG5leHBvcnQgdHlwZSBCYXNlQnVpbGRlciA9IEJhc2VUcmFuc2FjdGlvbkJ1aWxkZXIgfCBCYXNlVHJhbnNhY3Rpb25CdWlsZGVyRmFjdG9yeTtcblxuLyoqXG4gKiBAcGFyYW0gc291cmNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NlZWQoc291cmNlOiBLZXlQYWlyT3B0aW9ucyk6IHNvdXJjZSBpcyBTZWVkIHtcbiAgcmV0dXJuIChzb3VyY2UgYXMgU2VlZCkuc2VlZCAhPT0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEBwYXJhbSBzb3VyY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpdmF0ZUtleShzb3VyY2U6IEtleVBhaXJPcHRpb25zKTogc291cmNlIGlzIFByaXZhdGVLZXkge1xuICByZXR1cm4gKHNvdXJjZSBhcyBQcml2YXRlS2V5KS5wcnYgIT09IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBAcGFyYW0gc291cmNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1B1YmxpY0tleShzb3VyY2U6IEtleVBhaXJPcHRpb25zKTogc291cmNlIGlzIFB1YmxpY0tleSB7XG4gIHJldHVybiAoc291cmNlIGFzIFB1YmxpY0tleSkucHViICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHNvdXJjZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEa2coc291cmNlOiBLZXlQYWlyT3B0aW9ucyk6IHNvdXJjZSBpcyBEa2dPcHRpb25zIHtcbiAgY29uc3QgZGtnID0gc291cmNlIGFzIERrZ09wdGlvbnM7XG4gIHJldHVybiBka2cudGhyZXNob2xkICE9PSB1bmRlZmluZWQgJiYgZGtnLnBhcnRpY2lwYW50cyAhPT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCbHNLZXkoc291cmNlOiBLZXlQYWlyT3B0aW9ucyk6IHNvdXJjZSBpcyBCbHNLZXlzIHtcbiAgY29uc3QgYmxzID0gc291cmNlIGFzIEJsc0tleXM7XG4gIHJldHVybiBibHMucHVibGljU2hhcmUgIT09IHVuZGVmaW5lZCAmJiBibHMuc2VjcmV0U2hhcmVzICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogS2V5IHBhaXIgaW4gdGhlIHByb3RvY29sIGRlZmF1bHQgZm9ybWF0LlxuICovXG5leHBvcnQgdHlwZSBEZWZhdWx0S2V5cyA9IHtcbiAgcHJ2Pzogc3RyaW5nO1xuICBwdWI6IHN0cmluZztcbn07XG5cbi8qKlxuICogS2V5IHBhaXIgaW4gVWludDhBcnJheSBmb3JtYXQuXG4gKi9cbmV4cG9ydCB0eXBlIEJ5dGVLZXlzID0ge1xuICBwcnY/OiBVaW50OEFycmF5O1xuICBwdWI6IFVpbnQ4QXJyYXk7XG59O1xuXG4vKipcbiAqIEtleSBwYWlyIGluIGV4dGVuZGVkIGZvcm1hdC4gVXNlZCBmb3IgY29pbnMgc3VwcG9ydGluZyBzZWNwMjU2azEgZWxsaXB0aWMgY3VydmUuXG4gKi9cbmV4cG9ydCB0eXBlIEV4dGVuZGVkS2V5cyA9IHtcbiAgeHBydj86IHN0cmluZztcbiAgeHB1Yjogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBCTFMgc2lnbmF0dXJlIGtleXMuXG4gKi9cbmV4cG9ydCB0eXBlIEJsc0tleXMgPSB7XG4gIHBydj86IHN0cmluZztcbiAgc2VjcmV0U2hhcmVzOiBzdHJpbmdbXTtcbiAgcHVibGljU2hhcmU6IHN0cmluZztcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUFkZHJlc3Mge1xuICBhZGRyZXNzOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50cnkgZXh0ZW5kcyBCYXNlQWRkcmVzcyB7XG4gIGNvaW4/OiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUZlZSB7XG4gIGZlZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uUmVjaXBpZW50IHtcbiAgYWRkcmVzczogc3RyaW5nO1xuICBhbW91bnQ6IHN0cmluZyB8IG51bWJlcjtcbiAgbWVtbz86IHN0cmluZztcbiAgdG9rZW5OYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uRmVlIHtcbiAgZmVlOiBzdHJpbmc7XG4gIGZlZVJhdGU/OiBudW1iZXI7XG4gIHNpemU/OiBudW1iZXI7XG4gIHR5cGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNhY3Rpb25PdXRwdXRzIHtcbiAgb3V0cHV0czogVHJhbnNhY3Rpb25SZWNpcGllbnRbXTtcbiAgb3V0cHV0QW1vdW50OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNhY3Rpb25DaGFuZ2VzIHtcbiAgY2hhbmdlT3V0cHV0czogVHJhbnNhY3Rpb25SZWNpcGllbnRbXTtcbiAgY2hhbmdlQW1vdW50OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNhY3Rpb25FeHBsYW5hdGlvbiB7XG4gIGRpc3BsYXlPcmRlcjogc3RyaW5nW107XG4gIGlkOiBzdHJpbmc7XG4gIG91dHB1dHM6IFRyYW5zYWN0aW9uUmVjaXBpZW50W107XG4gIG91dHB1dEFtb3VudDogc3RyaW5nO1xuICBjaGFuZ2VPdXRwdXRzOiBUcmFuc2FjdGlvblJlY2lwaWVudFtdO1xuICBjaGFuZ2VBbW91bnQ6IHN0cmluZztcbiAgZmVlOiBUcmFuc2FjdGlvbkZlZTtcbn1cblxuLyoqXG4gKiBGZWUgb3B0aW9ucy5cbiAqL1xuZXhwb3J0IHR5cGUgRmVlT3B0aW9ucyA9IHtcbiAgYW1vdW50OiBudW1iZXIgfCBzdHJpbmc7XG4gIHVuaXQ/OiAnYmFzZVVuaXQnIHwgJ2NwdScgfCAncmFtJztcbiAgZm9ybXVsYT86ICdmaXhlZCcgfCAnZmVlUmF0ZScgfCAncGVyS0InIHwgJ2N1c3RvbSc7XG4gIHR5cGU/OiAnYmFzZScgfCAnbWF4JyB8ICd0aXAnO1xufTtcblxuLyoqXG4gKiBUaGUgdmFsaWRpdHkgd2luZG93IHNpZ25hbHMgd2hlbiBhIHRyYW5zYWN0aW9uIGNhbiBiZSBpbmNsdWRlZCBpbiB0aGUgbmV0d29yay5cbiAqICBWYWxpZGl0eVdpbmRvdyBpbmZvcm1hdGlvbiBpcyBzdG9yZWQgYXMgcGFydCBvZiB0aGUgdHJhbnNhY3Rpb24gZGF0YSBpbiB0aGUgaW5kZXhlciBhbmQgd2FsbGV0IHBsYXRmb3JtLCB1bmxlc3MgaXQgaXMgYWJzb2x1dGVseSBuZWNlc3NhcnkuXG4gKiBmaXJzdFZhbGlkOiB0aGUgYWJzb2x1dGUgYmxvY2svdGltZSBhZnRlciB3aGljaCB0aGUgdHJhbnNhY3Rpb24gaXMgdmFsaWRcbiAqIGxhc3RWYWxpZDogdGhlIGFic29sdXRlIGJsb2NrL3RpbWUgYmVmb3JlIHdoaWNoIHRoZSB0cmFuc2FjdGlvbiBpcyB2YWxpZFxuICogbWluRHVyYXRpb246IG1pbmltdW0gZHVyYXRpb24gYSB0cmFuc2FjdGlvbiBmb3IgdGhpcyBjb2luIGlzIHZhbGlkXG4gKiBtYXhEdXJhdGlvbjogbWF4aW11bSBkdXJhdGlvbiBhIHRyYW5zYWN0aW9uIGZvciB0aGlzIGNvaW4gaXMgdmFsaWRcbiAqIG1pbkR1cmF0aW9uIGFuZCBtYXhEdXJhdGlvbiBhcmUgZGVmaW5lZCBwZXIgYmxvY2tjaGFpbiwgd2hlcmVhcyBmaXJzdFZhbGlkIGFuZCBsYXN0VmFsaWQgYXJlIGRlZmluZWQgcGVyIHRyYW5zYWN0aW9uXG4gKiB1bml0OiB2YWxpZGl0eSB3aW5kb3cgd2lsbCBiZSBtZWFzdXJlIGluIGJsb2NraGVpZ2ggb3IgdGltZXN0YW1wXG4gKiBUT0RPOiB2YWxpZGl0eVdpbmRvdyBjb25zdHJhaW50IG1ldGhvZHMgd2lsbCBiZSB0YWtlbiBvbjogaHR0cHM6Ly9iaXRnb2luYy5hdGxhc3NpYW4ubmV0L2Jyb3dzZS9TVExYLTEwODAwXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRpdHlXaW5kb3cge1xuICBmaXJzdFZhbGlkPzogbnVtYmVyO1xuICBsYXN0VmFsaWQ/OiBudW1iZXI7XG4gIG1pbkR1cmF0aW9uPzogbnVtYmVyO1xuICBtYXhEdXJhdGlvbj86IG51bWJlcjtcbiAgdW5pdD86ICdibG9ja2hlaWdodCcgfCAndGltZXN0YW1wJztcbn1cblxuLyoqXG4gKiBTZXF1ZW5jZSBJZHMgYXJlIHVzZWQgdG8gZGlmZmVyZW50aWF0ZSBwYXltZW50cyBjb21pbmcgZnJvbSB0aGUgc2FtZSBhY2NvdW50IGFuZCB0byBwcmV2ZW50IGFjY2lkZW50YWwgZG91YmxlIHNwZW5kcyBhbmQgcmVwbGF5IGF0dGFja3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VxdWVuY2VJZCB7XG4gIG5hbWU6ICdOb25jZScgfCAnU2VxdWVuY2UgSWQnIHwgJ0NvdW50ZXInO1xuICBrZXl3b3JkOiAnbm9uY2UnIHwgJ3NlcXVlbmNlSWQnIHwgJ2NvdW50ZXInO1xuICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyO1xufVxuIl19