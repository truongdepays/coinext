"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ed25519KeyPair = void 0;
var nacl = __importStar(require("tweetnacl"));
var utils_1 = require("../hbar/utils");
var crypto_1 = require("../../utils/crypto");
var ed25519KeyDeriver_1 = require("../../utils/ed25519KeyDeriver");
var iface_1 = require("./iface");
var DEFAULT_SEED_SIZE_BYTES = 32;
var Ed25519KeyPair = /** @class */ (function () {
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param {KeyPairOptions} source Either a master seed, a private key, or a public key
     */
    function Ed25519KeyPair(source) {
        var naclKeyPair;
        if (!source) {
            var seed = nacl.randomBytes(DEFAULT_SEED_SIZE_BYTES);
            naclKeyPair = nacl.sign.keyPair.fromSeed(seed);
            this.setKeyPair(naclKeyPair);
        }
        else if (iface_1.isSeed(source)) {
            naclKeyPair = nacl.sign.keyPair.fromSeed(source.seed);
            this.setKeyPair(naclKeyPair);
        }
        else if (iface_1.isPrivateKey(source)) {
            this.recordKeysFromPrivateKey(source.prv);
        }
        else if (iface_1.isPublicKey(source)) {
            this.recordKeysFromPublicKey(source.pub);
        }
        else {
            throw new Error('Invalid key pair options');
        }
    }
    Ed25519KeyPair.prototype.getKeyPair = function (naclKeyPair) {
        return {
            prv: utils_1.toHex(naclKeyPair.secretKey.slice(0, 32)),
            pub: utils_1.toHex(naclKeyPair.publicKey),
        };
    };
    Ed25519KeyPair.prototype.setKeyPair = function (naclKeyPair) {
        this.keyPair = this.getKeyPair(naclKeyPair);
    };
    /** @inheritdoc */
    Ed25519KeyPair.prototype.recordKeysFromPrivateKey = function (prv) {
        if (crypto_1.isValidEd25519Seed(prv)) {
            var decodedPrv = utils_1.toUint8Array(prv);
            var naclKeyPair = nacl.sign.keyPair.fromSeed(decodedPrv);
            this.setKeyPair(naclKeyPair);
        }
        else if (crypto_1.isValidEd25519SecretKey(prv)) {
            var decodedPrv = utils_1.toUint8Array(prv);
            var naclKeyPair = nacl.sign.keyPair.fromSecretKey(decodedPrv);
            this.setKeyPair(naclKeyPair);
        }
        else {
            this.keyPair = this.recordKeysFromPrivateKeyInProtocolFormat(prv);
        }
    };
    /** @inheritdoc */
    Ed25519KeyPair.prototype.recordKeysFromPublicKey = function (pub) {
        if (crypto_1.isValidEd25519PublicKey(pub)) {
            this.keyPair = { pub: pub };
        }
        else {
            this.keyPair = this.recordKeysFromPublicKeyInProtocolFormat(pub);
        }
    };
    /**
     * Generates a signature for an arbitrary string with the current private key using the ed25519 public-key signature
     * system.
     *
     * @param {string} message to produce a signature for
     * @returns {Uint8Array} The signature produced for the message
     * @throws if there is no private key
     */
    Ed25519KeyPair.prototype.signMessage = function (message) {
        var messageToSign = utils_1.toUint8Array(Buffer.from(message).toString('hex'));
        var prv = this.keyPair.prv;
        if (!prv) {
            throw new Error('Missing private key');
        }
        return nacl.sign.detached(messageToSign, nacl.sign.keyPair.fromSeed(utils_1.toUint8Array(prv)).secretKey);
    };
    /**
     * Verifies a message signature using the current public key.
     *
     * @param {string} message signed
     * @param {Uint8Array} signature to verify
     * @returns {boolean} True if the message was signed with the current key pair
     */
    Ed25519KeyPair.prototype.verifySignature = function (message, signature) {
        var messageToVerify;
        if (typeof message === 'string') {
            messageToVerify = utils_1.toUint8Array(Buffer.from(message).toString('hex'));
        }
        else {
            messageToVerify = message;
        }
        var publicKey = utils_1.toUint8Array(this.keyPair.pub);
        return nacl.sign.detached.verify(messageToVerify, signature, publicKey);
    };
    /**
     * Derives a hardened child key pair using this key pair's secret key
     * as the seed.
     *
     * @param path derivation path
     */
    Ed25519KeyPair.prototype.deriveHardened = function (path) {
        if (!this.keyPair.prv) {
            throw new Error('need private key to derive hardened keypair');
        }
        var seed = ed25519KeyDeriver_1.Ed25519KeyDeriver.derivePath(path, this.keyPair.prv).key;
        var derivedKeyPair = nacl.sign.keyPair.fromSeed(seed);
        return this.getKeyPair(derivedKeyPair);
    };
    return Ed25519KeyPair;
}());
exports.Ed25519KeyPair = Ed25519KeyPair;
//# sourceMappingURL=data:application/json;base64,