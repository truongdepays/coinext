import { BaseKeyPair } from './baseKeyPair';
import { AddressFormat } from './enum';
import { DefaultKeys, KeyPairOptions } from './iface';
export declare abstract class Ed25519KeyPair implements BaseKeyPair {
    protected keyPair: DefaultKeys;
    protected source?: KeyPairOptions;
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param {KeyPairOptions} source Either a master seed, a private key, or a public key
     */
    protected constructor(source?: KeyPairOptions);
    private getKeyPair;
    private setKeyPair;
    /** @inheritdoc */
    recordKeysFromPrivateKey(prv: string): void;
    /** @inheritdoc */
    recordKeysFromPublicKey(pub: string): void;
    abstract recordKeysFromPrivateKeyInProtocolFormat(prv: string): DefaultKeys;
    abstract recordKeysFromPublicKeyInProtocolFormat(pub: string): DefaultKeys;
    /** @inheritdoc */
    abstract getAddress(format?: AddressFormat): string;
    /** @inheritdoc */
    abstract getKeys(): any;
    /**
     * Generates a signature for an arbitrary string with the current private key using the ed25519 public-key signature
     * system.
     *
     * @param {string} message to produce a signature for
     * @returns {Uint8Array} The signature produced for the message
     * @throws if there is no private key
     */
    signMessage(message: string): Uint8Array;
    /**
     * Verifies a message signature using the current public key.
     *
     * @param {string} message signed
     * @param {Uint8Array} signature to verify
     * @returns {boolean} True if the message was signed with the current key pair
     */
    verifySignature(message: Uint8Array | string, signature: Uint8Array): boolean;
    /**
     * Derives a hardened child key pair using this key pair's secret key
     * as the seed.
     *
     * @param path derivation path
     */
    deriveHardened(path: string): DefaultKeys;
}
//# sourceMappingURL=ed25519KeyPair.d.ts.map