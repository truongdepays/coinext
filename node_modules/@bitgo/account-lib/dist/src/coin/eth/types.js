"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthTransactionData = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var tx_1 = require("@ethereumjs/tx");
var ethereumjs_utils_old_1 = require("ethereumjs-utils-old");
var ethereumjs_util_1 = require("ethereumjs-util");
var iface_1 = require("./iface");
// https://github.com/ethereumjs/ethereumjs-monorepo/blob/master/packages/tx/src/transactionFactory.ts#L31
var LEGACY_TX_TYPE = 0;
var EIP1559_TX_TYPE = 2;
/**
 * An Ethereum transaction with helpers for serialization and deserialization.
 */
var EthTransactionData = /** @class */ (function () {
    function EthTransactionData(tx, args) {
        this.tx = tx;
        this.args = args;
    }
    /**
     * Build an thereum transaction from its JSON representation
     *
     * @param {TxData} tx The JSON representation of the transaction
     * @param {EthereumCommon} common Class to access chain and hardfork parameters
     * @returns {EthTransactionData} a new ethereum transaction object
     */
    EthTransactionData.fromJson = function (tx, common) {
        var nonce = ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.nonce).toString(16));
        var value = ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.value).toString(16));
        var gasLimit = ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.gasLimit).toString(16));
        var chainId = tx.chainId ? ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.chainId).toString(16)) : undefined;
        var gasPrice = isLegacyTx(tx) ? ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.gasPrice).toString(16)) : undefined;
        var maxFeePerGas = isEIP1559Txn(tx) ? ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.maxFeePerGas).toString(16)) : undefined;
        var maxPriorityFeePerGas = isEIP1559Txn(tx)
            ? ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.maxPriorityFeePerGas).toString(16))
            : undefined;
        return new EthTransactionData(tx_1.TransactionFactory.fromTxData({
            type: isLegacyTx(tx) ? LEGACY_TX_TYPE : EIP1559_TX_TYPE,
            chainId: chainId,
            nonce: nonce,
            to: tx.to,
            gasPrice: gasPrice,
            gasLimit: gasLimit,
            maxFeePerGas: maxFeePerGas,
            maxPriorityFeePerGas: maxPriorityFeePerGas,
            value: value,
            data: tx.data,
            v: tx.v,
            r: tx.r,
            s: tx.s,
        }, { common: common }), {
            deployedAddress: tx.deployedAddress,
            chainId: ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(Number(tx.chainId)).toString(16)),
        });
    };
    /**
     * Build an ethereum transaction from its string serialization
     *
     * @param tx The string serialization of the ethereum transaction
     * @param common
     */
    EthTransactionData.fromSerialized = function (tx, common) {
        return new EthTransactionData(tx_1.TransactionFactory.fromSerializedData(ethereumjs_util_1.toBuffer(ethereumjs_util_1.addHexPrefix(tx)), { common: common }));
    };
    EthTransactionData.prototype.sign = function (keyPair) {
        var privateKey = Buffer.from(keyPair.getKeys().prv, 'hex');
        this.tx = this.tx.sign(privateKey);
    };
    /** @inheritdoc */
    EthTransactionData.prototype.toJson = function () {
        var result = {
            nonce: ethereumjs_utils_old_1.bufferToInt(this.tx.nonce),
            gasLimit: new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(this.tx.gasLimit), 16).toString(10),
            value: this.tx.value.toString(10),
            data: ethereumjs_utils_old_1.bufferToHex(this.tx.data),
        };
        if (this.tx.isSigned()) {
            result.id = ethereumjs_util_1.addHexPrefix(ethereumjs_utils_old_1.bufferToHex(this.tx.hash()));
        }
        else {
            result.id = ethereumjs_util_1.addHexPrefix(ethereumjs_utils_old_1.bufferToHex(this.tx.getMessageToSign()));
        }
        if (this.tx.to) {
            result.to = ethereumjs_utils_old_1.bufferToHex(this.tx.to.toBuffer());
        }
        if (this.tx.verifySignature()) {
            result.from = ethereumjs_utils_old_1.bufferToHex(this.tx.getSenderAddress().toBuffer());
            result.r = ethereumjs_utils_old_1.bufferToHex(this.tx.r);
            result.s = ethereumjs_utils_old_1.bufferToHex(this.tx.s);
        }
        if (this.tx.v) {
            result.v = ethereumjs_utils_old_1.bufferToHex(this.tx.v);
        }
        result.chainId = ethereumjs_util_1.addHexPrefix(this.tx.common.chainIdBN().toString(16));
        if (this.args && this.args.deployedAddress) {
            result.deployedAddress = this.args.deployedAddress;
        }
        if (this.tx instanceof tx_1.Transaction) {
            var gasPrice = new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(this.tx.gasPrice), 16).toString(10);
            return __assign(__assign({}, result), { _type: iface_1.ETHTransactionType.LEGACY, gasPrice: gasPrice });
        }
        else if (this.tx instanceof tx_1.FeeMarketEIP1559Transaction) {
            var maxFeePerGas = new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(this.tx.maxFeePerGas), 16).toString(10);
            var maxPriorityFeePerGas = new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(this.tx.maxPriorityFeePerGas), 16).toString(10);
            return __assign(__assign({}, result), { _type: iface_1.ETHTransactionType.EIP1559, maxFeePerGas: maxFeePerGas,
                maxPriorityFeePerGas: maxPriorityFeePerGas });
        }
        else {
            throw new Error("Unsupported tx type: " + tx_1.AccessListEIP2930Transaction.name);
        }
    };
    /** @inheritdoc */
    EthTransactionData.prototype.toSerialized = function () {
        return ethereumjs_util_1.addHexPrefix(this.tx.serialize().toString('hex'));
    };
    return EthTransactionData;
}());
exports.EthTransactionData = EthTransactionData;
function isLegacyTx(tx) {
    return tx._type === iface_1.ETHTransactionType.LEGACY;
}
function isEIP1559Txn(tx) {
    return tx._type === iface_1.ETHTransactionType.EIP1559;
}
//# sourceMappingURL=data:application/json;base64,