"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERC1155TransferBuilder = void 0;
var errors_1 = require("../../baseCoin/errors");
var contractCall_1 = require("../contractCall");
var utils_1 = require("../utils");
var walletUtil_1 = require("../walletUtil");
var baseNFTTransferBuilder_1 = require("./baseNFTTransferBuilder");
var utils_2 = require("ethers/lib/utils");
var ERC1155TransferBuilder = /** @class */ (function (_super) {
    __extends(ERC1155TransferBuilder, _super);
    function ERC1155TransferBuilder(serializedData) {
        var _this = _super.call(this, serializedData) || this;
        _this.bytes(0);
        if (serializedData) {
            _this.decodeTransferData(serializedData);
        }
        else {
            _this._tokenIds = [];
            _this._values = [];
        }
        return _this;
    }
    ERC1155TransferBuilder.prototype.tokenContractAddress = function (address) {
        if (utils_1.isValidEthAddress(address)) {
            this._tokenContractAddress = address;
            return this;
        }
        throw new errors_1.InvalidParameterValueError('Invalid address');
    };
    ERC1155TransferBuilder.prototype.entry = function (tokenId, value) {
        this._tokenIds.push(tokenId.toString());
        this._values.push(value.toString());
        return this;
    };
    ERC1155TransferBuilder.prototype.bytes = function (bytesInNumber) {
        this._bytes = utils_2.hexZeroPad(utils_2.hexlify(bytesInNumber), 32);
        return this;
    };
    ERC1155TransferBuilder.prototype.signAndBuild = function () {
        var hasMandatoryFields = this.hasMandatoryFields();
        if (hasMandatoryFields) {
            if (this._tokenIds.length === 1) {
                var values = [this._fromAddress, this._toAddress, this._tokenIds[0], this._values[0], this._bytes];
                var contractCall = new contractCall_1.ContractCall(walletUtil_1.ERC1155SafeTransferTypeMethodId, walletUtil_1.ERC1155SafeTransferTypes, values);
                this._data = contractCall.serialize();
            }
            else {
                var values = [this._fromAddress, this._toAddress, this._tokenIds, this._values, this._bytes];
                var contractCall = new contractCall_1.ContractCall(walletUtil_1.ERC1155BatchTransferTypeMethodId, walletUtil_1.ERC1155BatchTransferTypes, values);
                this._data = contractCall.serialize();
            }
            return utils_1.sendMultiSigData(this._tokenContractAddress, '0', // dummy amount value
            this._data, this._expirationTime, this._sequenceId, this.getSignature());
        }
        throw new errors_1.BuildTransactionError("Missing transfer mandatory fields. \n       Destination (to) address, source (from) address, sequenceID, the token contract address, tokenIDs and their values are mandatory");
    };
    ERC1155TransferBuilder.prototype.hasMandatoryFields = function () {
        return (this._tokenIds !== undefined &&
            this._tokenIds.length !== 0 &&
            this._values.length !== 0 &&
            this._tokenIds.length === this._values.length &&
            this._toAddress !== undefined &&
            this._fromAddress !== undefined &&
            this._tokenContractAddress !== undefined &&
            this._sequenceId !== undefined);
    };
    ERC1155TransferBuilder.prototype.decodeTransferData = function (data) {
        var transferData = utils_1.decodeERC1155TransferData(data);
        this._toAddress = transferData.to;
        this._fromAddress = transferData.from;
        this._expirationTime = transferData.expireTime;
        this._sequenceId = transferData.sequenceId;
        this._signature = transferData.signature;
        this._tokenContractAddress = transferData.tokenContractAddress;
        this._tokenIds = transferData.tokenIds;
        this._values = transferData.values;
        if (transferData.data) {
            this._data = transferData.data;
        }
    };
    return ERC1155TransferBuilder;
}(baseNFTTransferBuilder_1.BaseNFTTransferBuilder));
exports.ERC1155TransferBuilder = ERC1155TransferBuilder;
//# sourceMappingURL=data:application/json;base64,