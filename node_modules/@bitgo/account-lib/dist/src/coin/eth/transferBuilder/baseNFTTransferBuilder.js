"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseNFTTransferBuilder = void 0;
var errors_1 = require("../../baseCoin/errors");
var utils_1 = require("../utils");
var utils_2 = require("ethers/lib/utils");
var BaseNFTTransferBuilder = /** @class */ (function () {
    function BaseNFTTransferBuilder(serializedData) {
        this._EMPTY_HEX_VALUE = '0x';
        if (serializedData === undefined) {
            // initialize with default values for non mandatory fields
            this._expirationTime = BaseNFTTransferBuilder.getExpirationTime();
            this._data = this._EMPTY_HEX_VALUE;
            this._signature = this._EMPTY_HEX_VALUE;
        }
    }
    BaseNFTTransferBuilder.prototype.expirationTime = function (date) {
        if (date > 0) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._expirationTime = date;
            return this;
        }
        throw new errors_1.InvalidParameterValueError('Invalid expiration time');
    };
    BaseNFTTransferBuilder.prototype.key = function (signKey) {
        this._signKey = signKey;
        return this;
    };
    BaseNFTTransferBuilder.prototype.contractSequenceId = function (counter) {
        if (counter >= 0) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._sequenceId = counter;
            return this;
        }
        throw new errors_1.InvalidParameterValueError('Invalid contract sequence id');
    };
    BaseNFTTransferBuilder.prototype.to = function (address) {
        if (utils_1.isValidEthAddress(address)) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._toAddress = address;
            return this;
        }
        throw new errors_1.InvalidParameterValueError('Invalid address');
    };
    BaseNFTTransferBuilder.prototype.from = function (address) {
        if (utils_1.isValidEthAddress(address)) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._fromAddress = address;
            return this;
        }
        throw new errors_1.InvalidParameterValueError('Invalid address');
    };
    /** Return an expiration time, in seconds, set to one hour from now
     *
     * @returns {number} expiration time
     */
    BaseNFTTransferBuilder.getExpirationTime = function () {
        var currentDate = new Date();
        currentDate.setHours(currentDate.getHours() + 1);
        return currentDate.getTime() / 1000;
    };
    /**
     * If a signing key is set for this builder, recalculates the signature
     *
     * @returns {string} the signature value
     */
    BaseNFTTransferBuilder.prototype.getSignature = function () {
        if (this._signKey) {
            this._signature = this.ethSignMsgHash();
        }
        if (this._signature == null) {
            throw new errors_1.InvalidSignatureError('Null signature value');
        }
        return this._signature;
    };
    /**
     * Get the prefix used in generating an operation hash for sending native coins
     *
     * @returns the string prefix
     */
    BaseNFTTransferBuilder.prototype.getNativeOperationHashPrefix = function () {
        return 'ETHER';
    };
    /**
     * Obtains the proper operation hash to sign either a sendMultiSig data
     * or a sendMultiSigToken data
     *
     * @returns {string} the operation hash
     */
    BaseNFTTransferBuilder.prototype.getOperationHash = function () {
        var hash = utils_2.solidityKeccak256(['string', 'address', 'uint', 'bytes', 'uint', 'uint'], [
            this.getNativeOperationHashPrefix(),
            this._toAddress,
            '0',
            this._data,
            this._expirationTime,
            this._sequenceId,
        ]);
        return hash;
    };
    /**
     * Signs the Message with the given private key
     * @returns {string} 65 byte long raw signature
     */
    BaseNFTTransferBuilder.prototype.ethSignMsgHash = function () {
        var signKey = new utils_2.SigningKey('0x'.concat(this._signKey));
        var digest = signKey.signDigest(this.getOperationHash());
        var rawSignature = utils_2.joinSignature(digest);
        return rawSignature;
    };
    return BaseNFTTransferBuilder;
}());
exports.BaseNFTTransferBuilder = BaseNFTTransferBuilder;
//# sourceMappingURL=data:application/json;base64,