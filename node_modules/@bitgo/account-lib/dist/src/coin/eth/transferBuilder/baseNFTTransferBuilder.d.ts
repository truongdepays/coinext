export declare abstract class BaseNFTTransferBuilder {
    protected readonly _EMPTY_HEX_VALUE = "0x";
    protected _fromAddress: string;
    protected _toAddress: string;
    protected _sequenceId: number;
    protected _signKey: string;
    protected _expirationTime: number;
    protected _signature: string;
    protected _data: string;
    protected _tokenContractAddress: string;
    protected constructor(serializedData?: string);
    expirationTime(date: number): this;
    key(signKey: string): this;
    contractSequenceId(counter: number): this;
    to(address: string): this;
    from(address: string): this;
    /** Return an expiration time, in seconds, set to one hour from now
     *
     * @returns {number} expiration time
     */
    private static getExpirationTime;
    /**
     * If a signing key is set for this builder, recalculates the signature
     *
     * @returns {string} the signature value
     */
    protected getSignature(): string;
    /**
     * Get the prefix used in generating an operation hash for sending native coins
     *
     * @returns the string prefix
     */
    protected getNativeOperationHashPrefix(): string;
    /**
     * Obtains the proper operation hash to sign either a sendMultiSig data
     * or a sendMultiSigToken data
     *
     * @returns {string} the operation hash
     */
    private getOperationHash;
    /**
     * Signs the Message with the given private key
     * @returns {string} 65 byte long raw signature
     */
    protected ethSignMsgHash(): string;
}
//# sourceMappingURL=baseNFTTransferBuilder.d.ts.map