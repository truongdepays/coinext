"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getToken = exports.getBufferedByteCode = exports.getRawDecoded = exports.hasSignature = exports.toStringSig = exports.getProxyInitcode = exports.calculateForwarderV1Address = exports.calculateForwarderAddress = exports.hexStringToNumber = exports.numberToHexString = exports.classifyTransaction = exports.decodeFlushTokensData = exports.decodeNativeTransferData = exports.decodeERC1155TransferData = exports.decodeERC721TransferData = exports.decodeTokenTransferData = exports.decodeTransferData = exports.decodeWalletCreationData = exports.isValidAmount = exports.isValidEthAddress = exports.getAddressInitializationData = exports.flushCoinsData = exports.flushTokensData = exports.sendMultiSigTokenData = exports.sendMultiSigData = exports.sign = exports.signInternal = exports.getCommon = void 0;
var buffer_1 = require("buffer");
var assert_1 = __importDefault(require("assert"));
var ethereumjs_utils_old_1 = require("ethereumjs-utils-old");
var ethereumjs_util_1 = require("ethereumjs-util");
var statics_1 = require("@bitgo/statics");
var ethereumjs_abi_1 = __importDefault(require("ethereumjs-abi"));
var common_1 = __importDefault(require("@ethereumjs/common"));
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var errors_1 = require("../baseCoin/errors");
var baseCoin_1 = require("../baseCoin");
var stakingUtils_1 = require("../celo/stakingUtils");
var walletUtil_1 = require("./walletUtil");
var types_1 = require("./types");
/**
 * @param network
 */
function getCommon(network) {
    return common_1.default.forCustomChain(
    // use the mainnet config as a base, override chain ids and network name
    'mainnet', {
        name: network.type,
        networkId: network.chainId,
        chainId: network.chainId,
    }, 'london');
}
exports.getCommon = getCommon;
/**
 * Signs the transaction using the appropriate algorithm
 * and the provided common for the blockchain
 *
 * @param {TxData} transactionData the transaction data to sign
 * @param {KeyPair} keyPair the signer's keypair
 * @param {EthereumCommon} customCommon the network's custom common
 * @returns {string} the transaction signed and encoded
 */
function signInternal(transactionData, keyPair, customCommon) {
    return __awaiter(this, void 0, void 0, function () {
        var ethTx;
        return __generator(this, function (_a) {
            if (!keyPair.getKeys().prv) {
                throw new errors_1.SigningError('Missing private key');
            }
            ethTx = types_1.EthTransactionData.fromJson(transactionData, customCommon);
            ethTx.sign(keyPair);
            return [2 /*return*/, ethTx.toSerialized()];
        });
    });
}
exports.signInternal = signInternal;
/**
 * Signs the transaction using the appropriate algorithm
 *
 * @param {TxData} transactionData the transaction data to sign
 * @param {KeyPair} keyPair the signer's keypair
 * @returns {string} the transaction signed and encoded
 */
function sign(transactionData, keyPair) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, signInternal(transactionData, keyPair, getCommon(statics_1.coins.get('teth').network))];
        });
    });
}
exports.sign = sign;
/**
 * Returns the contract method encoded data
 *
 * @param {string} to destination address
 * @param {number} value Amount to tranfer
 * @param {string} data aditional method call data
 * @param {number} expireTime expiration time for the transaction in seconds
 * @param {number} sequenceId sequence id
 * @param {string} signature signature of the call
 * @returns {string} -- the contract method encoded data
 */
function sendMultiSigData(to, value, data, expireTime, sequenceId, signature) {
    var params = [to, value, ethereumjs_utils_old_1.toBuffer(data), expireTime, sequenceId, ethereumjs_utils_old_1.toBuffer(signature)];
    var method = ethereumjs_abi_1.default.methodID('sendMultiSig', walletUtil_1.sendMultiSigTypes);
    var args = ethereumjs_abi_1.default.rawEncode(walletUtil_1.sendMultiSigTypes, params);
    return ethereumjs_utils_old_1.addHexPrefix(buffer_1.Buffer.concat([method, args]).toString('hex'));
}
exports.sendMultiSigData = sendMultiSigData;
/**
 * Returns the contract method encoded data
 *
 * @param {string} to destination address
 * @param {number} value Amount to tranfer
 * @param {string} tokenContractAddress the address of the erc20 token contract
 * @param {number} expireTime expiration time for the transaction in seconds
 * @param {number} sequenceId sequence id
 * @param {string} signature signature of the call
 * @returns {string} -- the contract method encoded data
 */
function sendMultiSigTokenData(to, value, tokenContractAddress, expireTime, sequenceId, signature) {
    var params = [to, value, tokenContractAddress, expireTime, sequenceId, ethereumjs_utils_old_1.toBuffer(signature)];
    var method = ethereumjs_abi_1.default.methodID('sendMultiSigToken', walletUtil_1.sendMultiSigTokenTypes);
    var args = ethereumjs_abi_1.default.rawEncode(walletUtil_1.sendMultiSigTokenTypes, params);
    return ethereumjs_utils_old_1.addHexPrefix(buffer_1.Buffer.concat([method, args]).toString('hex'));
}
exports.sendMultiSigTokenData = sendMultiSigTokenData;
/**
 * Get the data required to make a flush tokens contract call
 *
 * @param forwarderAddress The forwarder address to flush
 * @param tokenAddress The token address to flush from
 */
function flushTokensData(forwarderAddress, tokenAddress) {
    var params = [forwarderAddress, tokenAddress];
    var method = ethereumjs_abi_1.default.methodID('flushForwarderTokens', walletUtil_1.flushTokensTypes);
    var args = ethereumjs_abi_1.default.rawEncode(walletUtil_1.flushTokensTypes, params);
    return ethereumjs_utils_old_1.addHexPrefix(buffer_1.Buffer.concat([method, args]).toString('hex'));
}
exports.flushTokensData = flushTokensData;
/**
 * Get the data required to make a flush native coins contract call
 */
function flushCoinsData() {
    var params = [];
    var method = ethereumjs_abi_1.default.methodID('flush', walletUtil_1.flushCoinsTypes);
    var args = ethereumjs_abi_1.default.rawEncode(walletUtil_1.flushCoinsTypes, params);
    return ethereumjs_utils_old_1.addHexPrefix(buffer_1.Buffer.concat([method, args]).toString('hex'));
}
exports.flushCoinsData = flushCoinsData;
/**
 * Returns the create forwarder method calling data
 *
 * @returns {string} - the createForwarder method encoded
 */
function getAddressInitializationData() {
    return walletUtil_1.createForwarderMethodId;
}
exports.getAddressInitializationData = getAddressInitializationData;
/**
 * Returns whether or not the string is a valid Eth address
 *
 * @param {string} address - the tx hash to validate
 * @returns {boolean} - the validation result
 */
function isValidEthAddress(address) {
    return ethereumjs_utils_old_1.isValidAddress(address);
}
exports.isValidEthAddress = isValidEthAddress;
/**
 * Returns whether or not the string is a valid amount number
 *
 * @param {string} amount - the string to validate
 * @returns {boolean} - the validation result
 */
function isValidAmount(amount) {
    var bigNumberAmount = new bignumber_js_1.default(amount);
    return bigNumberAmount.isInteger() && bigNumberAmount.isGreaterThanOrEqualTo(0);
}
exports.isValidAmount = isValidAmount;
/**
 * Returns the smart contract encoded data
 *
 * @param {string} data The wallet creation data to decode
 * @returns {string[]} - The list of signer addresses
 */
function decodeWalletCreationData(data) {
    if (!data.startsWith(walletUtil_1.walletInitializationFirstBytes)) {
        throw new errors_1.BuildTransactionError("Invalid wallet bytecode: " + data);
    }
    var dataBuffer = buffer_1.Buffer.from(data.slice(2), 'hex');
    // the last 160 bytes contain the serialized address array
    var serializedSigners = dataBuffer.slice(-160);
    var resultEncodedParameters = ethereumjs_abi_1.default.rawDecode(walletUtil_1.walletSimpleConstructor, serializedSigners);
    if (resultEncodedParameters.length !== 1) {
        throw new errors_1.BuildTransactionError("Could not decode wallet constructor bytecode: " + resultEncodedParameters);
    }
    var addresses = resultEncodedParameters[0];
    if (addresses.length !== 3) {
        throw new errors_1.BuildTransactionError("invalid number of addresses in parsed constructor: " + addresses);
    }
    // sometimes ethereumjs-abi removes 0 padding at the start of addresses,
    // so we should pad until they are the standard 20 bytes
    var paddedAddresses = addresses.map(function (address) { return ethereumjs_utils_old_1.stripHexPrefix(address.toString('hex')).padStart(40, '0'); });
    return paddedAddresses.map(function (address) { return ethereumjs_utils_old_1.addHexPrefix(address); });
}
exports.decodeWalletCreationData = decodeWalletCreationData;
/**
 * Decode the given ABI-encoded transfer data and return parsed fields
 *
 * @param data The data to decode
 * @returns parsed transfer data
 */
function decodeTransferData(data) {
    if (data.startsWith(walletUtil_1.sendMultisigMethodId)) {
        return decodeNativeTransferData(data);
    }
    else if (data.startsWith(walletUtil_1.sendMultisigTokenMethodId)) {
        return decodeTokenTransferData(data);
    }
    else {
        throw new errors_1.BuildTransactionError("Invalid transfer bytecode: " + data);
    }
}
exports.decodeTransferData = decodeTransferData;
/**
 * Decode the given ABI-encoded transfer data for the sendMultisigToken function and return parsed fields
 *
 * @param data The data to decode
 * @returns parsed token transfer data
 */
function decodeTokenTransferData(data) {
    if (!data.startsWith(walletUtil_1.sendMultisigTokenMethodId)) {
        throw new errors_1.BuildTransactionError("Invalid transfer bytecode: " + data);
    }
    var _a = getRawDecoded(walletUtil_1.sendMultiSigTokenTypes, getBufferedByteCode(walletUtil_1.sendMultisigTokenMethodId, data)), to = _a[0], amount = _a[1], tokenContractAddress = _a[2], expireTime = _a[3], sequenceId = _a[4], signature = _a[5];
    return {
        to: ethereumjs_utils_old_1.addHexPrefix(to),
        amount: new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(amount)).toFixed(),
        expireTime: ethereumjs_utils_old_1.bufferToInt(expireTime),
        sequenceId: ethereumjs_utils_old_1.bufferToInt(sequenceId),
        signature: ethereumjs_utils_old_1.bufferToHex(signature),
        tokenContractAddress: ethereumjs_utils_old_1.addHexPrefix(tokenContractAddress),
    };
}
exports.decodeTokenTransferData = decodeTokenTransferData;
function decodeERC721TransferData(data) {
    if (!data.startsWith(walletUtil_1.sendMultisigMethodId)) {
        throw new errors_1.BuildTransactionError("Invalid transfer bytecode: " + data);
    }
    var _a = getRawDecoded(walletUtil_1.sendMultiSigTypes, getBufferedByteCode(walletUtil_1.sendMultisigMethodId, data)), to = _a[0], amount = _a[1], internalData = _a[2], expireTime = _a[3], sequenceId = _a[4], signature = _a[5];
    var internalDataHex = ethereumjs_utils_old_1.bufferToHex(internalData);
    if (!internalDataHex.startsWith(walletUtil_1.ERC721SafeTransferTypeMethodId)) {
        throw new errors_1.BuildTransactionError("Invalid transfer bytecode: " + data);
    }
    var _b = getRawDecoded(walletUtil_1.ERC721SafeTransferTypes, getBufferedByteCode(walletUtil_1.ERC721SafeTransferTypeMethodId, internalDataHex)), from = _b[0], receiver = _b[1], tokenId = _b[2], userSentData = _b[3];
    return {
        to: ethereumjs_utils_old_1.addHexPrefix(receiver),
        from: ethereumjs_utils_old_1.addHexPrefix(from),
        expireTime: ethereumjs_utils_old_1.bufferToInt(expireTime),
        amount: new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(amount)).toFixed(),
        tokenId: new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(tokenId)).toFixed(),
        sequenceId: ethereumjs_utils_old_1.bufferToInt(sequenceId),
        signature: ethereumjs_utils_old_1.bufferToHex(signature),
        tokenContractAddress: ethereumjs_utils_old_1.addHexPrefix(to),
        userData: ethereumjs_utils_old_1.bufferToHex(userSentData),
    };
}
exports.decodeERC721TransferData = decodeERC721TransferData;
function decodeERC1155TransferData(data) {
    var _a, _b;
    var from, receiver, userSentData;
    var tokenIds;
    var values;
    if (!data.startsWith(walletUtil_1.sendMultisigMethodId)) {
        throw new errors_1.BuildTransactionError("Invalid transfer bytecode: " + data);
    }
    var _c = getRawDecoded(walletUtil_1.sendMultiSigTypes, getBufferedByteCode(walletUtil_1.sendMultisigMethodId, data)), to = _c[0], amount = _c[1], internalData = _c[2], expireTime = _c[3], sequenceId = _c[4], signature = _c[5];
    var internalDataHex = ethereumjs_utils_old_1.bufferToHex(internalData);
    if (internalDataHex.startsWith(walletUtil_1.ERC1155SafeTransferTypeMethodId)) {
        var tokenId = void 0;
        var value = void 0;
        _a = getRawDecoded(walletUtil_1.ERC1155SafeTransferTypes, getBufferedByteCode(walletUtil_1.ERC1155SafeTransferTypeMethodId, internalDataHex)), from = _a[0], receiver = _a[1], tokenId = _a[2], value = _a[3], userSentData = _a[4];
        tokenIds = [new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(tokenId)).toFixed()];
        values = [new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(value)).toFixed()];
    }
    else if (ethereumjs_utils_old_1.bufferToHex(internalData).startsWith(walletUtil_1.ERC1155BatchTransferTypeMethodId)) {
        var tempTokenIds = void 0, tempValues = void 0;
        _b = getRawDecoded(walletUtil_1.ERC1155BatchTransferTypes, getBufferedByteCode(walletUtil_1.ERC1155BatchTransferTypeMethodId, internalDataHex)), from = _b[0], receiver = _b[1], tempTokenIds = _b[2], tempValues = _b[3], userSentData = _b[4];
        tokenIds = tempTokenIds.map(function (x) { return new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(x)).toFixed(); });
        values = tempValues.map(function (x) { return new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(x)).toFixed(); });
    }
    else {
        throw new errors_1.BuildTransactionError("Invalid transfer bytecode: " + data);
    }
    return {
        to: ethereumjs_utils_old_1.addHexPrefix(receiver),
        from: ethereumjs_utils_old_1.addHexPrefix(from),
        expireTime: ethereumjs_utils_old_1.bufferToInt(expireTime),
        amount: new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(amount)).toFixed(),
        tokenIds: tokenIds,
        values: values,
        sequenceId: ethereumjs_utils_old_1.bufferToInt(sequenceId),
        signature: ethereumjs_utils_old_1.bufferToHex(signature),
        tokenContractAddress: ethereumjs_utils_old_1.addHexPrefix(to),
        userData: userSentData,
    };
}
exports.decodeERC1155TransferData = decodeERC1155TransferData;
/**
 * Decode the given ABI-encoded transfer data for the sendMultisig function and return parsed fields
 *
 * @param data The data to decode
 * @returns parsed transfer data
 */
function decodeNativeTransferData(data) {
    if (!data.startsWith(walletUtil_1.sendMultisigMethodId)) {
        throw new errors_1.BuildTransactionError("Invalid transfer bytecode: " + data);
    }
    var _a = getRawDecoded(walletUtil_1.sendMultiSigTypes, getBufferedByteCode(walletUtil_1.sendMultisigMethodId, data)), to = _a[0], amount = _a[1], internalData = _a[2], expireTime = _a[3], sequenceId = _a[4], signature = _a[5];
    return {
        to: ethereumjs_utils_old_1.addHexPrefix(to),
        amount: new bignumber_js_1.default(ethereumjs_utils_old_1.bufferToHex(amount)).toFixed(),
        expireTime: ethereumjs_utils_old_1.bufferToInt(expireTime),
        sequenceId: ethereumjs_utils_old_1.bufferToInt(sequenceId),
        signature: ethereumjs_utils_old_1.bufferToHex(signature),
        data: ethereumjs_utils_old_1.bufferToHex(internalData),
    };
}
exports.decodeNativeTransferData = decodeNativeTransferData;
/**
 * Decode the given ABI-encoded flush tokens data and return parsed fields
 *
 * @param data The data to decode
 * @returns parsed transfer data
 */
function decodeFlushTokensData(data) {
    if (!data.startsWith(walletUtil_1.flushForwarderTokensMethodId)) {
        throw new errors_1.BuildTransactionError("Invalid transfer bytecode: " + data);
    }
    var _a = getRawDecoded(walletUtil_1.flushTokensTypes, getBufferedByteCode(walletUtil_1.flushForwarderTokensMethodId, data)), forwarderAddress = _a[0], tokenAddress = _a[1];
    return {
        forwarderAddress: ethereumjs_utils_old_1.addHexPrefix(forwarderAddress),
        tokenAddress: ethereumjs_utils_old_1.addHexPrefix(tokenAddress),
    };
}
exports.decodeFlushTokensData = decodeFlushTokensData;
/**
 * Classify the given transaction data based as a transaction type.
 * ETH transactions are defined by the first 8 bytes of the transaction data, also known as the method id
 *
 * @param {string} data The data to classify the transaction with
 * @returns {TransactionType} The classified transaction type
 */
function classifyTransaction(data) {
    if (data.length < 10) {
        // contract calls must have at least 4 bytes (method id) and '0x'
        // if it doesn't have enough data to be a contract call it must be a single sig send
        return baseCoin_1.TransactionType.SingleSigSend;
    }
    // TODO(STLX-1970): validate if we are going to constraint to some methods allowed
    var transactionType = transactionTypesMap[data.slice(0, 10).toLowerCase()];
    if (transactionType === undefined) {
        transactionType = baseCoin_1.TransactionType.ContractCall;
    }
    return transactionType;
}
exports.classifyTransaction = classifyTransaction;
/**
 * A transaction types map according to the starting part of the encoded data
 */
var transactionTypesMap = (_a = {},
    _a[walletUtil_1.walletInitializationFirstBytes] = baseCoin_1.TransactionType.WalletInitialization,
    _a[walletUtil_1.createForwarderMethodId] = baseCoin_1.TransactionType.AddressInitialization,
    _a[walletUtil_1.sendMultisigMethodId] = baseCoin_1.TransactionType.Send,
    _a[walletUtil_1.flushForwarderTokensMethodId] = baseCoin_1.TransactionType.FlushTokens,
    _a[walletUtil_1.flushCoinsMethodId] = baseCoin_1.TransactionType.FlushCoins,
    _a[walletUtil_1.sendMultisigTokenMethodId] = baseCoin_1.TransactionType.Send,
    _a[stakingUtils_1.LockMethodId] = baseCoin_1.TransactionType.StakingLock,
    _a[stakingUtils_1.VoteMethodId] = baseCoin_1.TransactionType.StakingVote,
    _a[stakingUtils_1.ActivateMethodId] = baseCoin_1.TransactionType.StakingActivate,
    _a[stakingUtils_1.UnvoteMethodId] = baseCoin_1.TransactionType.StakingUnvote,
    _a[stakingUtils_1.UnlockMethodId] = baseCoin_1.TransactionType.StakingUnlock,
    _a[stakingUtils_1.WithdrawMethodId] = baseCoin_1.TransactionType.StakingWithdraw,
    _a);
/**
 *
 * @param {number} num number to be converted to hex
 * @returns {string} the hex number
 */
function numberToHexString(num) {
    var hex = num.toString(16);
    return hex.length % 2 === 0 ? '0x' + hex : '0x0' + hex;
}
exports.numberToHexString = numberToHexString;
/**
 *
 * @param {string} hex The hex string to be converted
 * @returns {number} the resulting number
 */
function hexStringToNumber(hex) {
    return parseInt(hex.slice(2), 16);
}
exports.hexStringToNumber = hexStringToNumber;
/**
 * Generates an address of the forwarder address to be deployed
 *
 * @param {string} contractAddress the address which is creating this new address
 * @param {number} contractCounter the nonce of the contract address
 * @returns {string} the calculated forwarder contract address
 */
function calculateForwarderAddress(contractAddress, contractCounter) {
    var forwarderAddress = ethereumjs_utils_old_1.generateAddress(contractAddress, contractCounter);
    return ethereumjs_utils_old_1.addHexPrefix(forwarderAddress.toString('hex'));
}
exports.calculateForwarderAddress = calculateForwarderAddress;
/**
 * Calculate the forwarder v1 address that will be generated if `creatorAddress` creates it with salt `salt`
 * and initcode `inicode using the create2 opcode
 * @param {string} creatorAddress The address that is sending the tx to create a new address, hex string
 * @param {string} salt The salt to create the address with using create2, hex string
 * @param {string} initcode The initcode that will be deployed to the address, hex string
 * @return {string} The calculated address
 */
function calculateForwarderV1Address(creatorAddress, salt, initcode) {
    var forwarderV1Address = ethereumjs_util_1.generateAddress2(buffer_1.Buffer.from(ethereumjs_utils_old_1.stripHexPrefix(creatorAddress), 'hex'), buffer_1.Buffer.from(ethereumjs_utils_old_1.stripHexPrefix(salt), 'hex'), buffer_1.Buffer.from(ethereumjs_utils_old_1.stripHexPrefix(initcode), 'hex'));
    return ethereumjs_utils_old_1.addHexPrefix(forwarderV1Address.toString('hex'));
}
exports.calculateForwarderV1Address = calculateForwarderV1Address;
/**
 * Take the implementation address for the proxy contract, and get the binary initcode for the associated proxy
 * @param {string} implementationAddress The address of the implementation contract for the proxy
 * @return {string} Binary hex string of the proxy
 */
function getProxyInitcode(implementationAddress) {
    var target = ethereumjs_utils_old_1.stripHexPrefix(implementationAddress.toLowerCase()).padStart(40, '0');
    // bytecode of the proxy, from:
    // https://github.com/BitGo/eth-multisig-v4/blob/d546a937f90f93e83b3423a5bf933d1d77c677c3/contracts/CloneFactory.sol#L42-L56
    return "0x3d602d80600a3d3981f3363d3d373d3d3d363d73" + target + "5af43d82803e903d91602b57fd5bf3";
}
exports.getProxyInitcode = getProxyInitcode;
/**
 * Convert the given signature parts to a string representation
 *
 * @param {SignatureParts} sig The signature to convert to string
 * @returns {string} String representation of the signature
 */
function toStringSig(sig) {
    return ethereumjs_utils_old_1.bufferToHex(buffer_1.Buffer.concat([ethereumjs_utils_old_1.setLengthLeft(sig.r, 32), ethereumjs_utils_old_1.setLengthLeft(sig.s, 32), ethereumjs_utils_old_1.toBuffer(sig.v)]));
}
exports.toStringSig = toStringSig;
/**
 * Return whether or not the given tx data has a signature
 *
 * @param {TxData} txData The transaction data to check for signature
 * @returns {boolean} true if the tx has a signature, else false
 */
function hasSignature(txData) {
    return (txData.v !== undefined &&
        txData.r !== undefined &&
        txData.s !== undefined &&
        txData.v.length > 0 &&
        txData.r.length > 0 &&
        txData.s.length > 0);
}
exports.hasSignature = hasSignature;
/**
 * Get the raw data decoded for some types
 *
 * @param {string[]} types ABI types definition
 * @param {Buffer} serializedArgs encoded args
 * @returns {Buffer[]} the decoded raw
 */
function getRawDecoded(types, serializedArgs) {
    return ethereumjs_abi_1.default.rawDecode(types, serializedArgs);
}
exports.getRawDecoded = getRawDecoded;
/**
 * Get the buffered bytecode from rawData using a methodId as delimiter
 *
 * @param {string} methodId the hex encoded method Id
 * @param {string} rawData the hex encoded raw data
 * @returns {Buffer} data buffered bytecode
 */
function getBufferedByteCode(methodId, rawData) {
    var splitBytecode = rawData.split(methodId);
    if (splitBytecode.length !== 2) {
        throw new errors_1.BuildTransactionError("Invalid send bytecode: " + rawData);
    }
    return buffer_1.Buffer.from(splitBytecode[1], 'hex');
}
exports.getBufferedByteCode = getBufferedByteCode;
/**
 * Get the statics coin object matching a given contract address if it exists
 *
 * @param tokenContractAddress The contract address to match against
 * @returns statics BaseCoin object for the matching token
 */
function getToken(tokenContractAddress, network) {
    var tokens = statics_1.coins.filter(function (coin) {
        if (coin instanceof statics_1.ContractAddressDefinedToken) {
            return (coin.network.type === network.type && coin.contractAddress.toLowerCase() === tokenContractAddress.toLowerCase());
        }
        return false;
    });
    // if length of tokens is 1, return the first, else return undefined
    // Can't directly index into tokens, or call `length`, so we use map to get an array
    var tokensArray = tokens.map(function (token) { return token; });
    if (tokensArray.length >= 1) {
        // there should never be two tokens with the same contract address, so we assert that here
        assert_1.default(tokensArray.length === 1);
        return tokensArray[0];
    }
    return undefined;
}
exports.getToken = getToken;
//# sourceMappingURL=data:application/json;base64,