"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
var ethereumjs_abi_1 = __importDefault(require("ethereumjs-abi"));
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var Crypto = __importStar(require("../../utils/crypto"));
var baseCoin_1 = require("../baseCoin");
var eth_1 = require("../eth");
var errors_1 = require("../baseCoin/errors");
var keyPair_1 = require("./keyPair");
var iface_1 = require("./iface");
var utils_1 = require("./utils");
var walletUtil_1 = require("./walletUtil");
var ethUtil = __importStar(require("ethereumjs-util"));
var tx_1 = require("@ethereumjs/tx");
var transferBuilderERC1155_1 = require("./transferBuilder/transferBuilderERC1155");
var transferBuilderERC721_1 = require("./transferBuilder/transferBuilderERC721");
var DEFAULT_M = 3;
/**
 * Ethereum transaction builder.
 */
var TransactionBuilder = /** @class */ (function (_super) {
    __extends(TransactionBuilder, _super);
    /**
     * Public constructor.
     *
     * @param _coinConfig
     */
    function TransactionBuilder(_coinConfig) {
        var _this = _super.call(this, _coinConfig) || this;
        _this._common = utils_1.getCommon(_this._coinConfig.network);
        _this._type = baseCoin_1.TransactionType.Send;
        _this._counter = 0;
        _this._value = '0';
        _this._walletOwnerAddresses = [];
        _this.transaction = new eth_1.Transaction(_this._coinConfig, _this._common);
        return _this;
    }
    /** @inheritdoc */
    TransactionBuilder.prototype.buildImplementation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var transactionData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        transactionData = this.getTransactionData();
                        if (this._txSignature) {
                            Object.assign(transactionData, this._txSignature);
                        }
                        this.transaction.setTransactionType(this._type);
                        transactionData.from = this._sourceKeyPair ? this._sourceKeyPair.getAddress() : undefined;
                        this.transaction.setTransactionData(transactionData);
                        if (!(this._sourceKeyPair && this._sourceKeyPair.getKeys().prv)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.transaction.sign(this._sourceKeyPair)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.transaction];
                }
            });
        });
    };
    TransactionBuilder.prototype.getTransactionData = function () {
        switch (this._type) {
            case baseCoin_1.TransactionType.WalletInitialization:
                return this.buildWalletInitializationTransaction();
            case baseCoin_1.TransactionType.Send:
            case baseCoin_1.TransactionType.SendERC721:
            case baseCoin_1.TransactionType.SendERC1155:
                return this.buildSendTransaction();
            case baseCoin_1.TransactionType.AddressInitialization:
                return this.buildAddressInitializationTransaction();
            case baseCoin_1.TransactionType.FlushTokens:
                return this.buildFlushTokensTransaction();
            case baseCoin_1.TransactionType.FlushCoins:
                return this.buildFlushCoinsTransaction();
            case baseCoin_1.TransactionType.SingleSigSend:
                return this.buildBase('0x');
            case baseCoin_1.TransactionType.ContractCall:
                return this.buildGenericContractCallTransaction();
            default:
                throw new errors_1.BuildTransactionError('Unsupported transaction type');
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.fromImplementation = function (rawTransaction) {
        var tx;
        if (/^0x?[0-9a-f]{1,}$/.test(rawTransaction.toLowerCase())) {
            tx = eth_1.Transaction.fromSerialized(this._coinConfig, this._common, rawTransaction);
            this.loadBuilderInput(tx.toJson());
        }
        else {
            var txData = JSON.parse(rawTransaction);
            tx = new eth_1.Transaction(this._coinConfig, txData);
        }
        return tx;
    };
    /**
     * Load the builder data using the deserialized transaction
     *
     * @param {TxData} transactionJson the deserialized transaction json
     */
    TransactionBuilder.prototype.loadBuilderInput = function (transactionJson) {
        var decodedType = eth_1.Utils.classifyTransaction(transactionJson.data);
        this.type(decodedType);
        this.counter(transactionJson.nonce);
        this.value(transactionJson.value);
        if (transactionJson._type === iface_1.ETHTransactionType.LEGACY) {
            this.fee({
                fee: transactionJson.gasPrice,
                gasPrice: transactionJson.gasPrice,
                gasLimit: transactionJson.gasLimit,
            });
        }
        else {
            this.fee({
                gasLimit: transactionJson.gasLimit,
                fee: transactionJson.maxFeePerGas,
                eip1559: {
                    maxFeePerGas: transactionJson.maxFeePerGas,
                    maxPriorityFeePerGas: transactionJson.maxPriorityFeePerGas,
                },
            });
        }
        if (utils_1.hasSignature(transactionJson)) {
            this._txSignature = { v: transactionJson.v, r: transactionJson.r, s: transactionJson.s };
        }
        this.setTransactionTypeFields(decodedType, transactionJson);
    };
    TransactionBuilder.prototype.setTransactionTypeFields = function (decodedType, transactionJson) {
        var _this = this;
        switch (decodedType) {
            case baseCoin_1.TransactionType.WalletInitialization:
                var owners = eth_1.Utils.decodeWalletCreationData(transactionJson.data);
                owners.forEach(function (element) {
                    _this.owner(element);
                });
                break;
            case baseCoin_1.TransactionType.FlushTokens:
                this.setContract(transactionJson.to);
                var _a = eth_1.Utils.decodeFlushTokensData(transactionJson.data), forwarderAddress = _a.forwarderAddress, tokenAddress = _a.tokenAddress;
                this.forwarderAddress(forwarderAddress);
                this.tokenAddress(tokenAddress);
                break;
            case baseCoin_1.TransactionType.FlushCoins:
                this.setContract(transactionJson.to);
                break;
            case baseCoin_1.TransactionType.Send:
            case baseCoin_1.TransactionType.SendERC1155:
            case baseCoin_1.TransactionType.SendERC721:
                this.setContract(transactionJson.to);
                this._transfer = this.transfer(transactionJson.data);
                break;
            case baseCoin_1.TransactionType.AddressInitialization:
                this.setContract(transactionJson.to);
                break;
            case baseCoin_1.TransactionType.SingleSigSend:
                this.setContract(transactionJson.to);
                break;
            case baseCoin_1.TransactionType.ContractCall:
                this.setContract(transactionJson.to);
                this.data(transactionJson.data);
                break;
            default:
                throw new errors_1.BuildTransactionError('Unsupported transaction type');
            // TODO: Add other cases of deserialization
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.signImplementation = function (key) {
        var signer = new keyPair_1.KeyPair({ prv: key.key });
        if (this._type === baseCoin_1.TransactionType.WalletInitialization && this._walletOwnerAddresses.length === 0) {
            throw new errors_1.SigningError('Cannot sign an wallet initialization transaction without owners');
        }
        if (this._sourceKeyPair) {
            throw new errors_1.SigningError('Cannot sign multiple times a non send-type transaction');
        }
        // Signing the transaction is an async operation, so save the source and leave the actual
        // signing for the build step
        this._sourceKeyPair = signer;
        return this.transaction;
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateAddress = function (address) {
        if (!utils_1.isValidEthAddress(address.address)) {
            throw new errors_1.BuildTransactionError('Invalid address ' + address.address);
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateKey = function (key) {
        if (!(Crypto.isValidXprv(key.key) || Crypto.isValidPrv(key.key))) {
            throw new errors_1.BuildTransactionError('Invalid key');
        }
    };
    /**
     * Validate the raw transaction is either a JSON or
     * a hex encoded transaction
     *
     * @param {any} rawTransaction The raw transaction to be validated
     */
    TransactionBuilder.prototype.validateRawTransaction = function (rawTransaction) {
        if (!rawTransaction) {
            throw new errors_1.InvalidTransactionError('Raw transaction is empty');
        }
        if (typeof rawTransaction === 'string') {
            if (/^0x?[0-9a-f]{1,}$/.test(rawTransaction.toLowerCase())) {
                var txBytes = ethUtil.toBuffer(ethUtil.addHexPrefix(rawTransaction.toLowerCase()));
                if (!this.isEip1559Txn(txBytes) && !this.isRLPDecodable(txBytes)) {
                    throw new errors_1.ParseTransactionError('There was error in decoding the hex string');
                }
            }
            else {
                try {
                    JSON.parse(rawTransaction);
                }
                catch (e) {
                    throw new errors_1.ParseTransactionError('There was error in parsing the JSON string');
                }
            }
        }
        else {
            throw new errors_1.InvalidTransactionError('Transaction is not a hex string or stringified json');
        }
    };
    TransactionBuilder.prototype.isEip1559Txn = function (txn) {
        try {
            tx_1.FeeMarketEIP1559Transaction.fromSerializedTx(txn);
            return true;
        }
        catch (_) {
            return false;
        }
    };
    TransactionBuilder.prototype.isRLPDecodable = function (bytes) {
        try {
            ethUtil.rlp.decode(bytes);
            return true;
        }
        catch (_) {
            return false;
        }
    };
    TransactionBuilder.prototype.validateBaseTransactionFields = function () {
        if (this._fee === undefined || (!this._fee.fee && !this._fee.gasPrice && !this._fee.eip1559)) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing fee');
        }
        if (this._common === undefined) {
            throw new errors_1.BuildTransactionError('Invalid transaction: network common');
        }
        if (this._counter === undefined) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing address counter');
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateTransaction = function (transaction) {
        this.validateBaseTransactionFields();
        switch (this._type) {
            case baseCoin_1.TransactionType.WalletInitialization:
                this.validateWalletInitializationFields();
                break;
            case baseCoin_1.TransactionType.Send:
            case baseCoin_1.TransactionType.SendERC721:
            case baseCoin_1.TransactionType.SendERC1155:
                this.validateContractAddress();
                break;
            case baseCoin_1.TransactionType.AddressInitialization:
                this.validateContractAddress();
                break;
            case baseCoin_1.TransactionType.FlushCoins:
                this.validateContractAddress();
                break;
            case baseCoin_1.TransactionType.FlushTokens:
                this.validateContractAddress();
                this.validateForwarderAddress();
                this.validateTokenAddress();
                break;
            case baseCoin_1.TransactionType.SingleSigSend:
                // for single sig sends, the contract address is actually the recipient
                this.validateContractAddress();
                break;
            case baseCoin_1.TransactionType.StakingLock:
            case baseCoin_1.TransactionType.StakingUnlock:
            case baseCoin_1.TransactionType.StakingVote:
            case baseCoin_1.TransactionType.StakingUnvote:
            case baseCoin_1.TransactionType.StakingActivate:
            case baseCoin_1.TransactionType.StakingWithdraw:
                break;
            case baseCoin_1.TransactionType.ContractCall:
                this.validateContractAddress();
                this.validateDataField();
                break;
            default:
                throw new errors_1.BuildTransactionError('Unsupported transaction type');
        }
    };
    /**
     * Check wallet owner addresses for wallet initialization transactions are valid or throw.
     */
    TransactionBuilder.prototype.validateWalletInitializationFields = function () {
        if (this._walletOwnerAddresses === undefined) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing wallet owners');
        }
        if (this._walletOwnerAddresses.length !== 3) {
            throw new errors_1.BuildTransactionError("Invalid transaction: wrong number of owners -- required: 3, found: " + this._walletOwnerAddresses.length);
        }
    };
    /**
     * Check if a token address for the tx was defined or throw.
     */
    TransactionBuilder.prototype.validateTokenAddress = function () {
        if (this._tokenAddress === undefined) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing token address');
        }
    };
    /**
     * Check if a forwarder address for the tx was defined or throw.
     */
    TransactionBuilder.prototype.validateForwarderAddress = function () {
        if (this._forwarderAddress === undefined) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing forwarder address');
        }
    };
    /**
     * Check if a contract address for the wallet was defined or throw.
     */
    TransactionBuilder.prototype.validateContractAddress = function () {
        if (this._contractAddress === undefined) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing contract address');
        }
    };
    /**
     * Checks if a contract call data field was defined or throws otherwise
     */
    TransactionBuilder.prototype.validateDataField = function () {
        if (!this._data) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing contract call data field');
        }
    };
    TransactionBuilder.prototype.setContract = function (address) {
        if (address === undefined) {
            throw new errors_1.BuildTransactionError('Undefined recipient address');
        }
        this.contract(address);
    };
    TransactionBuilder.prototype.validateValue = function (value) {
        if (value.isLessThan(0)) {
            throw new errors_1.BuildTransactionError('Value cannot be below less than zero');
        }
        // TODO: validate the amount is not bigger than the max amount in each Eth family coin
    };
    // region Common builder methods
    /**
     * The type of transaction being built.
     *
     * @param {TransactionType} type
     */
    TransactionBuilder.prototype.type = function (type) {
        this._type = type;
    };
    /**
     * Set the transaction fees. Low fees may get a transaction rejected or never picked up by bakers.
     *
     * @param {Fee} fee Baker fees. May also include the maximum gas to pay
     */
    TransactionBuilder.prototype.fee = function (fee) {
        this.validateValue(new bignumber_js_1.default(fee.fee));
        if (fee.gasLimit) {
            this.validateValue(new bignumber_js_1.default(fee.gasLimit));
        }
        if (fee.eip1559) {
            this.validateValue(new bignumber_js_1.default(fee.eip1559.maxFeePerGas));
            this.validateValue(new bignumber_js_1.default(fee.eip1559.maxPriorityFeePerGas));
        }
        if (fee.gasPrice) {
            this.validateValue(new bignumber_js_1.default(fee.gasPrice));
        }
        this._fee = fee;
    };
    /**
     * Set the transaction counter to prevent submitting repeated transactions.
     *
     * @param {number} counter The counter to use
     */
    TransactionBuilder.prototype.counter = function (counter) {
        if (counter < 0) {
            throw new errors_1.BuildTransactionError("Invalid counter: " + counter);
        }
        this._counter = counter;
    };
    /**
     * The value to send along with this transaction. 0 by default
     *
     * @param {string} value The value to send along with this transaction
     */
    TransactionBuilder.prototype.value = function (value) {
        this._value = value;
    };
    // set args that are required for all types of eth transactions
    TransactionBuilder.prototype.buildBase = function (data) {
        var _a, _b;
        var baseParams = {
            gasLimit: this._fee.gasLimit,
            nonce: this._counter,
            data: data,
            chainId: this._common.chainIdBN().toString(),
            value: this._value,
            to: this._contractAddress,
        };
        if (this._fee.eip1559) {
            return __assign(__assign({}, baseParams), { _type: iface_1.ETHTransactionType.EIP1559, maxFeePerGas: this._fee.eip1559.maxFeePerGas, maxPriorityFeePerGas: this._fee.eip1559.maxPriorityFeePerGas });
        }
        else {
            return __assign(__assign({}, baseParams), { _type: iface_1.ETHTransactionType.LEGACY, gasPrice: (_b = (_a = this._fee) === null || _a === void 0 ? void 0 : _a.gasPrice) !== null && _b !== void 0 ? _b : this._fee.fee, v: this.getFinalV() });
        }
    };
    // endregion
    // region WalletInitialization builder methods
    /**
     * Set one of the owners of the multisig wallet.
     *
     * @param {string} address An Ethereum address
     */
    TransactionBuilder.prototype.owner = function (address) {
        if (this._type !== baseCoin_1.TransactionType.WalletInitialization) {
            throw new errors_1.BuildTransactionError('Multisig wallet owner can only be set for initialization transactions');
        }
        if (this._walletOwnerAddresses.length >= DEFAULT_M) {
            throw new errors_1.BuildTransactionError('A maximum of ' + DEFAULT_M + ' owners can be set for a multisig wallet');
        }
        if (!utils_1.isValidEthAddress(address)) {
            throw new errors_1.BuildTransactionError('Invalid address: ' + address);
        }
        if (this._walletOwnerAddresses.includes(address)) {
            throw new errors_1.BuildTransactionError('Repeated owner address: ' + address);
        }
        this._walletOwnerAddresses.push(address);
    };
    /**
     * Build a transaction for a generic multisig contract.
     *
     * @returns {TxData} The Ethereum transaction data
     */
    TransactionBuilder.prototype.buildWalletInitializationTransaction = function () {
        return this.buildBase(this.getContractData(this._walletOwnerAddresses));
    };
    /**
     * Returns the smart contract encoded data
     *
     * @param {string[]} addresses - the contract signers
     * @returns {string} - the smart contract encoded data
     */
    TransactionBuilder.prototype.getContractData = function (addresses) {
        var params = [addresses];
        var resultEncodedParameters = ethereumjs_abi_1.default.rawEncode(walletUtil_1.walletSimpleConstructor, params)
            .toString('hex')
            .replace('0x', '');
        return walletUtil_1.walletSimpleByteCode + resultEncodedParameters;
    };
    // endregion
    // region Send builder methods
    TransactionBuilder.prototype.contract = function (address) {
        if (!utils_1.isValidEthAddress(address)) {
            throw new errors_1.BuildTransactionError('Invalid address: ' + address);
        }
        this._contractAddress = address;
    };
    /**
     * Gets the transfer funds builder if exist, or creates a new one for this transaction and returns it
     *
     * @param [data] transfer data to initialize the transfer builder with, empty if none given
     * @returns {TransferBuilder} the transfer builder
     */
    TransactionBuilder.prototype.transfer = function (data) {
        if (!(this._type === baseCoin_1.TransactionType.Send ||
            this._type === baseCoin_1.TransactionType.SendERC721 ||
            this._type === baseCoin_1.TransactionType.SendERC1155)) {
            throw new errors_1.BuildTransactionError('Transfers can only be set for send transactions');
        }
        else if (!this._transfer) {
            if (this._type === baseCoin_1.TransactionType.Send) {
                this._transfer = new eth_1.TransferBuilder(data);
            }
            else if (this._type === baseCoin_1.TransactionType.SendERC721) {
                this._transfer = new transferBuilderERC721_1.ERC721TransferBuilder(data);
            }
            else if (this._type === baseCoin_1.TransactionType.SendERC1155) {
                this._transfer = new transferBuilderERC1155_1.ERC1155TransferBuilder(data);
            }
        }
        return this._transfer;
    };
    /**
     * Returns the serialized sendMultiSig contract method data
     *
     * @returns {string} serialized sendMultiSig data
     */
    TransactionBuilder.prototype.getSendData = function () {
        if (!this._transfer) {
            throw new errors_1.BuildTransactionError('Missing transfer information');
        }
        return this._transfer.signAndBuild();
    };
    TransactionBuilder.prototype.buildSendTransaction = function () {
        var sendData = this.getSendData();
        var tx = this.buildBase(sendData);
        tx.to = this._contractAddress;
        return tx;
    };
    // endregion
    // region AddressInitialization builder methods
    /**
     * Set the contract transaction nonce to calculate the forwarder address.
     *
     * @param {number} contractCounter The counter to use
     */
    TransactionBuilder.prototype.contractCounter = function (contractCounter) {
        if (contractCounter < 0) {
            throw new errors_1.BuildTransactionError("Invalid contract counter: " + contractCounter);
        }
        this._contractCounter = contractCounter;
    };
    /**
     * Build a transaction to create a forwarder.
     *
     * @returns {TxData} The Ethereum transaction data
     */
    TransactionBuilder.prototype.buildAddressInitializationTransaction = function () {
        var addressInitData = utils_1.getAddressInitializationData();
        var tx = this.buildBase(addressInitData);
        tx.to = this._contractAddress;
        if (this._contractCounter) {
            tx.deployedAddress = utils_1.calculateForwarderAddress(this._contractAddress, this._contractCounter);
        }
        return tx;
    };
    // endregion
    // region flush methods
    /**
     * Set the forwarder address to flush
     *
     * @param {string} address The address to flush
     */
    TransactionBuilder.prototype.forwarderAddress = function (address) {
        if (!utils_1.isValidEthAddress(address)) {
            throw new errors_1.BuildTransactionError('Invalid address: ' + address);
        }
        this._forwarderAddress = address;
    };
    /**
     * Set the address of the ERC20 token contract that we are flushing tokens for
     *
     * @param {string} address the contract address of the token to flush
     */
    TransactionBuilder.prototype.tokenAddress = function (address) {
        if (!utils_1.isValidEthAddress(address)) {
            throw new errors_1.BuildTransactionError('Invalid address: ' + address);
        }
        this._tokenAddress = address;
    };
    /**
     * Build a transaction to flush tokens from a forwarder.
     *
     * @returns {TxData} The Ethereum transaction data
     */
    TransactionBuilder.prototype.buildFlushTokensTransaction = function () {
        return this.buildBase(utils_1.flushTokensData(this._forwarderAddress, this._tokenAddress));
    };
    /**
     * Build a transaction to flush tokens from a forwarder.
     *
     * @returns {TxData} The Ethereum transaction data
     */
    TransactionBuilder.prototype.buildFlushCoinsTransaction = function () {
        return this.buildBase(utils_1.flushCoinsData());
    };
    // endregion
    // region generic contract call
    TransactionBuilder.prototype.data = function (encodedCall) {
        if (this._type !== baseCoin_1.TransactionType.ContractCall) {
            throw new errors_1.BuildTransactionError('data can only be set for contract call transaction types');
        }
        this._data = encodedCall;
    };
    TransactionBuilder.prototype.buildGenericContractCallTransaction = function () {
        return this.buildBase(this._data);
    };
    Object.defineProperty(TransactionBuilder.prototype, "transaction", {
        // endregion
        /** @inheritdoc */
        get: function () {
            return this._transaction;
        },
        /** @inheritdoc */
        set: function (transaction) {
            this._transaction = transaction;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Get the final v value. Final v is described in EIP-155.
     *
     * @protected for internal use when the enableFinalVField flag is true.
     */
    TransactionBuilder.prototype.getFinalV = function () {
        return ethUtil.addHexPrefix(this._common.chainIdBN().muln(2).addn(35).toString(16));
    };
    return TransactionBuilder;
}(baseCoin_1.BaseTransactionBuilder));
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,