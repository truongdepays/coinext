/// <reference types="node" />
/** ETH transfer builder */
export declare class TransferBuilder {
    private readonly _EMPTY_HEX_VALUE;
    protected _amount: string;
    protected _toAddress: string;
    protected _sequenceId: number;
    protected _signKey: string;
    protected _expirationTime: number;
    protected _signature: string;
    private _data;
    private _tokenContractAddress?;
    private _coin;
    constructor(serializedData?: string);
    /**
     * A method to set the ERC20 token to be transferred.
     * This ERC20 token may not be compatible with the network.
     *
     * @param {string} coin the ERC20 coin to be set
     * @returns {TransferBuilder} the transfer builder instance modified
     */
    coin(coin: string): TransferBuilder;
    data(additionalData: string): TransferBuilder;
    amount(amount: string): this;
    to(address: string): TransferBuilder;
    contractSequenceId(counter: number): TransferBuilder;
    key(signKey: string): TransferBuilder;
    expirationTime(date: number): TransferBuilder;
    signAndBuild(): string;
    private hasMandatoryFields;
    /**
     * Obtains the proper operation hash to sign either a sendMultiSig data
     * or a sendMultiSigToken data
     *
     * @returns {string} the operation hash
     */
    private getOperationHash;
    protected getOperationData(): (string | Buffer)[][];
    /**
     * Get the prefix used in generating an operation hash for sending tokens
     *
     * @returns the string prefix
     */
    protected getTokenOperationHashPrefix(): string;
    /**
     * Get the prefix used in generating an operation hash for sending native coins
     *
     * @returns the string prefix
     */
    protected getNativeOperationHashPrefix(): string;
    /** Return an expiration time, in seconds, set to one hour from now
     *
     * @returns {number} expiration time
     */
    private getExpirationTime;
    /**
     * If a signing key is set for this builder, recalculates the signature
     *
     * @returns {string} the signature value
     */
    protected getSignature(): string;
    protected ethSignMsgHash(): string;
    private decodeTransferData;
}
//# sourceMappingURL=transferBuilder.d.ts.map