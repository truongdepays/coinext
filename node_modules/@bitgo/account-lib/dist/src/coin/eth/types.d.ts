import { TypedTransaction } from '@ethereumjs/tx';
import EthereumCommon from '@ethereumjs/common';
import { EthLikeTransactionData, TxData } from './iface';
import { KeyPair } from './keyPair';
/**
 * An Ethereum transaction with helpers for serialization and deserialization.
 */
export declare class EthTransactionData implements EthLikeTransactionData {
    private tx;
    protected args?: {
        deployedAddress?: string;
        chainId?: string;
    };
    constructor(tx: TypedTransaction, args?: {
        deployedAddress?: string;
        chainId?: string;
    });
    /**
     * Build an thereum transaction from its JSON representation
     *
     * @param {TxData} tx The JSON representation of the transaction
     * @param {EthereumCommon} common Class to access chain and hardfork parameters
     * @returns {EthTransactionData} a new ethereum transaction object
     */
    static fromJson(tx: TxData, common: EthereumCommon): EthTransactionData;
    /**
     * Build an ethereum transaction from its string serialization
     *
     * @param tx The string serialization of the ethereum transaction
     * @param common
     */
    static fromSerialized(tx: string, common: EthereumCommon): EthTransactionData;
    sign(keyPair: KeyPair): void;
    /** @inheritdoc */
    toJson(): TxData;
    /** @inheritdoc */
    toSerialized(): string;
}
//# sourceMappingURL=types.d.ts.map