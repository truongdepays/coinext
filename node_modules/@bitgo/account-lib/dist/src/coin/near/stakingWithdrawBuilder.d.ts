import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { TransactionType } from '../baseCoin';
import { Transaction } from './transaction';
import { TransactionBuilder } from './transactionBuilder';
export declare class StakingWithdrawBuilder extends TransactionBuilder {
    private contractCallWrapper;
    constructor(_coinConfig: Readonly<CoinConfig>);
    protected get transactionType(): TransactionType;
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    initBuilder(tx: Transaction): void;
    /**
     * Sets the gas of this transaction.
     *
     * @param {string} value the gas of this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    gas(gas: string): this;
    /**
     * Sets the amount of this transaction.
     *
     * @param {string} value the amount in the minimum unit (1 Near = 1e24 yoctos) of this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    amount(amount: string): this;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
}
//# sourceMappingURL=stakingWithdrawBuilder.d.ts.map