"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var constants_1 = require("./constants");
var utils_1 = __importDefault(require("./utils"));
var keyPair_1 = require("./keyPair");
var nearAPI = __importStar(require("near-api-js"));
var sha256 = __importStar(require("js-sha256"));
var bs58_1 = __importDefault(require("bs58"));
var Transaction = /** @class */ (function (_super) {
    __extends(Transaction, _super);
    function Transaction(coinConfig) {
        return _super.call(this, coinConfig) || this;
    }
    Object.defineProperty(Transaction.prototype, "nearTransaction", {
        get: function () {
            return this._nearTransaction;
        },
        set: function (tx) {
            this._nearTransaction = tx;
            this._id = utils_1.default.base58Encode(this.getTransactionHash());
        },
        enumerable: false,
        configurable: true
    });
    /** @inheritdoc */
    Transaction.prototype.canSign = function (key) {
        try {
            new keyPair_1.KeyPair({ prv: key.key });
            return true;
        }
        catch (_a) {
            return false;
        }
    };
    /** @inheritdoc */
    Transaction.prototype.toBroadcastFormat = function () {
        if (!this._nearTransaction) {
            throw new errors_1.InvalidTransactionError('Empty transaction data');
        }
        var txSeralized = this._nearSignedTransaction
            ? Buffer.from(this._nearSignedTransaction.encode()).toString('base64')
            : Buffer.from(this._nearTransaction.encode()).toString('base64');
        return txSeralized;
    };
    /** @inheritdoc */
    Transaction.prototype.toJson = function () {
        if (!this._nearTransaction) {
            throw new errors_1.InvalidTransactionError('Empty transaction data');
        }
        var parsedAction = {};
        if (this._nearTransaction.actions[0].enum === 'transfer') {
            parsedAction = { transfer: this._nearTransaction.actions[0].transfer };
        }
        else if (this._nearTransaction.actions[0].enum === 'functionCall') {
            var functionCallObject = this._nearTransaction.actions[0].functionCall;
            parsedAction = {
                functionCall: {
                    methodName: functionCallObject.methodName,
                    args: JSON.parse(functionCallObject.args.toString()),
                    gas: functionCallObject.gas.toString(),
                    deposit: functionCallObject.deposit.toString(),
                },
            };
        }
        return {
            id: this._id,
            signerId: this._nearTransaction.signerId,
            publicKey: this._nearTransaction.publicKey.toString(),
            nonce: this._nearTransaction.nonce,
            receiverId: this._nearTransaction.receiverId,
            actions: [parsedAction],
            signature: typeof this._nearSignedTransaction === 'undefined' ? undefined : this._nearSignedTransaction.signature,
        };
    };
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    Transaction.prototype.setTransactionType = function (transactionType) {
        this._type = transactionType;
    };
    /**
     * Sets this transaction payload
     *
     * @param rawTransaction
     */
    Transaction.prototype.fromRawTransaction = function (rawTx) {
        var rawTransaction = Buffer.from(rawTx, 'base64');
        try {
            var signedTx = nearAPI.utils.serialize.deserialize(nearAPI.transactions.SCHEMA, nearAPI.transactions.SignedTransaction, rawTransaction);
            signedTx.transaction.nonce = parseInt(signedTx.transaction.nonce.toString(), 10);
            this._nearSignedTransaction = signedTx;
            this._nearTransaction = signedTx.transaction;
            this._id = utils_1.default.base58Encode(this.getTransactionHash());
        }
        catch (e) {
            try {
                var unsignedTx = nearAPI.utils.serialize.deserialize(nearAPI.transactions.SCHEMA, nearAPI.transactions.Transaction, rawTransaction);
                unsignedTx.nonce = parseInt(unsignedTx.nonce.toString(), 10);
                this._nearTransaction = unsignedTx;
                this._id = utils_1.default.base58Encode(this.getTransactionHash());
            }
            catch (e) {
                throw new errors_1.InvalidTransactionError('unable to build transaction from raw');
            }
        }
        this.loadInputsAndOutputs();
    };
    /**
     * Sign this transaction
     *
     * @param {KeyPair} signer key
     */
    Transaction.prototype.sign = function (signer) {
        if (!this._nearTransaction) {
            throw new errors_1.InvalidTransactionError('empty transaction to sign');
        }
        var serializedTxHash = this.getTransactionHash();
        var signature = signer.signMessageinUint8Array(serializedTxHash);
        this._nearSignedTransaction = new nearAPI.transactions.SignedTransaction({
            transaction: this._nearTransaction,
            signature: new nearAPI.transactions.Signature({
                keyType: this._nearTransaction.publicKey.keyType,
                data: signature,
            }),
        });
        this.loadInputsAndOutputs();
    };
    /**
     * set transaction type by staking contract method names.
     * @param methodName method name to match and set the transaction type
     */
    Transaction.prototype.setTypeByStakingMethod = function (methodName) {
        switch (methodName) {
            case constants_1.StakingContractMethodNames.DepositAndStake:
                this.setTransactionType(baseCoin_1.TransactionType.StakingActivate);
                break;
            case constants_1.StakingContractMethodNames.Unstake:
                this.setTransactionType(baseCoin_1.TransactionType.StakingDeactivate);
                break;
            case constants_1.StakingContractMethodNames.Withdraw:
                this.setTransactionType(baseCoin_1.TransactionType.StakingWithdraw);
                break;
        }
    };
    /**
     * Check if method is allowed on Near account-lib implementation.
     * This method should check on all contracts added to Near.
     * @param methodName contract call method name to check if its allowed.
     */
    Transaction.prototype.validateMethodAllowed = function (methodName) {
        if (!Object.values(constants_1.StakingContractMethodNames).some(function (item) { return item === methodName; })) {
            throw new errors_1.InvalidTransactionError('unsupported function call in raw transaction');
        }
    };
    /**
     * Build input and output field for this transaction
     *
     */
    Transaction.prototype.loadInputsAndOutputs = function () {
        if (this._nearTransaction.actions.length !== 1) {
            throw new errors_1.InvalidTransactionError('too many actions in raw transaction');
        }
        var action = this._nearTransaction.actions[0];
        switch (action.enum) {
            case 'transfer':
                this.setTransactionType(baseCoin_1.TransactionType.Send);
                break;
            case 'functionCall':
                var methodName = action.functionCall.methodName;
                this.validateMethodAllowed(methodName);
                this.setTypeByStakingMethod(methodName);
                break;
            default:
                throw new errors_1.InvalidTransactionError('unsupported action in raw transaction');
        }
        var outputs = [];
        var inputs = [];
        switch (this.type) {
            case baseCoin_1.TransactionType.Send:
                var amount = action.transfer.deposit.toString();
                inputs.push({
                    address: this._nearTransaction.signerId,
                    value: amount,
                    coin: this._coinConfig.name,
                });
                outputs.push({
                    address: this._nearTransaction.receiverId,
                    value: amount,
                    coin: this._coinConfig.name,
                });
                break;
            case baseCoin_1.TransactionType.StakingActivate:
                var stakingAmount = action.functionCall.deposit.toString();
                inputs.push({
                    address: this._nearTransaction.signerId,
                    value: stakingAmount,
                    coin: this._coinConfig.name,
                });
                outputs.push({
                    address: this._nearTransaction.receiverId,
                    value: stakingAmount,
                    coin: this._coinConfig.name,
                });
                break;
            case baseCoin_1.TransactionType.StakingWithdraw:
                var stakingWithdrawAmount = JSON.parse(Buffer.from(action.functionCall.args).toString()).amount;
                inputs.push({
                    address: this._nearTransaction.receiverId,
                    value: stakingWithdrawAmount,
                    coin: this._coinConfig.name,
                });
                outputs.push({
                    address: this._nearTransaction.signerId,
                    value: stakingWithdrawAmount,
                    coin: this._coinConfig.name,
                });
                break;
        }
        this._outputs = outputs;
        this._inputs = inputs;
    };
    /**
     * Returns a complete explanation for a transfer transaction
     * @param {TxData} json The transaction data in json format
     * @param {TransactionExplanation} explanationResult The transaction explanation to be completed
     * @returns {TransactionExplanation}
     */
    Transaction.prototype.explainTransferTransaction = function (json, explanationResult) {
        var _a, _b;
        return __assign(__assign({}, explanationResult), { outputAmount: ((_a = json.actions[0].transfer) === null || _a === void 0 ? void 0 : _a.deposit.toString()) || '', outputs: [
                {
                    address: json.receiverId,
                    amount: ((_b = json.actions[0].transfer) === null || _b === void 0 ? void 0 : _b.deposit.toString()) || '',
                },
            ] });
    };
    /**
     * Returns a complete explanation for a staking activate transaction
     * @param {TxData} json The transaction data in json format
     * @param {TransactionExplanation} explanationResult The transaction explanation to be completed
     * @returns {TransactionExplanation}
     */
    Transaction.prototype.explainStakingActivateTransaction = function (json, explanationResult) {
        var _a, _b;
        return __assign(__assign({}, explanationResult), { outputAmount: ((_a = json.actions[0].functionCall) === null || _a === void 0 ? void 0 : _a.deposit.toString()) || '', outputs: [
                {
                    address: json.receiverId,
                    amount: ((_b = json.actions[0].functionCall) === null || _b === void 0 ? void 0 : _b.deposit.toString()) || '',
                },
            ] });
    };
    /**
     * Returns a complete explanation for a staking withdraw transaction
     * @param {TxData} json The transaction data in json format
     * @param {TransactionExplanation} explanationResult The transaction explanation to be completed
     * @returns {TransactionExplanation}
     */
    Transaction.prototype.explainStakingWithdrawTransaction = function (json, explanationResult) {
        var _a;
        var amount = (_a = json.actions[0].functionCall) === null || _a === void 0 ? void 0 : _a.args.amount;
        return __assign(__assign({}, explanationResult), { outputAmount: amount, outputs: [
                {
                    address: json.signerId,
                    amount: amount,
                },
            ] });
    };
    /** @inheritdoc */
    Transaction.prototype.explainTransaction = function () {
        var result = this.toJson();
        var displayOrder = ['outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee', 'type'];
        var outputs = [];
        var explanationResult = {
            // txhash used to identify the transactions
            id: result.id || '',
            displayOrder: displayOrder,
            outputAmount: '0',
            changeAmount: '0',
            changeOutputs: [],
            outputs: outputs,
            fee: { fee: '' },
            type: this.type,
        };
        switch (this.type) {
            case baseCoin_1.TransactionType.Send:
                return this.explainTransferTransaction(result, explanationResult);
            case baseCoin_1.TransactionType.StakingActivate:
                return this.explainStakingActivateTransaction(result, explanationResult);
            case baseCoin_1.TransactionType.StakingDeactivate:
                return explanationResult;
            case baseCoin_1.TransactionType.StakingWithdraw:
                return this.explainStakingWithdrawTransaction(result, explanationResult);
            default:
                throw new errors_1.InvalidTransactionError('Transaction type not supported');
        }
    };
    Transaction.prototype.getTransactionHash = function () {
        var serializedTx = nearAPI.utils.serialize.serialize(nearAPI.transactions.SCHEMA, this._nearTransaction);
        return new Uint8Array(sha256.sha256.array(serializedTx));
    };
    Object.defineProperty(Transaction.prototype, "signablePayload", {
        get: function () {
            if (!this._nearTransaction) {
                throw new errors_1.InvalidTransactionError('empty transaction');
            }
            return Buffer.from(this.getTransactionHash());
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Constructs a signed payload using construct.signTx
     * This method will be called during the build step if a TSS signature
     * is added and will set the signTransaction which is the txHex that will be broadcasted
     * As well as add the signature used to sign to the signature array in hex format
     *
     * @param {Buffer} signature The signature to be added to a near transaction
     */
    Transaction.prototype.constructSignedPayload = function (signature) {
        this._nearSignedTransaction = new nearAPI.transactions.SignedTransaction({
            transaction: this._nearTransaction,
            signature: new nearAPI.transactions.Signature({
                keyType: this._nearTransaction.publicKey.keyType,
                data: signature,
            }),
        });
        this.loadInputsAndOutputs();
    };
    Object.defineProperty(Transaction.prototype, "signature", {
        /** @inheritdoc **/
        get: function () {
            var signatures = [];
            if (this._nearSignedTransaction) {
                signatures.push(bs58_1.default.encode(this._nearSignedTransaction.signature.data));
            }
            return signatures;
        },
        enumerable: false,
        configurable: true
    });
    return Transaction;
}(baseCoin_1.BaseTransaction));
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,