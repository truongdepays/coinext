"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
var keyPair_1 = require("./keyPair");
var crypto_1 = require("./../../utils/crypto");
var bs58_1 = __importDefault(require("bs58"));
var Utils = /** @class */ (function () {
    function Utils() {
    }
    /** @inheritdoc */
    Utils.prototype.isValidAddress = function (address) {
        return this.isValidAccountId(address);
    };
    /** @inheritdoc */
    Utils.prototype.isValidBlockId = function (hash) {
        return crypto_1.isBase58(hash, 32);
    };
    /** @inheritdoc */
    Utils.prototype.isValidPrivateKey = function (key) {
        return this.isValidKey(key);
    };
    /** @inheritdoc */
    Utils.prototype.isValidPublicKey = function (pubKey) {
        return this.isValidAccountId(pubKey);
    };
    /**
     * Check if the key have the correct format
     *
     * @param {string} key - string to be checked
     * @return {boolean} true if the string have the correct format otherwise return false
     */
    Utils.prototype.isValidKey = function (key) {
        try {
            new keyPair_1.KeyPair({ prv: key });
            return true;
        }
        catch (_a) {
            return false;
        }
    };
    /**
     * Check if the account have the correct format
     *
     * @param {string} accountId - string to be checked
     * @return {boolean} if the string can have the correct format and match the expected length
     * or can create a new keyPair
     */
    Utils.prototype.isValidAccountId = function (accountId) {
        try {
            // this regex is from near doc, https://docs.near.org/docs/concepts/account
            (/^(([a-z\d]+[\-_])*[a-z\d]+\.)*([a-z\d]+[\-_])*[a-z\d]+$/.test(accountId) &&
                accountId.length > 2 &&
                accountId.length < 64) ||
                new keyPair_1.KeyPair({ pub: accountId });
            return true;
        }
        catch (_a) {
            return false;
        }
    };
    /** @inheritdoc */
    Utils.prototype.isValidSignature = function (signature) {
        return crypto_1.isBase58(signature, 64);
    };
    /** @inheritdoc */
    Utils.prototype.isValidTransactionId = function (txId) {
        return crypto_1.isBase58(txId, 32);
    };
    Utils.prototype.base58Encode = function (value) {
        return bs58_1.default.encode(value);
    };
    /**
     * Check if base58 decoded string is equal to length
     *
     * @param {string} value - string to be checked
     * @param {number} length - expected decoded length
     * @return {boolean} if the string can decoded as base58 and match the expected length
     */
    Utils.prototype.isBase58 = function (value, length) {
        try {
            return !!value && bs58_1.default.decode(value).length === length;
        }
        catch (e) {
            return false;
        }
    };
    return Utils;
}());
exports.Utils = Utils;
var utils = new Utils();
exports.default = utils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29pbi9uZWFyL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLHFDQUFvQztBQUNwQywrQ0FBZ0Q7QUFDaEQsOENBQXdCO0FBRXhCO0lBQUE7SUFvRkEsQ0FBQztJQW5GQyxrQkFBa0I7SUFDbEIsOEJBQWMsR0FBZCxVQUFlLE9BQWU7UUFDNUIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELGtCQUFrQjtJQUNsQiw4QkFBYyxHQUFkLFVBQWUsSUFBWTtRQUN6QixPQUFPLGlCQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxrQkFBa0I7SUFDbEIsaUNBQWlCLEdBQWpCLFVBQWtCLEdBQVc7UUFDM0IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxrQkFBa0I7SUFDbEIsZ0NBQWdCLEdBQWhCLFVBQWlCLE1BQWM7UUFDN0IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsMEJBQVUsR0FBVixVQUFXLEdBQVc7UUFDcEIsSUFBSTtZQUNGLElBQUksaUJBQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQzFCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFBQyxXQUFNO1lBQ04sT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxnQ0FBZ0IsR0FBaEIsVUFBaUIsU0FBaUI7UUFDaEMsSUFBSTtZQUNGLDJFQUEyRTtZQUMzRSxDQUFDLHlEQUF5RCxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ3hFLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQztnQkFDcEIsU0FBUyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7Z0JBQ3RCLElBQUksaUJBQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1lBQ2xDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFBQyxXQUFNO1lBQ04sT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7SUFFRCxrQkFBa0I7SUFDbEIsZ0NBQWdCLEdBQWhCLFVBQWlCLFNBQWlCO1FBQ2hDLE9BQU8saUJBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELGtCQUFrQjtJQUNsQixvQ0FBb0IsR0FBcEIsVUFBcUIsSUFBWTtRQUMvQixPQUFPLGlCQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCw0QkFBWSxHQUFaLFVBQWEsS0FBaUI7UUFDNUIsT0FBTyxjQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCx3QkFBUSxHQUFSLFVBQVMsS0FBYSxFQUFFLE1BQWM7UUFDcEMsSUFBSTtZQUNGLE9BQU8sQ0FBQyxDQUFDLEtBQUssSUFBSSxjQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUM7U0FDeEQ7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBQ0gsWUFBQztBQUFELENBQUMsQUFwRkQsSUFvRkM7QUFwRlksc0JBQUs7QUFzRmxCLElBQU0sS0FBSyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7QUFFMUIsa0JBQWUsS0FBSyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVV0aWxzIH0gZnJvbSAnLi4vYmFzZUNvaW4nO1xuaW1wb3J0IHsgS2V5UGFpciB9IGZyb20gJy4va2V5UGFpcic7XG5pbXBvcnQgeyBpc0Jhc2U1OCB9IGZyb20gJy4vLi4vLi4vdXRpbHMvY3J5cHRvJztcbmltcG9ydCBiczU4IGZyb20gJ2JzNTgnO1xuXG5leHBvcnQgY2xhc3MgVXRpbHMgaW1wbGVtZW50cyBCYXNlVXRpbHMge1xuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgaXNWYWxpZEFkZHJlc3MoYWRkcmVzczogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZEFjY291bnRJZChhZGRyZXNzKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBpc1ZhbGlkQmxvY2tJZChoYXNoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaXNCYXNlNTgoaGFzaCwgMzIpO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIGlzVmFsaWRQcml2YXRlS2V5KGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZEtleShrZXkpO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIGlzVmFsaWRQdWJsaWNLZXkocHViS2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkQWNjb3VudElkKHB1YktleSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGtleSBoYXZlIHRoZSBjb3JyZWN0IGZvcm1hdFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gc3RyaW5nIHRvIGJlIGNoZWNrZWRcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgc3RyaW5nIGhhdmUgdGhlIGNvcnJlY3QgZm9ybWF0IG90aGVyd2lzZSByZXR1cm4gZmFsc2VcbiAgICovXG4gIGlzVmFsaWRLZXkoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgbmV3IEtleVBhaXIoeyBwcnY6IGtleSB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgYWNjb3VudCBoYXZlIHRoZSBjb3JyZWN0IGZvcm1hdFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWNjb3VudElkIC0gc3RyaW5nIHRvIGJlIGNoZWNrZWRcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gaWYgdGhlIHN0cmluZyBjYW4gaGF2ZSB0aGUgY29ycmVjdCBmb3JtYXQgYW5kIG1hdGNoIHRoZSBleHBlY3RlZCBsZW5ndGhcbiAgICogb3IgY2FuIGNyZWF0ZSBhIG5ldyBrZXlQYWlyXG4gICAqL1xuICBpc1ZhbGlkQWNjb3VudElkKGFjY291bnRJZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIHRoaXMgcmVnZXggaXMgZnJvbSBuZWFyIGRvYywgaHR0cHM6Ly9kb2NzLm5lYXIub3JnL2RvY3MvY29uY2VwdHMvYWNjb3VudFxuICAgICAgKC9eKChbYS16XFxkXStbXFwtX10pKlthLXpcXGRdK1xcLikqKFthLXpcXGRdK1tcXC1fXSkqW2EtelxcZF0rJC8udGVzdChhY2NvdW50SWQpICYmXG4gICAgICAgIGFjY291bnRJZC5sZW5ndGggPiAyICYmXG4gICAgICAgIGFjY291bnRJZC5sZW5ndGggPCA2NCkgfHxcbiAgICAgICAgbmV3IEtleVBhaXIoeyBwdWI6IGFjY291bnRJZCB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBpc1ZhbGlkU2lnbmF0dXJlKHNpZ25hdHVyZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGlzQmFzZTU4KHNpZ25hdHVyZSwgNjQpO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIGlzVmFsaWRUcmFuc2FjdGlvbklkKHR4SWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpc0Jhc2U1OCh0eElkLCAzMik7XG4gIH1cblxuICBiYXNlNThFbmNvZGUodmFsdWU6IFVpbnQ4QXJyYXkpOiBzdHJpbmcge1xuICAgIHJldHVybiBiczU4LmVuY29kZSh2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYmFzZTU4IGRlY29kZWQgc3RyaW5nIGlzIGVxdWFsIHRvIGxlbmd0aFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBzdHJpbmcgdG8gYmUgY2hlY2tlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIC0gZXhwZWN0ZWQgZGVjb2RlZCBsZW5ndGhcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gaWYgdGhlIHN0cmluZyBjYW4gZGVjb2RlZCBhcyBiYXNlNTggYW5kIG1hdGNoIHRoZSBleHBlY3RlZCBsZW5ndGhcbiAgICovXG4gIGlzQmFzZTU4KHZhbHVlOiBzdHJpbmcsIGxlbmd0aDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAhIXZhbHVlICYmIGJzNTguZGVjb2RlKHZhbHVlKS5sZW5ndGggPT09IGxlbmd0aDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHV0aWxzID0gbmV3IFV0aWxzKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0aWxzO1xuIl19