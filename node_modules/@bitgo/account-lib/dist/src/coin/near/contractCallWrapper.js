"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractCallWrapper = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var errors_1 = require("../baseCoin/errors");
/**
 * Contains parameters to call a Near Function Call action
 */
var ContractCallWrapper = /** @class */ (function () {
    function ContractCallWrapper() {
    }
    Object.defineProperty(ContractCallWrapper.prototype, "methodName", {
        /** Get method contract name */
        get: function () {
            return this._methodName;
        },
        /** Set method contract name */
        set: function (methodName) {
            this._methodName = methodName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContractCallWrapper.prototype, "gas", {
        /** Get gas, expresed on yocto*/
        get: function () {
            return this._gas;
        },
        /** Set gas, expresed on yocto */
        set: function (gas) {
            if (!this.isValidAmount(new bignumber_js_1.default(gas))) {
                throw new errors_1.InvalidParameterValueError('Invalid gas value');
            }
            this._gas = gas;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContractCallWrapper.prototype, "deposit", {
        /** Get deposit, expresed on yocto */
        get: function () {
            return this._deposit;
        },
        /** Set deposit, expresed on yocto */
        set: function (deposit) {
            if (!this.isValidAmount(new bignumber_js_1.default(deposit))) {
                throw new errors_1.InvalidParameterValueError('Invalid deposit value');
            }
            this._deposit = deposit;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContractCallWrapper.prototype, "args", {
        /** Set args, which are the parameters of a method */
        get: function () {
            return this._args;
        },
        /** Get args, which are the parameters of a method */
        set: function (args) {
            this._args = args;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Get all parameters of the contractCallWrapper
     * @returns {FunctionCall}
     */
    ContractCallWrapper.prototype.getParams = function () {
        return {
            methodName: this._methodName,
            args: this._args,
            gas: this._gas,
            deposit: this._deposit,
        };
    };
    ContractCallWrapper.prototype.isValidAmount = function (value) {
        return !value.isLessThan(0);
    };
    return ContractCallWrapper;
}());
exports.ContractCallWrapper = ContractCallWrapper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RDYWxsV3JhcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2luL25lYXIvY29udHJhY3RDYWxsV3JhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw4REFBcUM7QUFDckMsNkNBQWdFO0FBR2hFOztHQUVHO0FBQ0g7SUFBQTtJQW9FQSxDQUFDO0lBN0RDLHNCQUFXLDJDQUFVO1FBSXJCLCtCQUErQjthQUMvQjtZQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUMxQixDQUFDO1FBUkQsK0JBQStCO2FBQy9CLFVBQXNCLFVBQWtCO1lBQ3RDLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO1FBQ2hDLENBQUM7OztPQUFBO0lBUUQsc0JBQVcsb0NBQUc7UUFPZCxnQ0FBZ0M7YUFDaEM7WUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDbkIsQ0FBQztRQVhELGlDQUFpQzthQUNqQyxVQUFlLEdBQVc7WUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxzQkFBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQzNDLE1BQU0sSUFBSSxtQ0FBMEIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2FBQzNEO1lBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDbEIsQ0FBQzs7O09BQUE7SUFRRCxzQkFBVyx3Q0FBTztRQU9sQixxQ0FBcUM7YUFDckM7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkIsQ0FBQztRQVhELHFDQUFxQzthQUNyQyxVQUFtQixPQUFlO1lBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksc0JBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFO2dCQUMvQyxNQUFNLElBQUksbUNBQTBCLENBQUMsdUJBQXVCLENBQUMsQ0FBQzthQUMvRDtZQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQzFCLENBQUM7OztPQUFBO0lBUUQsc0JBQVcscUNBQUk7UUFJZixxREFBcUQ7YUFDckQ7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQztRQVJELHFEQUFxRDthQUNyRCxVQUFnQixJQUE2QjtZQUMzQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNwQixDQUFDOzs7T0FBQTtJQU9EOzs7T0FHRztJQUNILHVDQUFTLEdBQVQ7UUFDRSxPQUFPO1lBQ0wsVUFBVSxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzVCLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSztZQUNoQixHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZCxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVE7U0FDdkIsQ0FBQztJQUNKLENBQUM7SUFFTywyQ0FBYSxHQUFyQixVQUFzQixLQUFnQjtRQUNwQyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBQ0gsMEJBQUM7QUFBRCxDQUFDLEFBcEVELElBb0VDO0FBcEVZLGtEQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCaWdOdW1iZXIgZnJvbSAnYmlnbnVtYmVyLmpzJztcbmltcG9ydCB7IEludmFsaWRQYXJhbWV0ZXJWYWx1ZUVycm9yIH0gZnJvbSAnLi4vYmFzZUNvaW4vZXJyb3JzJztcbmltcG9ydCB7IEZ1bmN0aW9uQ2FsbCB9IGZyb20gJy4vaWZhY2UnO1xuXG4vKipcbiAqIENvbnRhaW5zIHBhcmFtZXRlcnMgdG8gY2FsbCBhIE5lYXIgRnVuY3Rpb24gQ2FsbCBhY3Rpb25cbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRyYWN0Q2FsbFdyYXBwZXIge1xuICBwcml2YXRlIF9tZXRob2ROYW1lOiBzdHJpbmc7XG4gIHByaXZhdGUgX2FyZ3M6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICBwcml2YXRlIF9nYXM6IHN0cmluZztcbiAgcHJpdmF0ZSBfZGVwb3NpdDogc3RyaW5nO1xuXG4gIC8qKiBTZXQgbWV0aG9kIGNvbnRyYWN0IG5hbWUgKi9cbiAgcHVibGljIHNldCBtZXRob2ROYW1lKG1ldGhvZE5hbWU6IHN0cmluZykge1xuICAgIHRoaXMuX21ldGhvZE5hbWUgPSBtZXRob2ROYW1lO1xuICB9XG5cbiAgLyoqIEdldCBtZXRob2QgY29udHJhY3QgbmFtZSAqL1xuICBwdWJsaWMgZ2V0IG1ldGhvZE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbWV0aG9kTmFtZTtcbiAgfVxuXG4gIC8qKiBTZXQgZ2FzLCBleHByZXNlZCBvbiB5b2N0byAqL1xuICBwdWJsaWMgc2V0IGdhcyhnYXM6IHN0cmluZykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkQW1vdW50KG5ldyBCaWdOdW1iZXIoZ2FzKSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFcnJvcignSW52YWxpZCBnYXMgdmFsdWUnKTtcbiAgICB9XG4gICAgdGhpcy5fZ2FzID0gZ2FzO1xuICB9XG5cbiAgLyoqIEdldCBnYXMsIGV4cHJlc2VkIG9uIHlvY3RvKi9cbiAgcHVibGljIGdldCBnYXMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZ2FzO1xuICB9XG5cbiAgLyoqIFNldCBkZXBvc2l0LCBleHByZXNlZCBvbiB5b2N0byAqL1xuICBwdWJsaWMgc2V0IGRlcG9zaXQoZGVwb3NpdDogc3RyaW5nKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWRBbW91bnQobmV3IEJpZ051bWJlcihkZXBvc2l0KSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFcnJvcignSW52YWxpZCBkZXBvc2l0IHZhbHVlJyk7XG4gICAgfVxuICAgIHRoaXMuX2RlcG9zaXQgPSBkZXBvc2l0O1xuICB9XG5cbiAgLyoqIEdldCBkZXBvc2l0LCBleHByZXNlZCBvbiB5b2N0byAqL1xuICBwdWJsaWMgZ2V0IGRlcG9zaXQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZGVwb3NpdDtcbiAgfVxuXG4gIC8qKiBHZXQgYXJncywgd2hpY2ggYXJlIHRoZSBwYXJhbWV0ZXJzIG9mIGEgbWV0aG9kICovXG4gIHB1YmxpYyBzZXQgYXJncyhhcmdzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikge1xuICAgIHRoaXMuX2FyZ3MgPSBhcmdzO1xuICB9XG5cbiAgLyoqIFNldCBhcmdzLCB3aGljaCBhcmUgdGhlIHBhcmFtZXRlcnMgb2YgYSBtZXRob2QgKi9cbiAgcHVibGljIGdldCBhcmdzKCk6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHtcbiAgICByZXR1cm4gdGhpcy5fYXJncztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHBhcmFtZXRlcnMgb2YgdGhlIGNvbnRyYWN0Q2FsbFdyYXBwZXJcbiAgICogQHJldHVybnMge0Z1bmN0aW9uQ2FsbH1cbiAgICovXG4gIGdldFBhcmFtcygpOiBGdW5jdGlvbkNhbGwge1xuICAgIHJldHVybiB7XG4gICAgICBtZXRob2ROYW1lOiB0aGlzLl9tZXRob2ROYW1lLFxuICAgICAgYXJnczogdGhpcy5fYXJncyxcbiAgICAgIGdhczogdGhpcy5fZ2FzLFxuICAgICAgZGVwb3NpdDogdGhpcy5fZGVwb3NpdCxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBpc1ZhbGlkQW1vdW50KHZhbHVlOiBCaWdOdW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXZhbHVlLmlzTGVzc1RoYW4oMCk7XG4gIH1cbn1cbiJdfQ==