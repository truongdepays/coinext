"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var transaction_1 = require("./transaction");
var nearAPI = __importStar(require("near-api-js"));
var errors_2 = require("./errors");
var utils_1 = __importDefault(require("./utils"));
var assert_1 = __importDefault(require("assert"));
var keyPair_1 = require("./keyPair");
var hex = __importStar(require("@stablelib/hex"));
var TransactionBuilder = /** @class */ (function (_super) {
    __extends(TransactionBuilder, _super);
    function TransactionBuilder(_coinConfig) {
        var _this = _super.call(this, _coinConfig) || this;
        _this._signatures = []; // only support single sig for now
        _this._transaction = new transaction_1.Transaction(_coinConfig);
        return _this;
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    TransactionBuilder.prototype.initBuilder = function (tx) {
        this._transaction = tx;
        var nearTransaction = tx.nearTransaction;
        this._sender = nearTransaction.signerId;
        this._nonce = nearTransaction.nonce;
        this._receiverId = nearTransaction.receiverId;
        this._publicKey = hex.encode(nearTransaction.publicKey.data);
        this._recentBlockHash = nearAPI.utils.serialize.base_encode(nearTransaction.blockHash);
        this._actions = nearTransaction.actions;
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.fromImplementation = function (rawTransaction) {
        this.validateRawTransaction(rawTransaction);
        this.buildImplementation();
        return this.transaction;
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.buildImplementation = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                this.transaction.nearTransaction = this.buildNearTransaction();
                if (this._signer) {
                    this.transaction.sign(this._signer);
                }
                if (((_a = this._signatures) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                    this.transaction.constructSignedPayload(this._signatures[0].signature);
                }
                this.transaction.loadInputsAndOutputs();
                return [2 /*return*/, this.transaction];
            });
        });
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.signImplementation = function (key) {
        this._signer = new keyPair_1.KeyPair({ prv: key.key });
        return this._transaction;
    };
    Object.defineProperty(TransactionBuilder.prototype, "transaction", {
        // region Getters and Setters
        /** @inheritdoc */
        get: function () {
            return this._transaction;
        },
        /** @inheritdoc */
        set: function (transaction) {
            this._transaction = transaction;
        },
        enumerable: false,
        configurable: true
    });
    // endregion
    // region Validators
    /** @inheritdoc */
    TransactionBuilder.prototype.validateAddress = function (address, addressFormat) {
        if (!utils_1.default.isValidAddress(address.address)) {
            throw new errors_2.AddressValidationError(address.address);
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateKey = function (key) {
        try {
            new keyPair_1.KeyPair({ prv: key.key });
        }
        catch (_a) {
            throw new errors_1.BuildTransactionError("Key validation failed");
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateRawTransaction = function (rawTransaction) {
        try {
            nearAPI.utils.serialize.deserialize(nearAPI.transactions.SCHEMA, nearAPI.transactions.SignedTransaction, rawTransaction);
        }
        catch (_a) {
            try {
                nearAPI.utils.serialize.deserialize(nearAPI.transactions.SCHEMA, nearAPI.transactions.Transaction, rawTransaction);
            }
            catch (_b) {
                throw new errors_1.BuildTransactionError('invalid raw transaction');
            }
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateTransaction = function (transaction) {
        if (!transaction.nearTransaction) {
            return;
        }
        this.validateAddress({ address: transaction.nearTransaction.signerId });
        this.validateAddress({ address: transaction.nearTransaction.receiverId });
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateValue = function (value) {
        if (value.isLessThan(0)) {
            throw new errors_1.BuildTransactionError('Value cannot be less than zero');
        }
    };
    // endregion
    /**
     * Sets the public key and the address of the sender of this transaction.
     *
     * @param {string} address the account that is sending this transaction
     * @param {string} pubKey the public key that is sending this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.sender = function (address, pubKey) {
        if (!address || !utils_1.default.isValidAddress(address.toString())) {
            throw new errors_1.BuildTransactionError('Invalid or missing address, got: ' + address);
        }
        if (!pubKey || !utils_1.default.isValidPublicKey(pubKey)) {
            throw new errors_1.BuildTransactionError('Invalid or missing pubKey, got: ' + pubKey);
        }
        this._sender = address;
        this._publicKey = pubKey;
        return this;
    };
    /**
     * Sets the account Id of the receiver of this transaction.
     *
     * @param {string} accountId the account id of the account that is receiving this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.receiverId = function (accountId) {
        utils_1.default.isValidAddress(accountId);
        this._receiverId = accountId;
        return this;
    };
    /**
     * Set the nonce
     *
     * @param {number} nonce - number that can be only used once
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.nonce = function (nonce) {
        if (nonce < 0) {
            throw new errors_1.BuildTransactionError("Invalid nonce: " + nonce);
        }
        this._nonce = nonce;
        return this;
    };
    /**
     * Sets the blockHash of this transaction.
     *
     * @param {string} blockHash the blockHash of this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.recentBlockHash = function (blockHash) {
        if (!utils_1.default.isValidBlockId(blockHash)) {
            throw new errors_1.BuildTransactionError("Invalid blockHash " + blockHash);
        }
        this._recentBlockHash = blockHash;
        return this;
    };
    /**
     * Sets the list of actions of this transaction.
     *
     * @param {nearAPI.transactions.Action[]} value the the list of actions
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.actions = function (value) {
        this._actions = value;
        return this;
    };
    /**
     * Builds the NEAR transaction.
     *
     * @return {Transaction} near sdk transaction
     */
    TransactionBuilder.prototype.buildNearTransaction = function () {
        assert_1.default(this._sender, new errors_1.BuildTransactionError('sender is required before building'));
        assert_1.default(this._recentBlockHash, new errors_1.BuildTransactionError('recent blockhash is required before building'));
        var tx = nearAPI.transactions.createTransaction(this._sender, nearAPI.utils.PublicKey.fromString(nearAPI.utils.serialize.base_encode(hex.decode(this._publicKey))), this._receiverId, this._nonce, this._actions, nearAPI.utils.serialize.base_decode(this._recentBlockHash));
        return tx;
    };
    /** @inheritDoc */
    TransactionBuilder.prototype.addSignature = function (publicKey, signature) {
        this._signatures.push({ publicKey: publicKey, signature: signature });
    };
    return TransactionBuilder;
}(baseCoin_1.BaseTransactionBuilder));
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,