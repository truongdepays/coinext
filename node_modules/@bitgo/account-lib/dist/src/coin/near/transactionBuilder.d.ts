/// <reference types="node" />
import BigNumber from 'bignumber.js';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseTransactionBuilder } from '../baseCoin';
import { BaseAddress, BaseKey, PublicKey as BasePublicKey } from '../baseCoin/iface';
import { Transaction } from './transaction';
import * as nearAPI from 'near-api-js';
export declare abstract class TransactionBuilder extends BaseTransactionBuilder {
    private _transaction;
    private _sender;
    private _publicKey;
    private _receiverId;
    private _nonce;
    private _recentBlockHash;
    private _signer;
    private _signatures;
    protected _actions: nearAPI.transactions.Action[];
    constructor(_coinConfig: Readonly<CoinConfig>);
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    initBuilder(tx: Transaction): void;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): Transaction;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    /** @inheritdoc */
    protected signImplementation(key: BaseKey): Transaction;
    /** @inheritdoc */
    protected get transaction(): Transaction;
    /** @inheritdoc */
    protected set transaction(transaction: Transaction);
    /** @inheritdoc */
    validateAddress(address: BaseAddress, addressFormat?: string): void;
    /** @inheritdoc */
    validateKey(key: BaseKey): void;
    /** @inheritdoc */
    validateRawTransaction(rawTransaction: any): void;
    /** @inheritdoc */
    validateTransaction(transaction: Transaction): void;
    /** @inheritdoc */
    validateValue(value: BigNumber): void;
    /**
     * Sets the public key and the address of the sender of this transaction.
     *
     * @param {string} address the account that is sending this transaction
     * @param {string} pubKey the public key that is sending this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    sender(address: string, pubKey: string): this;
    /**
     * Sets the account Id of the receiver of this transaction.
     *
     * @param {string} accountId the account id of the account that is receiving this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    receiverId(accountId: string): this;
    /**
     * Set the nonce
     *
     * @param {number} nonce - number that can be only used once
     * @returns {TransactionBuilder} This transaction builder
     */
    nonce(nonce: number): this;
    /**
     * Sets the blockHash of this transaction.
     *
     * @param {string} blockHash the blockHash of this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    recentBlockHash(blockHash: string): this;
    /**
     * Sets the list of actions of this transaction.
     *
     * @param {nearAPI.transactions.Action[]} value the the list of actions
     * @returns {TransactionBuilder} This transaction builder
     */
    protected actions(value: nearAPI.transactions.Action[]): this;
    /**
     * Builds the NEAR transaction.
     *
     * @return {Transaction} near sdk transaction
     */
    protected buildNearTransaction(): nearAPI.transactions.Transaction;
    /** @inheritDoc */
    addSignature(publicKey: BasePublicKey, signature: Buffer): void;
}
//# sourceMappingURL=transactionBuilder.d.ts.map