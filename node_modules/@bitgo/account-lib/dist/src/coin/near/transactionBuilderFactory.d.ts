import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { BaseTransactionBuilderFactory } from '../baseCoin';
import { TransferBuilder } from './transferBuilder';
import { WalletInitializationBuilder } from './walletInitializationBuilder';
import { TransactionBuilder } from './transactionBuilder';
import { Transaction } from './transaction';
import { StakingActivateBuilder } from './stakingActivateBuilder';
import { StakingDeactivateBuilder } from './stakingDeactivateBuilder';
import { StakingWithdrawBuilder } from './stakingWithdrawBuilder';
export declare class TransactionBuilderFactory extends BaseTransactionBuilderFactory {
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    from(raw: string): TransactionBuilder;
    /** @inheritdoc */
    getWalletInitializationBuilder(tx?: Transaction): WalletInitializationBuilder;
    /** @inheritdoc */
    getTransferBuilder(tx?: Transaction): TransferBuilder;
    getStakingActivateBuilder(tx?: Transaction): StakingActivateBuilder;
    getStakingDeactivateBuilder(tx?: Transaction): StakingDeactivateBuilder;
    getStakingWithdrawBuilder(tx?: Transaction): StakingWithdrawBuilder;
    /**
     * Initialize the builder with the given transaction
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @param {TransactionBuilder} builder - the builder to be initialized
     * @returns {TransactionBuilder} the builder initialized
     */
    private static initializeBuilder;
}
//# sourceMappingURL=transactionBuilderFactory.d.ts.map