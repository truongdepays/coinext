"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyPair = void 0;
var crypto_1 = require("crypto");
var bip32 = __importStar(require("bip32"));
var blake2b_1 = __importDefault(require("@bitgo/blake2b"));
var bitcoinjs_lib_1 = require("bitcoinjs-lib");
var CryptoUtils = __importStar(require("../../utils/crypto"));
var iface_1 = require("../baseCoin/iface");
var secp256k1ExtendedKeyPair_1 = require("../baseCoin/secp256k1ExtendedKeyPair");
var Utils = __importStar(require("./utils"));
var DEFAULT_SEED_SIZE_BYTES = 16;
/**
 * Tezos keys and address management.
 */
var KeyPair = /** @class */ (function (_super) {
    __extends(KeyPair, _super);
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param {KeyPairOptions} source Either a master seed, a private key (extended or raw), or a public key
     *     (extended, compressed, or uncompressed)
     */
    function KeyPair(source) {
        var _this = _super.call(this, source) || this;
        if (!source) {
            var seed = crypto_1.randomBytes(DEFAULT_SEED_SIZE_BYTES);
            _this.hdNode = bip32.fromSeed(seed);
        }
        else if (iface_1.isSeed(source)) {
            _this.hdNode = bip32.fromSeed(source.seed);
        }
        else if (iface_1.isPrivateKey(source)) {
            _this.recordKeysFromPrivateKey(source.prv);
        }
        else if (iface_1.isPublicKey(source)) {
            _this.recordKeysFromPublicKey(source.pub);
        }
        else {
            throw new Error('Invalid key pair options');
        }
        if (_this.hdNode) {
            _this.keyPair = secp256k1ExtendedKeyPair_1.Secp256k1ExtendedKeyPair.toKeyPair(_this.hdNode);
        }
        return _this;
    }
    /**
     * Build a Hierarchical Deterministic node or an ECPair from a private key.
     * Specific Tezos implementation
     *
     * @param {string} prv An extended or raw private key
     */
    KeyPair.prototype.recordKeysFromPrivateKey = function (prv) {
        if (CryptoUtils.isValidXprv(prv)) {
            this.hdNode = bip32.fromBase58(prv);
        }
        else if (CryptoUtils.isValidPrv(prv)) {
            // Cannot create the HD node without the chain code, so create a regular Key Chain
            this.keyPair = bitcoinjs_lib_1.ECPair.fromPrivateKey(Buffer.from(prv, 'hex'));
        }
        else if (Utils.isValidKey(prv, Utils.hashTypes.spsk)) {
            this.keyPair = bitcoinjs_lib_1.ECPair.fromPrivateKey(Utils.decodeKey(prv, Utils.hashTypes.spsk));
        }
        else {
            throw new Error('Unsupported private key');
        }
    };
    /**
     * Build a Hierarchical Deterministic node or an ECPair from a public key.
     * Specific Tezos implementation
     *
     * @param {string} pub - An extended, compressed, or uncompressed public key
     */
    KeyPair.prototype.recordKeysFromPublicKey = function (pub) {
        if (CryptoUtils.isValidXpub(pub)) {
            this.hdNode = bip32.fromBase58(pub);
        }
        else if (CryptoUtils.isValidPub(pub)) {
            // Cannot create an HD node without the chain code, so create a regular Key Chain
            this.keyPair = bitcoinjs_lib_1.ECPair.fromPublicKey(Buffer.from(pub, 'hex'));
        }
        else if (Utils.isValidKey(pub, Utils.hashTypes.sppk)) {
            this.keyPair = bitcoinjs_lib_1.ECPair.fromPublicKey(Utils.decodeKey(pub, Utils.hashTypes.sppk));
        }
        else {
            throw new Error('Unsupported public key: ' + pub);
        }
    };
    /**
     * Return Tezos default keys with the respective prefixes
     *
     * @returns {DefaultKeys} The keys in the protocol default key format
     */
    KeyPair.prototype.getKeys = function () {
        // Always use the compressed version to be consistent
        var result = {
            pub: Utils.base58encode(Utils.hashTypes.sppk.prefix, this.getPublicKey({ compressed: true })),
        };
        var prvBuffer = this.getPrivateKey();
        if (prvBuffer) {
            result.prv = Utils.base58encode(Utils.hashTypes.spsk.prefix, prvBuffer);
        }
        return result;
    };
    /**
     * Get a public address.
     *
     * @returns {string} The public address
     */
    KeyPair.prototype.getAddress = function () {
        var pub = this.getPublicKey({ compressed: true });
        var out = Buffer.alloc(20);
        var b2b = blake2b_1.default(out.length).update(pub).digest(out);
        return Utils.base58encode(Utils.hashTypes.tz2.prefix, b2b);
    };
    return KeyPair;
}(secp256k1ExtendedKeyPair_1.Secp256k1ExtendedKeyPair));
exports.KeyPair = KeyPair;
//# sourceMappingURL=data:application/json;base64,