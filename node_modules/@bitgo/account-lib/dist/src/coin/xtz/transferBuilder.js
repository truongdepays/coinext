"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferBuilder = void 0;
var errors_1 = require("../baseCoin/errors");
/** Tezos transfer builder. */
// TODO: implement BaseTransferBuilder
var TransferBuilder = /** @class */ (function () {
    function TransferBuilder() {
    }
    TransferBuilder.prototype.amount = function (amount) {
        this._amount = amount;
        return this;
    };
    TransferBuilder.prototype.coin = function (coin) {
        this._coin = coin;
        return this;
    };
    TransferBuilder.prototype.from = function (address) {
        this._fromAddress = address;
        return this;
    };
    TransferBuilder.prototype.to = function (address) {
        this._toAddress = address;
        return this;
    };
    TransferBuilder.prototype.fee = function (fee) {
        this._fee = fee;
        return this;
    };
    TransferBuilder.prototype.gasLimit = function (gasLimit) {
        this._gasLimit = gasLimit;
        return this;
    };
    TransferBuilder.prototype.storageLimit = function (storageLimit) {
        this._storageLimit = storageLimit;
        return this;
    };
    TransferBuilder.prototype.dataToSign = function (dataToSign) {
        this._dataToSign = dataToSign;
        return this;
    };
    TransferBuilder.prototype.counter = function (counter) {
        this._counter = counter;
        return this;
    };
    TransferBuilder.prototype.build = function () {
        if (!this._amount || !this._fromAddress || !this._toAddress || !this._fee) {
            throw new errors_1.BuildTransactionError('Missing transfer mandatory fields. Amount, from address, destination (to) address and fee are mandatory');
        }
        return {
            amount: this._amount,
            coin: this._coin,
            from: this._fromAddress,
            to: this._toAddress,
            fee: {
                fee: this._fee,
                gasLimit: this._gasLimit,
                storageLimit: this._storageLimit,
            },
            dataToSign: this._dataToSign,
            counter: this._counter,
        };
    };
    return TransferBuilder;
}());
exports.TransferBuilder = TransferBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXJCdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvaW4veHR6L3RyYW5zZmVyQnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBMkQ7QUFHM0QsOEJBQThCO0FBQzlCLHNDQUFzQztBQUN0QztJQUFBO0lBNEVBLENBQUM7SUFqRUMsZ0NBQU0sR0FBTixVQUFPLE1BQWM7UUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsOEJBQUksR0FBSixVQUFLLElBQVk7UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCw4QkFBSSxHQUFKLFVBQUssT0FBZTtRQUNsQixJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCw0QkFBRSxHQUFGLFVBQUcsT0FBZTtRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQztRQUMxQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCw2QkFBRyxHQUFILFVBQUksR0FBVztRQUNiLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGtDQUFRLEdBQVIsVUFBUyxRQUFnQjtRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxzQ0FBWSxHQUFaLFVBQWEsWUFBb0I7UUFDL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUM7UUFDbEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsb0NBQVUsR0FBVixVQUFXLFVBQWtCO1FBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO1FBQzlCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGlDQUFPLEdBQVAsVUFBUSxPQUFlO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELCtCQUFLLEdBQUw7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUN6RSxNQUFNLElBQUksOEJBQXFCLENBQzdCLHlHQUF5RyxDQUMxRyxDQUFDO1NBQ0g7UUFDRCxPQUFPO1lBQ0wsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3BCLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSztZQUNoQixJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVk7WUFDdkIsRUFBRSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQ25CLEdBQUcsRUFBRTtnQkFDSCxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2QsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTO2dCQUN4QixZQUFZLEVBQUUsSUFBSSxDQUFDLGFBQWE7YUFDakM7WUFDRCxVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDNUIsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3ZCLENBQUM7SUFDSixDQUFDO0lBQ0gsc0JBQUM7QUFBRCxDQUFDLEFBNUVELElBNEVDO0FBNUVZLDBDQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVpbGRUcmFuc2FjdGlvbkVycm9yIH0gZnJvbSAnLi4vYmFzZUNvaW4vZXJyb3JzJztcbmltcG9ydCB7IFRyYW5zZmVyRGF0YSB9IGZyb20gJy4vaWZhY2UnO1xuXG4vKiogVGV6b3MgdHJhbnNmZXIgYnVpbGRlci4gKi9cbi8vIFRPRE86IGltcGxlbWVudCBCYXNlVHJhbnNmZXJCdWlsZGVyXG5leHBvcnQgY2xhc3MgVHJhbnNmZXJCdWlsZGVyIHtcbiAgcHJpdmF0ZSBfYW1vdW50OiBzdHJpbmc7XG4gIHByaXZhdGUgX2NvaW46IHN0cmluZztcbiAgcHJpdmF0ZSBfdG9BZGRyZXNzOiBzdHJpbmc7XG4gIHByaXZhdGUgX2Zyb21BZGRyZXNzOiBzdHJpbmc7XG4gIHByaXZhdGUgX2ZlZTogc3RyaW5nO1xuICBwcml2YXRlIF9nYXNMaW1pdDogc3RyaW5nO1xuICBwcml2YXRlIF9zdG9yYWdlTGltaXQ6IHN0cmluZztcbiAgcHJpdmF0ZSBfZGF0YVRvU2lnbjogc3RyaW5nO1xuICBwcml2YXRlIF9jb3VudGVyOiBzdHJpbmc7XG5cbiAgYW1vdW50KGFtb3VudDogc3RyaW5nKTogVHJhbnNmZXJCdWlsZGVyIHtcbiAgICB0aGlzLl9hbW91bnQgPSBhbW91bnQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb2luKGNvaW46IHN0cmluZyk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgdGhpcy5fY29pbiA9IGNvaW47XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmcm9tKGFkZHJlc3M6IHN0cmluZyk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgdGhpcy5fZnJvbUFkZHJlc3MgPSBhZGRyZXNzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdG8oYWRkcmVzczogc3RyaW5nKTogVHJhbnNmZXJCdWlsZGVyIHtcbiAgICB0aGlzLl90b0FkZHJlc3MgPSBhZGRyZXNzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZmVlKGZlZTogc3RyaW5nKTogVHJhbnNmZXJCdWlsZGVyIHtcbiAgICB0aGlzLl9mZWUgPSBmZWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnYXNMaW1pdChnYXNMaW1pdDogc3RyaW5nKTogVHJhbnNmZXJCdWlsZGVyIHtcbiAgICB0aGlzLl9nYXNMaW1pdCA9IGdhc0xpbWl0O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc3RvcmFnZUxpbWl0KHN0b3JhZ2VMaW1pdDogc3RyaW5nKTogVHJhbnNmZXJCdWlsZGVyIHtcbiAgICB0aGlzLl9zdG9yYWdlTGltaXQgPSBzdG9yYWdlTGltaXQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBkYXRhVG9TaWduKGRhdGFUb1NpZ246IHN0cmluZyk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgdGhpcy5fZGF0YVRvU2lnbiA9IGRhdGFUb1NpZ247XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb3VudGVyKGNvdW50ZXI6IHN0cmluZyk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgdGhpcy5fY291bnRlciA9IGNvdW50ZXI7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBidWlsZCgpOiBUcmFuc2ZlckRhdGEge1xuICAgIGlmICghdGhpcy5fYW1vdW50IHx8ICF0aGlzLl9mcm9tQWRkcmVzcyB8fCAhdGhpcy5fdG9BZGRyZXNzIHx8ICF0aGlzLl9mZWUpIHtcbiAgICAgIHRocm93IG5ldyBCdWlsZFRyYW5zYWN0aW9uRXJyb3IoXG4gICAgICAgICdNaXNzaW5nIHRyYW5zZmVyIG1hbmRhdG9yeSBmaWVsZHMuIEFtb3VudCwgZnJvbSBhZGRyZXNzLCBkZXN0aW5hdGlvbiAodG8pIGFkZHJlc3MgYW5kIGZlZSBhcmUgbWFuZGF0b3J5JyxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBhbW91bnQ6IHRoaXMuX2Ftb3VudCxcbiAgICAgIGNvaW46IHRoaXMuX2NvaW4sXG4gICAgICBmcm9tOiB0aGlzLl9mcm9tQWRkcmVzcyxcbiAgICAgIHRvOiB0aGlzLl90b0FkZHJlc3MsXG4gICAgICBmZWU6IHtcbiAgICAgICAgZmVlOiB0aGlzLl9mZWUsXG4gICAgICAgIGdhc0xpbWl0OiB0aGlzLl9nYXNMaW1pdCxcbiAgICAgICAgc3RvcmFnZUxpbWl0OiB0aGlzLl9zdG9yYWdlTGltaXQsXG4gICAgICB9LFxuICAgICAgZGF0YVRvU2lnbjogdGhpcy5fZGF0YVRvU2lnbixcbiAgICAgIGNvdW50ZXI6IHRoaXMuX2NvdW50ZXIsXG4gICAgfTtcbiAgfVxufVxuIl19