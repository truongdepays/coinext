import { DefaultKeys, KeyPairOptions } from '../baseCoin/iface';
import { Secp256k1ExtendedKeyPair } from '../baseCoin/secp256k1ExtendedKeyPair';
/**
 * Tezos keys and address management.
 */
export declare class KeyPair extends Secp256k1ExtendedKeyPair {
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param {KeyPairOptions} source Either a master seed, a private key (extended or raw), or a public key
     *     (extended, compressed, or uncompressed)
     */
    constructor(source?: KeyPairOptions);
    /**
     * Build a Hierarchical Deterministic node or an ECPair from a private key.
     * Specific Tezos implementation
     *
     * @param {string} prv An extended or raw private key
     */
    recordKeysFromPrivateKey(prv: string): void;
    /**
     * Build a Hierarchical Deterministic node or an ECPair from a public key.
     * Specific Tezos implementation
     *
     * @param {string} pub - An extended, compressed, or uncompressed public key
     */
    recordKeysFromPublicKey(pub: string): void;
    /**
     * Return Tezos default keys with the respective prefixes
     *
     * @returns {DefaultKeys} The keys in the protocol default key format
     */
    getKeys(): DefaultKeys;
    /**
     * Get a public address.
     *
     * @returns {string} The public address
     */
    getAddress(): string;
}
//# sourceMappingURL=keyPair.d.ts.map