import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { ClarityValue, PostCondition, PostConditionMode } from '@stacks/transactions';
import { Transaction } from './transaction';
import { TransactionBuilder } from './transactionBuilder';
export declare abstract class AbstractContractBuilder extends TransactionBuilder {
    private _options;
    protected _contractAddress: string;
    protected _contractName: string;
    protected _functionName: string;
    protected _postConditionMode?: PostConditionMode;
    protected _postConditions?: PostCondition[];
    protected _functionArgs: ClarityValue[];
    constructor(_coinConfig: Readonly<CoinConfig>);
    initBuilder(tx: Transaction): void;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
    private buildContractCallOptions;
}
//# sourceMappingURL=abstractContractBuilder.d.ts.map