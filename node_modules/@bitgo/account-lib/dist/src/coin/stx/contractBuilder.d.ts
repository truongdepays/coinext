import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { ClarityValue } from '@stacks/transactions';
import { Transaction } from './transaction';
import { ClarityValueJson } from './iface';
import { AbstractContractBuilder } from './abstractContractBuilder';
export declare class ContractBuilder extends AbstractContractBuilder {
    constructor(_coinConfig: Readonly<CoinConfig>);
    initBuilder(tx: Transaction): void;
    /**
     * Set the contract address
     *
     * @param {string} address the address deployed the contract
     * @returns {ContractBuilder} the builder with the new parameter set
     */
    contractAddress(address: string): this;
    /**
     * Set the contract name
     *
     * @param {string} name name of contract
     * @returns {ContractBuilder} the builder with the new parameter set
     */
    contractName(name: string): this;
    /**
     * Set the function name in contract
     *
     * @param {string} name name of function
     * @returns {ContractBuilder} the builder with the new parameter set
     */
    functionName(name: string): this;
    functionArgs(args: ClarityValueJson[] | ClarityValue[]): this;
    private parseCv;
}
//# sourceMappingURL=contractBuilder.d.ts.map