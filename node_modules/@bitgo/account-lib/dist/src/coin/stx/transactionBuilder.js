"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var bn_js_1 = __importDefault(require("bn.js"));
var statics_1 = require("@bitgo/statics");
var transactions_1 = require("@stacks/transactions");
var network_1 = require("@stacks/network");
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var crypto_1 = require("../../utils/crypto");
var transaction_1 = require("./transaction");
var keyPair_1 = require("./keyPair");
var utils_1 = require("./utils");
var constants_1 = require("./constants");
var TransactionBuilder = /** @class */ (function (_super) {
    __extends(TransactionBuilder, _super);
    function TransactionBuilder(_coinConfig) {
        var _this = _super.call(this, _coinConfig) || this;
        _this.getSignature = function (_, index) {
            return _this._signatures.find(function (s) { return s.index === index; });
        };
        _this.getPrivateKey = function (pubKey, _) {
            return _this._multiSignerKeyPairs.find(function (kp) { return kp.getKeys(true).pub === pubKey || kp.getKeys().pub === pubKey; });
        };
        _this._anchorMode = constants_1.ANCHOR_MODE;
        _this._multiSignerKeyPairs = [];
        _this._fromPubKeys = [];
        _this._signatures = [];
        _this._numberSignatures = constants_1.DEFAULT_MULTISIG_SIG_NUMBER;
        _this._network = _coinConfig.network.type === statics_1.NetworkType.MAINNET ? new network_1.StacksMainnet() : new network_1.StacksTestnet();
        _this._transaction = new transaction_1.Transaction(_coinConfig);
        return _this;
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    TransactionBuilder.prototype.initBuilder = function (tx) {
        var _this = this;
        this.transaction = tx;
        // check if it is signed or unsigned tx
        if (tx.stxTransaction.auth.spendingCondition === undefined) {
            throw new errors_1.InvalidTransactionError('spending condition cannot be undefined');
        }
        var txData = tx.toJson();
        this.fee({ fee: txData.fee.toString() });
        this.nonce(txData.nonce);
        var sigHash = tx.stxTransaction.verifyBegin();
        var authType = tx.stxTransaction.auth.authType ? tx.stxTransaction.auth.authType : transactions_1.AuthType.Standard;
        if (transactions_1.isSingleSig(tx.stxTransaction.auth.spendingCondition)) {
            this._numberSignatures = 1;
            if (tx.stxTransaction.auth.spendingCondition.signature.data !== transactions_1.emptyMessageSignature().data) {
                var signature = tx.stxTransaction.auth.spendingCondition.signature;
                sigHash = transactions_1.makeSigHashPreSign(sigHash, authType, new bn_js_1.default(this._fee.fee), new bn_js_1.default(this._nonce));
                this._signatures.push(__assign(__assign({}, signature), { index: 0, sigHash: sigHash }));
                this._fromPubKeys = [transactions_1.publicKeyFromSignature(sigHash, signature)];
            }
        }
        else {
            this._numberSignatures = tx.stxTransaction.auth.spendingCondition.signaturesRequired;
            tx.stxTransaction.auth.spendingCondition.fields.forEach(function (field, index) {
                if (field.contents.type === transactions_1.StacksMessageType.MessageSignature) {
                    var signature = field.contents;
                    var nextVerify = transactions_1.nextVerification(sigHash, authType, new bn_js_1.default(_this._fee.fee), new bn_js_1.default(_this._nonce), transactions_1.PubKeyEncoding.Compressed, // useless param as Compressed is hardcoded in stacks lib
                    signature);
                    sigHash = nextVerify.nextSigHash;
                    _this._signatures.push(__assign(__assign({}, signature), { index: index, sigHash: sigHash }));
                    _this._fromPubKeys.push(nextVerify.pubKey.data.toString('hex'));
                }
                else {
                    _this._fromPubKeys.push(field.contents.data.toString('hex'));
                }
            });
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.fromImplementation = function (rawTransaction) {
        var tx = new transaction_1.Transaction(this._coinConfig);
        this.validateRawTransaction(rawTransaction);
        var stackstransaction = transactions_1.deserializeTransaction(transactions_1.BufferReader.fromBuffer(Buffer.from(utils_1.removeHexPrefix(rawTransaction), 'hex')));
        tx.stxTransaction = stackstransaction;
        this.initBuilder(tx);
        return this.transaction;
    };
    // region Base Builder
    /** @inheritdoc */
    TransactionBuilder.prototype.buildImplementation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var isMultiSig, index, pubKey, signature, prvKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        isMultiSig = this._fromPubKeys.length > 1;
                        this._transaction.stxTransaction.setFee(new bn_js_1.default(this._fee.fee));
                        this._transaction.stxTransaction.setNonce(new bn_js_1.default(this._nonce));
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < this._fromPubKeys.length)) return [3 /*break*/, 8];
                        pubKey = this._fromPubKeys[index];
                        signature = this.getSignature(pubKey, index);
                        if (!signature) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.transaction.signWithSignatures(signature, isMultiSig)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 3:
                        prvKey = this.getPrivateKey(pubKey, index);
                        if (!prvKey) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.transaction.sign(prvKey)];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 5:
                        if (!isMultiSig) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.transaction.appendOrigin(pubKey)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        index++;
                        return [3 /*break*/, 1];
                    case 8:
                        this._transaction.loadInputsAndOutputs();
                        return [2 /*return*/, this._transaction];
                }
            });
        });
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.signImplementation = function (key) {
        this.checkDuplicatedKeys(key);
        var prv = key.key;
        if (prv.startsWith('xprv')) {
            var rawPrv = crypto_1.xprvToRawPrv(prv);
            prv = new keyPair_1.KeyPair({ prv: rawPrv }).getKeys(true).prv;
        }
        var signer = new keyPair_1.KeyPair({ prv: prv });
        // Signing the transaction is an operation that relies on all the data being set,
        // so we set the source here and leave the actual signing for the build step
        this._multiSignerKeyPairs.push(signer);
        var publicKey = signer.getKeys(signer.getCompressed()).pub;
        if (!this._fromPubKeys.includes(publicKey)) {
            this._fromPubKeys.push(publicKey);
        }
        return this.transaction;
    };
    Object.defineProperty(TransactionBuilder.prototype, "transaction", {
        /** @inheritdoc */
        get: function () {
            return this._transaction;
        },
        /** @inheritdoc */
        set: function (transaction) {
            this._transaction = transaction;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Validates that the given key is not already in this._multiSignerKeyPairs
     *
     * @param {BaseKey} key - The key to check
     */
    TransactionBuilder.prototype.checkDuplicatedKeys = function (key) {
        this._multiSignerKeyPairs.forEach(function (_sourceKeyPair) {
            if (_sourceKeyPair.getKeys().prv === key.key) {
                throw new errors_1.SigningError('Repeated sign: ' + key.key);
            }
        });
    };
    /**
     * Set the transaction fees
     *
     * @param {BaseFee} fee The maximum gas to pay
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.fee = function (fee) {
        this.validateValue(new bignumber_js_1.default(fee.fee));
        this._fee = fee;
        return this;
    };
    TransactionBuilder.prototype.nonce = function (n) {
        this._nonce = n;
        return this;
    };
    TransactionBuilder.prototype.fromPubKey = function (senderPubKey) {
        var _this = this;
        var pubKeys = senderPubKey instanceof Array ? senderPubKey : [senderPubKey];
        this._fromPubKeys = [];
        pubKeys.forEach(function (key) {
            if (utils_1.isValidPublicKey(key)) {
                _this._fromPubKeys.push(key);
            }
            else {
                throw new errors_1.InvalidParameterValueError('Invalid public key');
            }
        });
        return this;
    };
    /**
     *  Set the memo
     *
     * @param {string} memo
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.memo = function (memo) {
        if (!utils_1.isValidMemo(memo)) {
            throw new errors_1.BuildTransactionError('Memo is too long');
        }
        this._memo = memo;
        return this;
    };
    /**
     *  Set the number of signatures for multi-sig
     *
     * @param {number} numSigns
     * @returns {TransactionBuilder} This transaction builder
     */
    TransactionBuilder.prototype.numberSignatures = function (numSigns) {
        this.validateValue(new bignumber_js_1.default(numSigns));
        this._numberSignatures = numSigns;
        return this;
    };
    // region Validators
    /** @inheritdoc */
    TransactionBuilder.prototype.validateAddress = function (address, addressFormat) {
        if (!utils_1.isValidAddress(address.address)) {
            throw new errors_1.BuildTransactionError('Invalid address ' + address.address);
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateKey = function (key) {
        var keyPair = new keyPair_1.KeyPair({ prv: key.key });
        if (!keyPair.getKeys().prv) {
            throw new errors_1.BuildTransactionError('Invalid key');
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateRawTransaction = function (rawTransaction) {
        if (!rawTransaction) {
            throw new errors_1.InvalidTransactionError('Raw transaction is empty');
        }
        try {
            transactions_1.deserializeTransaction(transactions_1.BufferReader.fromBuffer(Buffer.from(utils_1.removeHexPrefix(rawTransaction), 'hex')));
        }
        catch (e) {
            throw new errors_1.ParseTransactionError('There was an error parsing the raw transaction');
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateTransaction = function (transaction) {
        this.validateFee();
        this.validateNonce();
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateValue = function (value) {
        if (value.isLessThan(0)) {
            throw new errors_1.BuildTransactionError('Value cannot be less than zero');
        }
    };
    /**
     * Validates that the fee field is defined
     */
    TransactionBuilder.prototype.validateFee = function () {
        if (this._fee === undefined) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing fee');
        }
        try {
            this.validateValue(new bignumber_js_1.default(this._fee.fee));
        }
        catch (e) {
            throw new errors_1.BuildTransactionError('Invalid fee');
        }
    };
    /**
     * Validates that nonce is defined
     */
    TransactionBuilder.prototype.validateNonce = function () {
        if (this._nonce === undefined) {
            throw new errors_1.BuildTransactionError('Invalid transaction: missing nonce');
        }
        try {
            this.validateValue(new bignumber_js_1.default(this._nonce));
        }
        catch (e) {
            throw new errors_1.BuildTransactionError("Invalid nonce " + this._nonce);
        }
    };
    return TransactionBuilder;
}(baseCoin_1.BaseTransactionBuilder));
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,