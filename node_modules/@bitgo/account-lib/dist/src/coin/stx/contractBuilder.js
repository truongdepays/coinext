"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractBuilder = void 0;
var transactions_1 = require("@stacks/transactions");
var errors_1 = require("../baseCoin/errors");
var utils_1 = require("./utils");
var _1 = require(".");
var constants_1 = require("./constants");
var abstractContractBuilder_1 = require("./abstractContractBuilder");
var ContractBuilder = /** @class */ (function (_super) {
    __extends(ContractBuilder, _super);
    function ContractBuilder(_coinConfig) {
        return _super.call(this, _coinConfig) || this;
    }
    ContractBuilder.prototype.initBuilder = function (tx) {
        _super.prototype.initBuilder.call(this, tx);
        // Retro compatibility, checks parameters.
        this.contractAddress(this._contractAddress);
        this.contractName(this._contractName);
        this.functionName(this._functionName);
        this.functionArgs(this._functionArgs);
    };
    // region Contract fields
    /**
     * Set the contract address
     *
     * @param {string} address the address deployed the contract
     * @returns {ContractBuilder} the builder with the new parameter set
     */
    ContractBuilder.prototype.contractAddress = function (address) {
        if (!utils_1.isValidAddress(address)) {
            throw new errors_1.InvalidParameterValueError('Invalid address');
        }
        if (!_1.Utils.isValidContractAddress(address, this._coinConfig.network)) {
            throw new errors_1.InvalidParameterValueError('Invalid contract address');
        }
        this._contractAddress = address;
        return this;
    };
    /**
     * Set the contract name
     *
     * @param {string} name name of contract
     * @returns {ContractBuilder} the builder with the new parameter set
     */
    ContractBuilder.prototype.contractName = function (name) {
        if (name.length === 0) {
            throw new errors_1.InvalidParameterValueError('Invalid name');
        }
        if (name !== constants_1.CONTRACT_NAME_STAKING && name !== constants_1.CONTRACT_NAME_SENDMANY) {
            throw new errors_1.InvalidParameterValueError('Only pox and send-many-memo contracts supported');
        }
        this._contractName = name;
        return this;
    };
    /**
     * Set the function name in contract
     *
     * @param {string} name name of function
     * @returns {ContractBuilder} the builder with the new parameter set
     */
    ContractBuilder.prototype.functionName = function (name) {
        if (name.length === 0) {
            throw new errors_1.InvalidParameterValueError('Invalid name');
        }
        if (!_1.Utils.isValidContractFunctionName(name)) {
            throw new errors_1.InvalidParameterValueError(name + " is not supported contract function name");
        }
        this._functionName = name;
        return this;
    };
    ContractBuilder.prototype.functionArgs = function (args) {
        var _this = this;
        this._functionArgs = args.map(function (arg) {
            if (!transactions_1.ClarityType[arg.type]) {
                return _this.parseCv(arg);
            }
            else {
                // got direct clarity value after deserialization in fromImplementation
                return arg;
            }
        });
        return this;
    };
    ContractBuilder.prototype.parseCv = function (arg) {
        var _this = this;
        switch (arg.type) {
            case 'optional':
                if (arg.val === undefined) {
                    return transactions_1.noneCV();
                }
                else {
                    return transactions_1.someCV(this.parseCv(arg.val));
                }
            case 'tuple':
                if (arg.val instanceof Array) {
                    var data_1 = {};
                    arg.val.forEach(function (a) {
                        data_1[a.key] = _this.parseCv({ type: a.type, val: a.val });
                    });
                    return transactions_1.tupleCV(data_1);
                }
                throw new errors_1.InvalidParameterValueError('tuple require Array val');
            case 'buffer':
                if (arg.val instanceof Buffer) {
                    return transactions_1.bufferCV(arg.val);
                }
                var nval = Number(arg.val);
                if (nval) {
                    return transactions_1.bufferCV(Buffer.of(nval));
                }
                return transactions_1.bufferCVFromString(arg.val);
            default:
                return transactions_1.encodeClarityValue(arg.type, arg.val);
        }
    };
    return ContractBuilder;
}(abstractContractBuilder_1.AbstractContractBuilder));
exports.ContractBuilder = ContractBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RCdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvaW4vc3R4L2NvbnRyYWN0QnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxxREFVOEI7QUFDOUIsNkNBQWdFO0FBRWhFLGlDQUF5QztBQUV6QyxzQkFBMEI7QUFDMUIseUNBQTRFO0FBQzVFLHFFQUFvRTtBQUVwRTtJQUFxQyxtQ0FBdUI7SUFDMUQseUJBQVksV0FBaUM7ZUFDM0Msa0JBQU0sV0FBVyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxxQ0FBVyxHQUFYLFVBQVksRUFBZTtRQUN6QixpQkFBTSxXQUFXLFlBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEIsMENBQTBDO1FBQzFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELHlCQUF5QjtJQUN6Qjs7Ozs7T0FLRztJQUNILHlDQUFlLEdBQWYsVUFBZ0IsT0FBZTtRQUM3QixJQUFJLENBQUMsc0JBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUM1QixNQUFNLElBQUksbUNBQTBCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUN6RDtRQUNELElBQUksQ0FBQyxRQUFLLENBQUMsc0JBQXNCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBNkIsQ0FBQyxFQUFFO1lBQzFGLE1BQU0sSUFBSSxtQ0FBMEIsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1NBQ2xFO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixH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QUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztpQkFDbEM7Z0JBQ0QsT0FBTyxpQ0FBa0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckM7Z0JBQ0UsT0FBTyxpQ0FBa0IsQ0FBQyxHQUFHLENBQUMsSUFBc0IsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbEU7SUFDSCxDQUFDO0lBQ0gsc0JBQUM7QUFBRCxDQUFDLEFBNUdELENBQXFDLGlEQUF1QixHQTRHM0Q7QUE1R1ksMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQ29pbiBhcyBDb2luQ29uZmlnLCBTdGFja3NOZXR3b3JrIGFzIEJpdGdvU3RhY2tzTmV0d29yayB9IGZyb20gJ0BiaXRnby9zdGF0aWNzJztcbmltcG9ydCB7XG4gIGJ1ZmZlckNWLFxuICBidWZmZXJDVkZyb21TdHJpbmcsXG4gIENsYXJpdHlBYmlUeXBlLFxuICBDbGFyaXR5VHlwZSxcbiAgQ2xhcml0eVZhbHVlLFxuICBlbmNvZGVDbGFyaXR5VmFsdWUsXG4gIG5vbmVDVixcbiAgc29tZUNWLFxuICB0dXBsZUNWLFxufSBmcm9tICdAc3RhY2tzL3RyYW5zYWN0aW9ucyc7XG5pbXBvcnQgeyBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFcnJvciB9IGZyb20gJy4uL2Jhc2VDb2luL2Vycm9ycyc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJy4vdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgaXNWYWxpZEFkZHJlc3MgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IENsYXJpdHlWYWx1ZUpzb24gfSBmcm9tICcuL2lmYWNlJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBDT05UUkFDVF9OQU1FX1NFTkRNQU5ZLCBDT05UUkFDVF9OQU1FX1NUQUtJTkcgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyYWN0QnVpbGRlciB9IGZyb20gJy4vYWJzdHJhY3RDb250cmFjdEJ1aWxkZXInO1xuXG5leHBvcnQgY2xhc3MgQ29udHJhY3RCdWlsZGVyIGV4dGVuZHMgQWJzdHJhY3RDb250cmFjdEJ1aWxkZXIge1xuICBjb25zdHJ1Y3RvcihfY29pbkNvbmZpZzogUmVhZG9ubHk8Q29pbkNvbmZpZz4pIHtcbiAgICBzdXBlcihfY29pbkNvbmZpZyk7XG4gIH1cblxuICBpbml0QnVpbGRlcih0eDogVHJhbnNhY3Rpb24pOiB2b2lkIHtcbiAgICBzdXBlci5pbml0QnVpbGRlcih0eCk7XG4gICAgLy8gUmV0cm8gY29tcGF0aWJpbGl0eSwgY2hlY2tzIHBhcmFtZXRlcnMuXG4gICAgdGhpcy5jb250cmFjdEFkZHJlc3ModGhpcy5fY29udHJhY3RBZGRyZXNzKTtcbiAgICB0aGlzLmNvbnRyYWN0TmFtZSh0aGlzLl9jb250cmFjdE5hbWUpO1xuICAgIHRoaXMuZnVuY3Rpb25OYW1lKHRoaXMuX2Z1bmN0aW9uTmFtZSk7XG4gICAgdGhpcy5mdW5jdGlvbkFyZ3ModGhpcy5fZnVuY3Rpb25BcmdzKTtcbiAgfVxuXG4gIC8vIHJlZ2lvbiBDb250cmFjdCBmaWVsZHNcbiAgLyoqXG4gICAqIFNldCB0aGUgY29udHJhY3QgYWRkcmVzc1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzcyB0aGUgYWRkcmVzcyBkZXBsb3llZCB0aGUgY29udHJhY3RcbiAgICogQHJldHVybnMge0NvbnRyYWN0QnVpbGRlcn0gdGhlIGJ1aWxkZXIgd2l0aCB0aGUgbmV3IHBhcmFtZXRlciBzZXRcbiAgICovXG4gIGNvbnRyYWN0QWRkcmVzcyhhZGRyZXNzOiBzdHJpbmcpOiB0aGlzIHtcbiAgICBpZiAoIWlzVmFsaWRBZGRyZXNzKGFkZHJlc3MpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZFBhcmFtZXRlclZhbHVlRXJyb3IoJ0ludmFsaWQgYWRkcmVzcycpO1xuICAgIH1cbiAgICBpZiAoIVV0aWxzLmlzVmFsaWRDb250cmFjdEFkZHJlc3MoYWRkcmVzcywgdGhpcy5fY29pbkNvbmZpZy5uZXR3b3JrIGFzIEJpdGdvU3RhY2tzTmV0d29yaykpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFcnJvcignSW52YWxpZCBjb250cmFjdCBhZGRyZXNzJyk7XG4gICAgfVxuICAgIHRoaXMuX2NvbnRyYWN0QWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBjb250cmFjdCBuYW1lXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgY29udHJhY3RcbiAgICogQHJldHVybnMge0NvbnRyYWN0QnVpbGRlcn0gdGhlIGJ1aWxkZXIgd2l0aCB0aGUgbmV3IHBhcmFtZXRlciBzZXRcbiAgICovXG4gIGNvbnRyYWN0TmFtZShuYW1lOiBzdHJpbmcpOiB0aGlzIHtcbiAgICBpZiAobmFtZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFcnJvcignSW52YWxpZCBuYW1lJyk7XG4gICAgfVxuICAgIGlmIChuYW1lICE9PSBDT05UUkFDVF9OQU1FX1NUQUtJTkcgJiYgbmFtZSAhPT0gQ09OVFJBQ1RfTkFNRV9TRU5ETUFOWSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRQYXJhbWV0ZXJWYWx1ZUVycm9yKCdPbmx5IHBveCBhbmQgc2VuZC1tYW55LW1lbW8gY29udHJhY3RzIHN1cHBvcnRlZCcpO1xuICAgIH1cbiAgICB0aGlzLl9jb250cmFjdE5hbWUgPSBuYW1lO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZnVuY3Rpb24gbmFtZSBpbiBjb250cmFjdFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIGZ1bmN0aW9uXG4gICAqIEByZXR1cm5zIHtDb250cmFjdEJ1aWxkZXJ9IHRoZSBidWlsZGVyIHdpdGggdGhlIG5ldyBwYXJhbWV0ZXIgc2V0XG4gICAqL1xuICBmdW5jdGlvbk5hbWUobmFtZTogc3RyaW5nKTogdGhpcyB7XG4gICAgaWYgKG5hbWUubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZFBhcmFtZXRlclZhbHVlRXJyb3IoJ0ludmFsaWQgbmFtZScpO1xuICAgIH1cbiAgICBpZiAoIVV0aWxzLmlzVmFsaWRDb250cmFjdEZ1bmN0aW9uTmFtZShuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRQYXJhbWV0ZXJWYWx1ZUVycm9yKGAke25hbWV9IGlzIG5vdCBzdXBwb3J0ZWQgY29udHJhY3QgZnVuY3Rpb24gbmFtZWApO1xuICAgIH1cbiAgICB0aGlzLl9mdW5jdGlvbk5hbWUgPSBuYW1lO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb25BcmdzKGFyZ3M6IENsYXJpdHlWYWx1ZUpzb25bXSB8IENsYXJpdHlWYWx1ZVtdKTogdGhpcyB7XG4gICAgdGhpcy5fZnVuY3Rpb25BcmdzID0gYXJncy5tYXAoKGFyZykgPT4ge1xuICAgICAgaWYgKCFDbGFyaXR5VHlwZVthcmcudHlwZV0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VDdihhcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZ290IGRpcmVjdCBjbGFyaXR5IHZhbHVlIGFmdGVyIGRlc2VyaWFsaXphdGlvbiBpbiBmcm9tSW1wbGVtZW50YXRpb25cbiAgICAgICAgcmV0dXJuIGFyZztcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VDdihhcmc6IENsYXJpdHlWYWx1ZUpzb24pOiBDbGFyaXR5VmFsdWUge1xuICAgIHN3aXRjaCAoYXJnLnR5cGUpIHtcbiAgICAgIGNhc2UgJ29wdGlvbmFsJzpcbiAgICAgICAgaWYgKGFyZy52YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBub25lQ1YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc29tZUNWKHRoaXMucGFyc2VDdihhcmcudmFsKSk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ3R1cGxlJzpcbiAgICAgICAgaWYgKGFyZy52YWwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICAgICAgICBhcmcudmFsLmZvckVhY2goKGEpID0+IHtcbiAgICAgICAgICAgIGRhdGFbYS5rZXldID0gdGhpcy5wYXJzZUN2KHsgdHlwZTogYS50eXBlLCB2YWw6IGEudmFsIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0dXBsZUNWKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFcnJvcigndHVwbGUgcmVxdWlyZSBBcnJheSB2YWwnKTtcbiAgICAgIGNhc2UgJ2J1ZmZlcic6XG4gICAgICAgIGlmIChhcmcudmFsIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIGJ1ZmZlckNWKGFyZy52YWwpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG52YWwgPSBOdW1iZXIoYXJnLnZhbCk7XG4gICAgICAgIGlmIChudmFsKSB7XG4gICAgICAgICAgcmV0dXJuIGJ1ZmZlckNWKEJ1ZmZlci5vZihudmFsKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZmZlckNWRnJvbVN0cmluZyhhcmcudmFsKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBlbmNvZGVDbGFyaXR5VmFsdWUoYXJnLnR5cGUgYXMgQ2xhcml0eUFiaVR5cGUsIGFyZy52YWwpO1xuICAgIH1cbiAgfVxufVxuIl19