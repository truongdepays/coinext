"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendmanyBuilder = void 0;
var statics_1 = require("@bitgo/statics");
var bn_js_1 = __importDefault(require("bn.js"));
var transactions_1 = require("@stacks/transactions");
var errors_1 = require("../baseCoin/errors");
var utils_1 = require("./utils");
var constants_1 = require("./constants");
var abstractContractBuilder_1 = require("./abstractContractBuilder");
var SendmanyBuilder = /** @class */ (function (_super) {
    __extends(SendmanyBuilder, _super);
    function SendmanyBuilder(_coinConfig) {
        var _this = _super.call(this, _coinConfig) || this;
        _this._sendParams = [];
        _this.sendParamsToFunctionArgs = function (sendParams) { return [
            transactions_1.listCV(sendParams.map(function (recipient) {
                return transactions_1.tupleCV({
                    to: transactions_1.standardPrincipalCV(recipient.address),
                    ustx: transactions_1.uintCV(recipient.amount),
                    memo: transactions_1.bufferCVFromString(recipient.memo || ''),
                });
            })),
        ]; };
        return _this;
    }
    SendmanyBuilder.isValidContractCall = function (coinConfig, payload) {
        return (coinConfig.network.sendmanymemoContractAddress ===
            transactions_1.addressToString(payload.contractAddress) &&
            constants_1.CONTRACT_NAME_SENDMANY === payload.contractName.content &&
            constants_1.FUNCTION_NAME_SENDMANY === payload.functionName.content);
    };
    SendmanyBuilder.prototype.sendParamsToPostcondition = function (sendParams) {
        var sum = sendParams.reduce(function (current, next) { return current.add(new bn_js_1.default(next.amount)); }, new bn_js_1.default(0));
        return [
            transactions_1.makeStandardSTXPostCondition(utils_1.getSTXAddressFromPubKeys(this._fromPubKeys, this._coinConfig.network.type === statics_1.NetworkType.MAINNET
                ? transactions_1.AddressVersion.MainnetMultiSig
                : transactions_1.AddressVersion.TestnetMultiSig, this._fromPubKeys.length > 1 ? transactions_1.AddressHashMode.SerializeP2SH : transactions_1.AddressHashMode.SerializeP2PKH, this._numberSignatures).address, transactions_1.FungibleConditionCode.Equal, sum),
        ];
    };
    SendmanyBuilder.prototype.initBuilder = function (tx) {
        _super.prototype.initBuilder.call(this, tx);
        this._sendParams = utils_1.functionArgsToSendParams(tx.stxTransaction.payload.functionArgs);
    };
    /**
     *  Set a transfer
     *
     * @param {SendParams} sendParams - the sender address
     * @returns {TransactionBuilder} This transaction builder
     */
    SendmanyBuilder.prototype.send = function (_a) {
        var address = _a.address, amount = _a.amount, memo = _a.memo;
        if (!address || !utils_1.isValidAddress(address)) {
            throw new errors_1.BuildTransactionError('Invalid or missing address, got: ' + address);
        }
        if (!amount || !utils_1.isValidAmount(amount)) {
            throw new errors_1.BuildTransactionError('Invalid or missing amount, got: ' + amount);
        }
        if (!!memo && !utils_1.isValidMemo(memo)) {
            throw new errors_1.BuildTransactionError('Invalid memo, got: ' + memo);
        }
        this._sendParams.push({ address: address, amount: amount, memo: memo });
        return this;
    };
    /** @inheritdoc */
    SendmanyBuilder.prototype.buildImplementation = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._contractAddress = this._coinConfig.network.sendmanymemoContractAddress;
                        this._contractName = constants_1.CONTRACT_NAME_SENDMANY;
                        this._functionName = constants_1.FUNCTION_NAME_SENDMANY;
                        this._functionArgs = this.sendParamsToFunctionArgs(this._sendParams);
                        this._postConditionMode = transactions_1.PostConditionMode.Deny;
                        this._postConditions = this.sendParamsToPostcondition(this._sendParams);
                        return [4 /*yield*/, _super.prototype.buildImplementation.call(this)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return SendmanyBuilder;
}(abstractContractBuilder_1.AbstractContractBuilder));
exports.SendmanyBuilder = SendmanyBuilder;
//# sourceMappingURL=data:application/json;base64,