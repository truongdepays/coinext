"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferBuilder = void 0;
var bn_js_1 = __importDefault(require("bn.js"));
var transactions_1 = require("@stacks/transactions");
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var transactionBuilder_1 = require("./transactionBuilder");
var utils_1 = require("./utils");
var TransferBuilder = /** @class */ (function (_super) {
    __extends(TransferBuilder, _super);
    function TransferBuilder(_coinConfig) {
        return _super.call(this, _coinConfig) || this;
    }
    TransferBuilder.prototype.initBuilder = function (tx) {
        var txData = tx.toJson();
        if (txData.payload === undefined) {
            throw new errors_1.InvalidTransactionError('payload must not be undefined');
        }
        if (txData.payload.payloadType === transactions_1.PayloadType.TokenTransfer) {
            this.to(txData.payload.to);
            this.amount(txData.payload.amount);
            if (txData.payload.memo) {
                this.memo(txData.payload.memo);
            }
            _super.prototype.initBuilder.call(this, tx);
        }
        else {
            throw new errors_1.BuildTransactionError('Transaction should be transfer');
        }
    };
    /** @inheritdoc */
    TransferBuilder.prototype.buildImplementation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this._options = this.buildTokenTransferOptions();
                        this.transaction.setTransactionType(baseCoin_1.TransactionType.Send);
                        _a = this.transaction;
                        return [4 /*yield*/, transactions_1.makeUnsignedSTXTokenTransfer(this._options)];
                    case 1:
                        _a.stxTransaction = _b.sent();
                        return [4 /*yield*/, _super.prototype.buildImplementation.call(this)];
                    case 2: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    TransferBuilder.prototype.buildTokenTransferOptions = function () {
        var defaultOpts = {
            recipient: this._toAddress,
            amount: this._amount,
            memo: this._memo,
            anchorMode: this._anchorMode,
            network: this._network,
            fee: new bn_js_1.default(this._fee.fee),
            nonce: new bn_js_1.default(this._nonce),
        };
        if (this._fromPubKeys.length > 0) {
            if (this._fromPubKeys.length === 1) {
                return __assign(__assign({}, defaultOpts), { publicKey: this._fromPubKeys[0] });
            }
            else {
                return __assign(__assign({}, defaultOpts), { publicKeys: this._fromPubKeys, numSignatures: this._numberSignatures });
            }
        }
        else {
            throw new errors_1.InvalidParameterValueError('supply at least 1 public key');
        }
    };
    // region Transfer fields
    /**
     * Set the destination address where the funds will be sent,
     * it may take the format `'<shard>.<realm>.<account>'` or `'<account>'`
     *
     * @param {string} address the address to transfer funds to
     * @returns {TransferBuilder} the builder with the new parameter set
     */
    TransferBuilder.prototype.to = function (address) {
        if (!utils_1.isValidAddress(address)) {
            throw new errors_1.InvalidParameterValueError('Invalid address');
        }
        this._toAddress = address;
        return this;
    };
    /**
     * Set the amount to be transferred
     *
     * @param {string} amount amount to transfer in tinyBars (there are 100,000,000 tinyBars in one Hbar)
     * @returns {TransferBuilder} the builder with the new parameter set
     */
    TransferBuilder.prototype.amount = function (amount) {
        if (!utils_1.isValidAmount(amount)) {
            throw new errors_1.InvalidParameterValueError('Invalid amount');
        }
        this._amount = new bn_js_1.default(amount);
        return this;
    };
    return TransferBuilder;
}(transactionBuilder_1.TransactionBuilder));
exports.TransferBuilder = TransferBuilder;
//# sourceMappingURL=data:application/json;base64,