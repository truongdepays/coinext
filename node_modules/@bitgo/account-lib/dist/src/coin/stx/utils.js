"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSameBaseAddress = exports.getBaseAddress = exports.xpubToSTXPubkey = exports.getAddressVersion = exports.functionArgsToSendParams = exports.stringifyCv = exports.isValidAddressWithPaymentId = exports.normalizeAddress = exports.getAddressDetails = exports.verifySignature = exports.signMessage = exports.getSTXAddressFromPubKeys = exports.unpadMemo = exports.isValidContractFunctionName = exports.isValidContractAddress = exports.isValidMemo = exports.isValidRawTransaction = exports.isValidPrivateKey = exports.isValidPublicKey = exports.isValidTransactionId = exports.isValidAddress = exports.isValidAmount = exports.getTxSenderAddress = exports.removeHexPrefix = exports.bufferToHexPrefixString = void 0;
var querystring = __importStar(require("querystring"));
var url = __importStar(require("url"));
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var ethereumjs_utils_old_1 = require("ethereumjs-utils-old");
var transactions_1 = require("@stacks/transactions");
var elliptic_1 = require("elliptic");
var _ = __importStar(require("lodash"));
var crypto_1 = require("../../utils/crypto");
var errors_1 = require("../baseCoin/errors");
var _1 = require(".");
var constants_1 = require("./constants");
/**
 * Encodes a buffer as a "0x" prefixed lower-case hex string.
 *
 * @param {Buffer} buff - a buffer with a hexadecimal string
 * @returns {string} - the hexadecimal string prefixed with "0x"
 */
function bufferToHexPrefixString(buff) {
    return ethereumjs_utils_old_1.bufferToHex(buff);
}
exports.bufferToHexPrefixString = bufferToHexPrefixString;
/**
 * Remove the "0x" prefix from the given string, if present.
 *
 * @param {string} hex - a hexadecimal string
 * @returns {string} - the hexadecimal string without a leading "0x"
 */
function removeHexPrefix(hex) {
    return ethereumjs_utils_old_1.stripHexPrefix(hex);
}
exports.removeHexPrefix = removeHexPrefix;
/**
 * Get stacks address from public key hash
 *
 * @param {Buffer} publicKeyHash - hash of public key
 * @param {AddressHashMode} hashMode - hash mode
 * @param {TransactionVersion} transactionVersion - tx version
 * @returns {string} stacks address
 */
function getAddressFromPublicKeyHash(publicKeyHash, hashMode, transactionVersion) {
    if (publicKeyHash.length !== 20) {
        throw new Error('expected 20-byte pubkeyhash');
    }
    var addrVer = transactions_1.addressHashModeToVersion(hashMode, transactionVersion);
    var addr = transactions_1.addressFromVersionHash(addrVer, publicKeyHash.toString('hex'));
    var addrString = transactions_1.addressToString(addr);
    return addrString;
}
/**
 * @param tx
 */
function getTxSenderAddress(tx) {
    if (tx.auth.spendingCondition !== null && tx.auth.spendingCondition !== undefined) {
        var spendingCondition = tx.auth.spendingCondition;
        var txSender = getAddressFromPublicKeyHash(Buffer.from(spendingCondition.signer, 'hex'), spendingCondition.hashMode, tx.version);
        return txSender;
    }
    else
        throw new Error('spendingCondition should not be null');
}
exports.getTxSenderAddress = getTxSenderAddress;
/**
 * Returns whether or not the string is a valid amount number
 *
 * @param {string} amount - the string to validate
 * @returns {boolean} - the validation result
 */
function isValidAmount(amount) {
    var bigNumberAmount = new bignumber_js_1.default(amount);
    return bigNumberAmount.isInteger() && bigNumberAmount.isGreaterThanOrEqualTo(0);
}
exports.isValidAmount = isValidAmount;
/**
 * Returns whether or not the string is a valid protocol address
 *
 * @param {string} address - the address to be validated
 * @returns {boolean} - the validation result
 */
function isValidAddress(address) {
    return transactions_1.validateStacksAddress(address);
}
exports.isValidAddress = isValidAddress;
/**
 * Returns whether or not the string is a valid protocol transaction id or not.
 *
 * A valid transaction id is a SHA-512/256 hash of a serialized transaction; see
 * the txidFromData function in @stacks/transaction:
 * https://github.com/blockstack/stacks.js/blob/master/packages/transactions/src/utils.ts#L97
 *
 * @param {string} txId - the transaction id to be validated
 * @returns {boolean} - the validation result
 */
function isValidTransactionId(txId) {
    if (txId.length !== 64 && txId.length !== 66)
        return false;
    var noPrefix = removeHexPrefix(txId);
    if (noPrefix.length !== 64)
        return false;
    return allHexChars(noPrefix);
}
exports.isValidTransactionId = isValidTransactionId;
/**
 * Returns whether or not the string is a valid protocol public key or
 * extended public key.
 *
 * The key format is documented at
 * https://github.com/stacksgov/sips/blob/main/sips/sip-005/sip-005-blocks-and-transactions.md#transaction-authorization
 *
 * @param {string} pub - the  public key to be validated
 * @returns {boolean} - the validation result
 */
function isValidPublicKey(pub) {
    if (crypto_1.isValidXpub(pub))
        return true;
    if (pub.length !== 66 && pub.length !== 130)
        return false;
    var firstByte = pub.slice(0, 2);
    // uncompressed public key
    if (pub.length === 130 && firstByte !== '04')
        return false;
    // compressed public key
    if (pub.length === 66 && firstByte !== '02' && firstByte !== '03')
        return false;
    if (!allHexChars(pub))
        return false;
    // validate the public key
    var secp256k1 = new elliptic_1.ec('secp256k1');
    try {
        var keyPair = secp256k1.keyFromPublic(Buffer.from(pub, 'hex'));
        var result = keyPair.validate().result;
        return result;
    }
    catch (e) {
        return false;
    }
}
exports.isValidPublicKey = isValidPublicKey;
/**
 * Returns whether or not the string is a valid protocol private key, or extended
 * private key.
 *
 * The protocol key format is described in the @stacks/transactions npm package, in the
 * createStacksPrivateKey function:
 * https://github.com/blockstack/stacks.js/blob/master/packages/transactions/src/keys.ts#L125
 *
 * @param {string} prv - the private key (or extended private key) to be validated
 * @returns {boolean} - the validation result
 */
function isValidPrivateKey(prv) {
    if (crypto_1.isValidXprv(prv))
        return true;
    if (prv.length !== 64 && prv.length !== 66)
        return false;
    if (prv.length === 66 && prv.slice(64) !== '01')
        return false;
    return allHexChars(prv);
}
exports.isValidPrivateKey = isValidPrivateKey;
/**
 * Returns whether or not the string is a composed of hex chars only
 *
 * @param {string} maybe - the  string to be validated
 * @returns {boolean} - the validation result
 */
function allHexChars(maybe) {
    return /^([0-9a-f])+$/i.test(maybe);
}
/**
 * Checks if raw transaction can be deserialized
 *
 * @param {unknown} rawTransaction - transaction in raw hex format
 * @returns {boolean} - the validation result
 */
function isValidRawTransaction(rawTransaction) {
    try {
        if (typeof rawTransaction === 'string') {
            transactions_1.deserializeTransaction(transactions_1.BufferReader.fromBuffer(Buffer.from(removeHexPrefix(rawTransaction), 'hex')));
        }
        else {
            return false;
        }
    }
    catch (e) {
        return false;
    }
    return true;
}
exports.isValidRawTransaction = isValidRawTransaction;
/**
 * Returns whether or not the memo string is valid
 *
 * @param {string} memo - the string to be validated
 * @returns {boolean} - the validation result
 */
function isValidMemo(memo) {
    try {
        transactions_1.createMemoString(memo);
    }
    catch (e) {
        return false;
    }
    return true;
}
exports.isValidMemo = isValidMemo;
/**
 * Checks for valid contract address
 *
 * @param {string} addr - contract deployer address
 * @param {BitgoStacksNetwork} network - network object
 * @returns {boolean} - the validation result
 */
function isValidContractAddress(addr, network) {
    return addr === network.stakingContractAddress || addr === network.sendmanymemoContractAddress;
}
exports.isValidContractAddress = isValidContractAddress;
/**
 * Check if the name is one of valid contract names
 *
 * @param {string} name - function name
 * @returns {boolean} - validation result
 */
function isValidContractFunctionName(name) {
    return constants_1.VALID_CONTRACT_FUNCTION_NAMES.includes(name);
}
exports.isValidContractFunctionName = isValidContractFunctionName;
/**
 * Unpads a memo string, so it removes nulls.
 *
 * Useful when memo is fill up the length. Result is becomes readable.
 *
 * @param {string} memo - the string to be validated
 * @returns {boolean} - the validation result
 */
function unpadMemo(memo) {
    var end = memo.indexOf('\u0000');
    if (end < 0)
        return memo;
    return memo.slice(0, end);
}
exports.unpadMemo = unpadMemo;
/**
 * Generate a multisig address from multiple STX public keys
 *
 * @param {string[]} pubKeys - list of public keys as strings
 * @param {AddressVersion} addressVersion - MainnetMultiSig, TestnetMultiSig
 * @param {AddressHashMode} addressHashMode - SerializeP2SH
 * @param {number} [signaturesRequired] - number of signatures required, default value its 2
 * @returns {address: string, hash160: string} - a multisig address
 */
function getSTXAddressFromPubKeys(pubKeys, addressVersion, addressHashMode, signaturesRequired) {
    if (addressVersion === void 0) { addressVersion = transactions_1.AddressVersion.MainnetMultiSig; }
    if (addressHashMode === void 0) { addressHashMode = transactions_1.AddressHashMode.SerializeP2SH; }
    if (signaturesRequired === void 0) { signaturesRequired = 2; }
    if (pubKeys.length === 0) {
        throw new Error('Invalid number of public keys');
    }
    if (!pubKeys.every(isValidPublicKey)) {
        throw new Error('Invalid public keys');
    }
    if (signaturesRequired > pubKeys.length) {
        throw new Error('Number of signatures required must be lower or equal to the number of Public Keys');
    }
    var stxPubKeys = pubKeys.map(transactions_1.createStacksPublicKey);
    var address = transactions_1.addressFromPublicKeys(addressVersion, addressHashMode, signaturesRequired, stxPubKeys);
    return { address: transactions_1.addressToString(address), hash160: address.hash160 };
}
exports.getSTXAddressFromPubKeys = getSTXAddressFromPubKeys;
/**
 * signs a string message
 *
 * @param keyPair
 * @param data  - message to be signed
 * @returns signed message string
 */
function signMessage(keyPair, data) {
    var prv = keyPair.getKeys().prv;
    if (prv) {
        return transactions_1.signWithKey(transactions_1.createStacksPrivateKey(prv), data).data;
    }
    else {
        throw new errors_1.SigningError('Missing private key');
    }
}
exports.signMessage = signMessage;
/**
 * Verifies a signed message
 *
 * The signature must be 130 bytes long -- see RECOVERABLE_ECDSA_SIG_LENGTH_BYTES
 * in @stacks/transactions/src/constants.ts
 *
 * @param {string} message - message to verify the signature
 * @param {string} signature - signature to verify
 * @param {string} publicKey - public key as hex string used to verify the signature
 * @returns {boolean} - verification result
 */
function verifySignature(message, signature, publicKey) {
    if (!isValidPublicKey(publicKey))
        return false;
    if (signature.length !== 130)
        return false;
    if (!allHexChars(signature))
        throw new errors_1.UtilsError('Invalid signature input to verifySignature');
    if (_.isEmpty(message))
        throw new errors_1.UtilsError('Cannot verify empty messages');
    // provided publicKey can be compressed or uncompressed
    var keyEncoding = publicKey.length === 66 ? transactions_1.PubKeyEncoding.Compressed : transactions_1.PubKeyEncoding.Uncompressed;
    var messageSig = transactions_1.createMessageSignature(signature);
    var foundKey = transactions_1.publicKeyFromSignature(message, messageSig, keyEncoding);
    return foundKey === publicKey;
}
exports.verifySignature = verifySignature;
/**
 * Process address into address and memo id
 *
 * @param {string} address the address to process
 * @returns {Object} object containing address and memo id
 */
function getAddressDetails(address) {
    var addressDetails = url.parse(address);
    var queryDetails = addressDetails.query ? querystring.parse(addressDetails.query) : {};
    var baseAddress = addressDetails.pathname;
    if (!isValidAddress(baseAddress)) {
        throw new errors_1.UtilsError("invalid address: " + address);
    }
    // address doesn't have a memo id
    if (baseAddress === address) {
        return {
            address: address,
            memoId: undefined,
        };
    }
    if (_.isUndefined(queryDetails.memoId)) {
        // if there are more properties, the query details need to contain the memo id property
        throw new errors_1.UtilsError("invalid address with memo id: " + address);
    }
    var memoId = queryDetails.memoId;
    var intMemoId = parseInt(memoId, 10);
    if (isNaN(intMemoId) || intMemoId < 0) {
        throw new Error("invalid memo id: " + memoId);
    }
    return {
        address: baseAddress,
        memoId: memoId,
    };
}
exports.getAddressDetails = getAddressDetails;
/**
 * Validate and return address with appended memo id
 *
 * @param {AddressDetails} addressDetails
 * @returns {string} address with memo id
 */
function normalizeAddress(_a) {
    var address = _a.address, memoId = _a.memoId;
    if (!isValidAddress(address)) {
        throw new errors_1.UtilsError("invalid address: " + address);
    }
    if (!_.isUndefined(memoId)) {
        var intMemoId = parseInt(memoId, 10);
        if (isNaN(intMemoId) || intMemoId < 0) {
            throw new Error("invalid memo id: " + memoId);
        }
        return address + "?memoId=" + memoId;
    }
    return address;
}
exports.normalizeAddress = normalizeAddress;
/**
 * Return boolean indicating whether input is a valid address with memo id
 *
 * @param {string} address address in the form <address>?memoId=<memoId>
 * @returns {boolean} true is input is a valid address
 */
function isValidAddressWithPaymentId(address) {
    try {
        var addressDetails = getAddressDetails(address);
        return address === normalizeAddress(addressDetails);
    }
    catch (e) {
        return false;
    }
}
exports.isValidAddressWithPaymentId = isValidAddressWithPaymentId;
/**
 * Return string representation of clarity value input
 *
 * @param {ClarityValue} cv clarity value function argument
 * @returns {String} stringified clarity value
 */
function stringifyCv(cv) {
    switch (cv.type) {
        case transactions_1.ClarityType.Int:
        case transactions_1.ClarityType.UInt:
            return { type: cv.type, value: cv.value.toString() };
        case transactions_1.ClarityType.OptionalSome:
            return { type: cv.type, value: stringifyCv(cv.value) };
        case transactions_1.ClarityType.Tuple:
            return {
                type: cv.type,
                data: _.mapValues(cv.data, function (value) { return stringifyCv(value); }),
            };
        case transactions_1.ClarityType.List:
            return {
                type: cv.type,
                list: cv.list.map(stringifyCv),
            };
        default:
            return cv;
    }
}
exports.stringifyCv = stringifyCv;
/**
 * Parse functionArgs into send params for send-many-memo contract calls
 *
 * @param {ClarityValue[]} args functionArgs from a contract call payload
 * @returns {SendParams[]} An array of sendParams
 */
function functionArgsToSendParams(args) {
    if (args.length !== 1 || args[0].type !== transactions_1.ClarityType.List) {
        throw new errors_1.InvalidTransactionError("function args don't match send-many-memo type declaration");
    }
    return args[0].list.map(function (tuple) {
        var _a, _b, _c;
        if (tuple.type !== transactions_1.ClarityType.Tuple ||
            ((_a = tuple.data.to) === null || _a === void 0 ? void 0 : _a.type) !== transactions_1.ClarityType.PrincipalStandard ||
            ((_b = tuple.data.ustx) === null || _b === void 0 ? void 0 : _b.type) !== transactions_1.ClarityType.UInt ||
            ((_c = tuple.data.memo) === null || _c === void 0 ? void 0 : _c.type) !== transactions_1.ClarityType.Buffer) {
            throw new errors_1.InvalidTransactionError("function args don't match send-many-memo type declaration");
        }
        return {
            address: transactions_1.cvToString(tuple.data.to),
            amount: transactions_1.cvToValue(tuple.data.ustx, true),
            memo: tuple.data.memo.buffer.toString('ascii'),
        };
    });
}
exports.functionArgsToSendParams = functionArgsToSendParams;
/**
 * Gets the version of an address
 *
 * @param {String} address the address with or without the memoId
 * @returns {AddressVersion} A number that represent the Address Version
 */
function getAddressVersion(address) {
    var baseAddress = getAddressDetails(address).address;
    return transactions_1.createAddress(baseAddress).version;
}
exports.getAddressVersion = getAddressVersion;
/**
 * Returns a STX pub key from an xpub
 *
 * @param {String} xpub an xpub
 * @returns {String} a compressed STX pub key
 */
function xpubToSTXPubkey(xpub, compressed) {
    if (compressed === void 0) { compressed = true; }
    return new _1.KeyPair({ pub: xpub }).getKeys(compressed).pub;
}
exports.xpubToSTXPubkey = xpubToSTXPubkey;
/**
 * Returns the base address portion of an address
 *
 * @param {String} address - an address
 * @returns {String} - the base address
 */
function getBaseAddress(address) {
    var addressDetails = getAddressDetails(address);
    return addressDetails.address;
}
exports.getBaseAddress = getBaseAddress;
/**
 * Compares an address to the base address to check if matchs.
 *
 * @param {String} address - an address
 * @param {String} baseAddress - a base address
 * @returns {boolean}
 */
function isSameBaseAddress(address, baseAddress) {
    if (!isValidAddressWithPaymentId(address)) {
        throw new errors_1.UtilsError("invalid address: " + address);
    }
    return getBaseAddress(address) === getBaseAddress(baseAddress);
}
exports.isSameBaseAddress = isSameBaseAddress;
//# sourceMappingURL=data:application/json;base64,