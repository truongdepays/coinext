import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { Transaction } from './transaction';
import { SendParams } from './iface';
import { ContractCallPayload } from '@stacks/transactions/dist/payload';
import { AbstractContractBuilder } from './abstractContractBuilder';
export declare class SendmanyBuilder extends AbstractContractBuilder {
    private _sendParams;
    constructor(_coinConfig: Readonly<CoinConfig>);
    static isValidContractCall(coinConfig: Readonly<CoinConfig>, payload: ContractCallPayload): boolean;
    private sendParamsToFunctionArgs;
    private sendParamsToPostcondition;
    initBuilder(tx: Transaction): void;
    /**
     *  Set a transfer
     *
     * @param {SendParams} sendParams - the sender address
     * @returns {TransactionBuilder} This transaction builder
     */
    send({ address, amount, memo }: SendParams): this;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction>;
}
//# sourceMappingURL=sendmanyBuilder.d.ts.map