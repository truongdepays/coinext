"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
var transactions_1 = require("@stacks/transactions");
var errors_1 = require("../baseCoin/errors");
var baseCoin_1 = require("../baseCoin");
var utils_1 = require("./utils");
var bn_js_1 = __importDefault(require("bn.js"));
var Transaction = /** @class */ (function (_super) {
    __extends(Transaction, _super);
    function Transaction(_coinConfig) {
        return _super.call(this, _coinConfig) || this;
    }
    /** @inheritdoc */
    Transaction.prototype.canSign = function (key) {
        return true;
    };
    Transaction.prototype.sign = function (keyPair, sigHash) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var keyPairs, signer, _i, keyPairs_1, kp, keys, privKey;
            return __generator(this, function (_b) {
                keyPairs = keyPair instanceof Array ? keyPair : [keyPair];
                signer = new transactions_1.TransactionSigner(this._stxTransaction);
                signer.checkOversign = false;
                signer.sigHash = (_a = sigHash !== null && sigHash !== void 0 ? sigHash : this._sigHash) !== null && _a !== void 0 ? _a : this._stxTransaction.verifyBegin();
                for (_i = 0, keyPairs_1 = keyPairs; _i < keyPairs_1.length; _i++) {
                    kp = keyPairs_1[_i];
                    keys = kp.getKeys(kp.getCompressed());
                    if (!keys.prv) {
                        throw new errors_1.SigningError('Missing private key');
                    }
                    privKey = transactions_1.createStacksPrivateKey(keys.prv);
                    signer.signOrigin(privKey);
                    this._sigHash = signer.sigHash;
                }
                return [2 /*return*/];
            });
        });
    };
    Transaction.prototype.appendOrigin = function (pubKeyString) {
        return __awaiter(this, void 0, void 0, function () {
            var pubKeyStrings, signer;
            return __generator(this, function (_a) {
                pubKeyStrings = pubKeyString instanceof Array ? pubKeyString : [pubKeyString];
                signer = new transactions_1.TransactionSigner(this._stxTransaction);
                pubKeyStrings.forEach(function (pubKey) {
                    signer.appendOrigin(transactions_1.createStacksPublicKey(pubKey));
                });
                return [2 /*return*/];
            });
        });
    };
    Transaction.prototype.signWithSignatures = function (signature, isMultiSig) {
        return __awaiter(this, void 0, void 0, function () {
            var signatures, authFields;
            return __generator(this, function (_a) {
                if (!signature) {
                    throw new errors_1.SigningError('Missing signatures');
                }
                signatures = signature instanceof Array ? signature : [signature];
                if (!isMultiSig) {
                    this._stxTransaction = this._stxTransaction.createTxWithSignature(signatures[0].data);
                }
                else {
                    authFields = signatures.map(function (sig) { return transactions_1.createTransactionAuthField(transactions_1.PubKeyEncoding.Compressed, sig); });
                    this._stxTransaction.auth.spendingCondition.fields = this._stxTransaction.auth.spendingCondition.fields.concat(authFields);
                }
                if (signatures.length > 0) {
                    this._sigHash = signatures[signatures.length - 1].sigHash;
                }
                return [2 /*return*/];
            });
        });
    };
    Object.defineProperty(Transaction.prototype, "signature", {
        get: function () {
            if (this._stxTransaction && this._stxTransaction.auth.spendingCondition) {
                if (transactions_1.isSingleSig(this._stxTransaction.auth.spendingCondition)) {
                    return [this._stxTransaction.auth.spendingCondition.signature.data];
                }
                else {
                    var signatures_1 = [];
                    this._stxTransaction.auth.spendingCondition.fields.forEach(function (field) {
                        if (field.contents.type === transactions_1.StacksMessageType.MessageSignature) {
                            signatures_1.push(field.contents.data);
                        }
                    });
                    return signatures_1;
                }
            }
            return [];
        },
        enumerable: false,
        configurable: true
    });
    /** @inheritdoc */
    Transaction.prototype.toJson = function () {
        if (!this._stxTransaction) {
            throw new errors_1.ParseTransactionError('Empty transaction');
        }
        var result = {
            id: this._stxTransaction.txid(),
            fee: this._stxTransaction.auth.getFee().toString(10),
            from: utils_1.getTxSenderAddress(this._stxTransaction),
            nonce: this.getNonce(),
            payload: this.getPayloadData(),
        };
        return result;
    };
    Transaction.prototype.getPayloadData = function () {
        if (this._stxTransaction.payload.payloadType === transactions_1.PayloadType.TokenTransfer) {
            var payload = this._stxTransaction.payload;
            var txPayload = {
                payloadType: transactions_1.PayloadType.TokenTransfer,
                // result.payload.memo will be padded with \u0000 up to
                // MEMO_MAX_LENGTH_BYTES as defined in @stacks/transactions
                memo: utils_1.unpadMemo(payload.memo.content),
                to: transactions_1.addressToString({
                    type: transactions_1.StacksMessageType.Address,
                    version: payload.recipient.address.version,
                    hash160: payload.recipient.address.hash160.toString(),
                }),
                amount: payload.amount.toString(),
            };
            return txPayload;
        }
        else if (this._stxTransaction.payload.payloadType === transactions_1.PayloadType.ContractCall) {
            var payload = this._stxTransaction.payload;
            var contractPayload = {
                payloadType: transactions_1.PayloadType.ContractCall,
                contractAddress: transactions_1.addressToString(payload.contractAddress),
                contractName: payload.contractName.content,
                functionName: payload.functionName.content,
                functionArgs: payload.functionArgs.map(utils_1.stringifyCv),
            };
            return contractPayload;
        }
        else {
            throw new errors_1.NotSupported('payload type not supported');
        }
    };
    /**
     * Return the length of a transaction.  This is needed to calculate
     * the transaction fee.
     *
     * @returns {number} size in bytes of the serialized transaction
     */
    Transaction.prototype.transactionSize = function () {
        return this._stxTransaction.serialize().length;
    };
    Transaction.prototype.toBroadcastFormat = function () {
        if (!this._stxTransaction) {
            throw new errors_1.ParseTransactionError('Empty transaction');
        }
        return this._stxTransaction.serialize().toString('hex');
    };
    Object.defineProperty(Transaction.prototype, "stxTransaction", {
        get: function () {
            return this._stxTransaction;
        },
        set: function (t) {
            this._stxTransaction = t;
        },
        enumerable: false,
        configurable: true
    });
    Transaction.prototype.getNonce = function () {
        if (this._stxTransaction.auth.spendingCondition) {
            return Number(this._stxTransaction.auth.spendingCondition.nonce);
        }
        else {
            throw new errors_1.InvalidTransactionError('spending condition is null');
        }
    };
    /**
     * Sets this transaction payload
     *
     * @param rawTransaction
     */
    Transaction.prototype.fromRawTransaction = function (rawTransaction) {
        var raw = utils_1.removeHexPrefix(rawTransaction);
        try {
            this._stxTransaction = transactions_1.deserializeTransaction(transactions_1.BufferReader.fromBuffer(Buffer.from(raw, 'hex')));
        }
        catch (e) {
            throw new errors_1.ParseTransactionError('Error parsing the raw transaction');
        }
        this.loadInputsAndOutputs();
    };
    /**
     * Set the transaction type
     *
     * @param {TransactionType} transactionType The transaction type to be set
     */
    Transaction.prototype.setTransactionType = function (transactionType) {
        this._type = transactionType;
    };
    /**
     * Load the input and output data on this transaction using the transaction json
     * if there are outputs.
     */
    Transaction.prototype.loadInputsAndOutputs = function () {
        var txJson = this.toJson();
        if (txJson.payload.payloadType === transactions_1.PayloadType.TokenTransfer) {
            if (txJson.payload.to && txJson.payload.amount) {
                this._outputs = [
                    {
                        address: txJson.payload.to,
                        value: txJson.payload.amount,
                        coin: this._coinConfig.name,
                    },
                ];
                this._inputs = [
                    {
                        address: txJson.from,
                        value: txJson.payload.amount,
                        coin: this._coinConfig.name,
                    },
                ];
            }
        }
        else if (txJson.payload.payloadType === transactions_1.PayloadType.ContractCall) {
            if (txJson.payload.contractAddress === this._coinConfig.network.sendmanymemoContractAddress) {
                var sendParams = utils_1.functionArgsToSendParams(this.stxTransaction.payload.functionArgs);
                var coin_1 = this._coinConfig.name;
                var sum = sendParams.reduce(function (current, next) { return current.add(new bn_js_1.default(next.amount)); }, new bn_js_1.default(0));
                this._outputs = sendParams.map(function (sendParam) { return ({ address: sendParam.address, value: sendParam.amount, coin: coin_1 }); });
                this._inputs = [{ address: txJson.from, value: sum.toString(), coin: coin_1 }];
            }
            else {
                this._outputs = [
                    {
                        address: txJson.payload.contractAddress,
                        value: '0',
                        coin: this._coinConfig.name,
                    },
                ];
                this._inputs = [
                    {
                        address: txJson.from,
                        value: '0',
                        coin: this._coinConfig.name,
                    },
                ];
            }
        }
    };
    return Transaction;
}(baseCoin_1.BaseTransaction));
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,