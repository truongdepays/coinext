"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Networks = exports.BaseNetwork = exports.NetworkType = void 0;
const base_1 = require("./base");
const dot_1 = require("../resources/dot");
var NetworkType;
(function (NetworkType) {
    NetworkType["MAINNET"] = "mainnet";
    NetworkType["TESTNET"] = "testnet";
})(NetworkType = exports.NetworkType || (exports.NetworkType = {}));
class BaseNetwork {
}
exports.BaseNetwork = BaseNetwork;
class Mainnet extends BaseNetwork {
    constructor() {
        super(...arguments);
        this.type = NetworkType.MAINNET;
    }
}
class Testnet extends BaseNetwork {
    constructor() {
        super(...arguments);
        this.type = NetworkType.TESTNET;
    }
}
class Algorand extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Algorand';
        this.family = base_1.CoinFamily.ALGO;
        this.explorerUrl = 'https://algoexplorer.io/tx/';
    }
}
class AlgorandTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'AlgorandTestnet';
        this.family = base_1.CoinFamily.ALGO;
        this.explorerUrl = 'https://testnet.algoexplorer.io/tx/';
    }
}
class AvalancheC extends Mainnet {
    constructor() {
        super(...arguments);
        // https://docs.avax.network/build/tutorials/smart-contracts/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask#avalanche-mainnet-settings
        this.name = 'AvalancheC';
        this.family = base_1.CoinFamily.AVAXC;
        this.explorerUrl = 'https://cchain.explorer.avax.network/tx/';
        this.accountExplorerUrl = 'https://cchain.explorer.avax.network/address/';
        this.chainId = 43114;
    }
}
class AvalancheCTestnet extends Testnet {
    constructor() {
        super(...arguments);
        // https://docs.avax.network/build/tutorials/smart-contracts/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask#avalanche-mainnet-settings
        this.name = 'AvalancheCTestnet';
        this.family = base_1.CoinFamily.AVAXC;
        this.explorerUrl = 'https://cchain.explorer.avax-test.network/tx/';
        this.accountExplorerUrl = 'https://cchain.explorer.avax-test.network/address/';
        this.chainId = 43113;
    }
}
class Bitcoin extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Bitcoin';
        this.family = base_1.CoinFamily.BTC;
        this.utxolibName = 'bitcoin';
        this.explorerUrl = 'https://blockstream.info/tx/';
    }
}
class BitcoinTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinTestnet';
        this.family = base_1.CoinFamily.BTC;
        this.utxolibName = 'testnet';
        this.explorerUrl = 'https://blockstream.info/testnet/tx/';
    }
}
class BitcoinCash extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinCash';
        this.family = base_1.CoinFamily.BCH;
        this.utxolibName = 'bitcoincash';
        this.explorerUrl = 'https://www.blockchain.com/bch/tx/';
    }
}
class BitcoinCashTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinCashTestnet';
        this.family = base_1.CoinFamily.BCH;
        this.utxolibName = 'bitcoincashTestnet';
        this.explorerUrl = 'https://www.blockchain.com/bch-testnet/tx/';
    }
}
class BitcoinABC extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinABC';
        this.family = base_1.CoinFamily.BCHA;
        this.utxolibName = 'bitcoincash';
        this.explorerUrl = 'https://api.blockchair.com/bitcoin-abc';
    }
}
class BitcoinABCTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinABCTestnet';
        this.family = base_1.CoinFamily.BCHA;
        this.utxolibName = 'bitcoincashTestnet';
        this.explorerUrl = undefined;
    }
}
class BitcoinSV extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinSV';
        this.family = base_1.CoinFamily.BSV;
        this.utxolibName = 'bitcoinsv';
        this.explorerUrl = 'https://blockchair.com/bitcoin-sv/transaction/';
    }
}
class BitcoinSVTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinSVTestnet';
        this.family = base_1.CoinFamily.BSV;
        this.utxolibName = 'bitcoinsvTestnet';
        this.explorerUrl = undefined;
    }
}
class BitcoinGold extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinGold';
        this.family = base_1.CoinFamily.BTG;
        this.utxolibName = 'bitcoingold';
        this.explorerUrl = 'https://btgexplorer.com/tx/';
    }
}
class BitcoinGoldTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'BitcoinGoldTestnet';
        this.family = base_1.CoinFamily.BTG;
        this.utxolibName = 'bitcoingoldTestnet';
        this.explorerUrl = undefined;
    }
}
class Dash extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Dash';
        this.family = base_1.CoinFamily.DASH;
        this.utxolibName = 'dash';
        this.explorerUrl = 'https://insight.dashevo.org/insight/tx/';
    }
}
class DashTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'DashTestnet';
        this.family = base_1.CoinFamily.DASH;
        this.utxolibName = 'dashTest';
        this.explorerUrl = 'https://testnet-insight.dashevo.org/insight/tx/';
    }
}
class Polkadot extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Polkadot';
        this.family = base_1.CoinFamily.DOT;
        this.explorerUrl = 'https://polkadot.subscan.io/extrinsic/';
        this.specName = 'polkadot';
        this.genesisHash = '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3';
        this.specVersion = 9140;
        this.chainName = 'Polkadot';
        this.metadataRpc = dot_1.mainnetMetadataRpc;
        this.txVersion = 9;
    }
}
class PolkadotTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Westend';
        this.family = base_1.CoinFamily.DOT;
        this.explorerUrl = 'https://westend.subscan.io/extrinsic/';
        this.specName = 'westend';
        this.genesisHash = '0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e';
        this.specVersion = 9160;
        this.chainName = 'Westend';
        this.metadataRpc = dot_1.westendMetadataRpc;
        this.txVersion = 9;
    }
}
class Celo extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Celo';
        this.family = base_1.CoinFamily.CELO;
        this.explorerUrl = 'https://explorer.celo.org/tx/';
        this.accountExplorerUrl = 'https://explorer.celo.org/address/';
        this.chainId = 42220;
    }
}
class CeloTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'CeloTestnet';
        this.family = base_1.CoinFamily.CELO;
        this.explorerUrl = 'https://alfajores-blockscout.celo-testnet.org/tx/';
        this.accountExplorerUrl = 'https://alfajores-blockscout.celo-testnet.org/address/';
        this.chainId = 44787;
    }
}
// TODO update explorerUrl STLX-1657
class Casper extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Casper';
        this.family = base_1.CoinFamily.CSPR;
        this.explorerUrl = 'https://cspr.live/deploy/';
        this.accountExplorerUrl = 'https://cspr.live/account/';
    }
}
// TODO update explorerUrl STLX-1657
class CasperTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'CasperTestnet';
        this.family = base_1.CoinFamily.CSPR;
        this.explorerUrl = 'https://testnet.cspr.live/deploy/';
        this.accountExplorerUrl = 'https://testnet.cspr.live/account/';
    }
}
class Ethereum extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Ethereum';
        this.family = base_1.CoinFamily.ETH;
        this.explorerUrl = 'https://etherscan.io/tx/';
        this.accountExplorerUrl = 'https://etherscan.io/address/';
        // from https://github.com/ethereumjs/ethereumjs-common/blob/a978f630858f6843176bb20b277569785914e899/src/chains/index.ts
        this.chainId = 1;
        this.batcherContractAddress = '0x0c9b25dfe02b2c89cce86e1a0bd6c04a7aca01b6';
        this.forwarderFactoryAddress = '0xffa397285ce46fb78c588a9e993286aac68c37cd';
        this.forwarderImplementationAddress = '0x059ffafdc6ef594230de44f824e2bd0a51ca5ded';
    }
}
class Ethereum2 extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Ethereum2';
        this.family = base_1.CoinFamily.ETH2;
        this.explorerUrl = 'https://beaconscan.com/tx';
        this.accountExplorerUrl = 'https://beaconscan.com/address';
    }
}
class Pyrmont extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Pyrmont';
        this.family = base_1.CoinFamily.ETH2;
        this.explorerUrl = 'https://beaconscan.com/pyrmont/tx';
        this.accountExplorerUrl = 'https://beaconscan.com/pyrmont/address';
    }
}
class Kovan extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Kovan';
        this.family = base_1.CoinFamily.ETH;
        this.explorerUrl = 'https://kovan.etherscan.io/tx/';
        this.accountExplorerUrl = 'https://kovan.etherscan.io/address/';
        // from https://github.com/ethereumjs/ethereumjs-common/blob/a978f630858f6843176bb20b277569785914e899/src/chains/index.ts
        this.chainId = 42;
        this.batcherContractAddress = '0xc0aaf2649e7b0f3950164681eca2b1a8f654a478';
        this.forwarderFactoryAddress = '0xa79a485294d226075ee65410bc94ea454f3e409d';
        this.forwarderImplementationAddress = '0xa946e748f25a5ec6878eb1a9f2e902028174c0b3';
    }
}
class Goerli extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'Goerli';
        this.family = base_1.CoinFamily.ETH;
        this.explorerUrl = 'https://goerli.etherscan.io/tx/';
        this.accountExplorerUrl = 'https://goerli.etherscan.io/address/';
        // from https://github.com/ethereumjs/ethereumjs-common/blob/a978f630858f6843176bb20b277569785914e899/src/chains/index.ts
        this.chainId = 5;
        this.batcherContractAddress = '0xe8e847cf573fc8ed75621660a36affd18c543d7e';
        this.forwarderFactoryAddress = '0xf5caa5e3e93afbc21bd19ef4f2691a37121f7917';
        this.forwarderImplementationAddress = '0x80d5c91e8cc21df69fc4d64f21dc2d83121c3999';
    }
}
class EthereumClassic extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'EthereumClassic';
        this.family = base_1.CoinFamily.ETC;
        this.explorerUrl = 'https://blockscout.com/etc/mainnet/tx/';
        this.accountExplorerUrl = 'https://blockscout.com/etc/mainnet/address/';
        // from  https://chainid.network/chains/
        this.chainId = 61;
    }
}
class EthereumClassicTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'EthereumClassicTestnet';
        this.family = base_1.CoinFamily.ETC;
        this.explorerUrl = 'https://blockscout.com/etc/mordor/tx/';
        this.accountExplorerUrl = 'https://blockscout.com/etc/mordor/address/';
        // from  https://chainid.network/chains/
        this.chainId = 63;
    }
}
class Eos extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Eos';
        this.family = base_1.CoinFamily.EOS;
        this.explorerUrl = 'https://bloks.io/transaction/';
    }
}
class EosTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'EosTestnet';
        this.family = base_1.CoinFamily.EOS;
        this.explorerUrl = 'https://local.bloks.io/transaction/';
    }
}
class Hedera extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Hedera';
        this.family = base_1.CoinFamily.HBAR;
        this.explorerUrl = 'https://explorer.kabuto.sh/mainnet/transaction/';
    }
}
class HederaTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'HederaTestnet';
        this.family = base_1.CoinFamily.HBAR;
        this.explorerUrl = 'https://explorer.kabuto.sh/testnet/transaction/';
    }
}
class Litecoin extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Litecoin';
        this.family = base_1.CoinFamily.LTC;
        this.utxolibName = 'litecoin';
        this.explorerUrl = 'https://blockchair.com/litecoin/transaction/';
    }
}
class LitecoinTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'LitecoinTestnet';
        this.family = base_1.CoinFamily.LTC;
        this.utxolibName = 'litecoinTest';
        this.explorerUrl = 'https://blockexplorer.one/litecoin/testnet/tx/';
    }
}
class Ofc extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Ofc';
        this.family = base_1.CoinFamily.OFC;
        this.explorerUrl = undefined;
    }
}
class OfcTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'OfcTestnet';
        this.family = base_1.CoinFamily.OFC;
        this.explorerUrl = undefined;
    }
}
class Rbtc extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Rbtc';
        this.family = base_1.CoinFamily.RBTC;
        this.explorerUrl = 'https://explorer.rsk.co/tx/';
        this.accountExplorerUrl = 'https://explorer.rsk.co/address/';
        this.chainId = 30;
    }
}
class RbtcTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'RbtcTestnet';
        this.family = base_1.CoinFamily.RBTC;
        this.explorerUrl = 'https://explorer.testnet.rsk.co/tx/';
        this.accountExplorerUrl = 'https://explorer.testnet.rsk.co/address/';
        this.chainId = 31;
    }
}
class Stellar extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Stellar';
        this.family = base_1.CoinFamily.XLM;
        this.explorerUrl = 'https://stellar.expert/explorer/public/tx/';
    }
}
class StellarTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'StellarTestnet';
        this.family = base_1.CoinFamily.XLM;
        this.explorerUrl = 'https://stellar.expert/explorer/testnet/tx/';
    }
}
class Sol extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Sol';
        this.family = base_1.CoinFamily.SOL;
        this.explorerUrl = 'https://explorer.solana.com/tx/';
    }
}
class SolTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'SolTestnet';
        this.family = base_1.CoinFamily.SOL;
        this.explorerUrl = 'https://explorer.solana.com/tx/?cluster=devnet';
    }
}
class Stx extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Stx';
        this.family = base_1.CoinFamily.STX;
        this.explorerUrl = 'https://explorer.stacks.co/txid/';
        this.sendmanymemoContractAddress = 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE';
        this.stakingContractAddress = 'SP000000000000000000002Q6VF78';
    }
}
class StxTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'StxTestnet';
        this.family = base_1.CoinFamily.STX;
        this.explorerUrl = 'https://explorer.stacks.co/txid/?chain=testnet';
        this.sendmanymemoContractAddress = 'ST3F1X4QGV2SM8XD96X45M6RTQXKA1PZJZZCQAB4B';
        this.stakingContractAddress = 'ST000000000000000000002AMW42H';
    }
}
class SUSD extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'SUSD';
        this.family = base_1.CoinFamily.SUSD;
        this.explorerUrl = undefined;
    }
}
class SUSDTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'SUSDTestnet';
        this.family = base_1.CoinFamily.SUSD;
        this.explorerUrl = undefined;
    }
}
class FiatTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'FiatTestnet';
        this.family = base_1.CoinFamily.FIAT;
        this.explorerUrl = undefined;
    }
}
class Fiat extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Fiat';
        this.family = base_1.CoinFamily.FIAT;
        this.explorerUrl = undefined;
    }
}
class Trx extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Trx';
        this.family = base_1.CoinFamily.TRX;
        this.explorerUrl = 'https://tronscan.org/#/transaction/';
        this.maxFeeLimit = '5000000000';
        this.contractCallFeeLimit = '100000000';
    }
}
class TrxTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'TrxTestnet';
        this.family = base_1.CoinFamily.TRX;
        this.explorerUrl = 'https://shasta.tronscan.org/#/transaction/';
        this.maxFeeLimit = '5000000000';
        this.contractCallFeeLimit = '100000000';
    }
}
class Xrp extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Xrp';
        this.family = base_1.CoinFamily.XRP;
        this.explorerUrl = 'https://livenet.xrpl.org/transactions/';
    }
}
class XrpTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'XrpTestnet';
        this.family = base_1.CoinFamily.XRP;
        this.explorerUrl = 'https://test.bithomp.com/explorer/';
    }
}
class Xtz extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Xtz';
        this.family = base_1.CoinFamily.XTZ;
        this.explorerUrl = 'https://tezblock.io/transaction/';
        this.accountExplorerUrl = 'https://tezblock.io/account/';
    }
}
class XtzTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'XtzTestnet';
        this.family = base_1.CoinFamily.XTZ;
        this.explorerUrl = 'https://carthagenet.tezblock.io/transaction/';
        this.accountExplorerUrl = 'https://carthagenet.tezblock.io/account/';
    }
}
class ZCash extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'ZCash';
        this.family = base_1.CoinFamily.ZEC;
        this.utxolibName = 'zcash';
        this.explorerUrl = 'https://chain.so/tx/ZEC/';
    }
}
class ZCashTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'ZCashTestnet';
        this.family = base_1.CoinFamily.ZEC;
        this.utxolibName = 'zcashTest';
        this.explorerUrl = 'https://chain.so/tx/ZECTEST/';
    }
}
class Near extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'Near';
        this.family = base_1.CoinFamily.NEAR;
        this.explorerUrl = 'https://explorer.near.org/transactions/';
    }
}
class NearTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'NearTestnet';
        this.family = base_1.CoinFamily.NEAR;
        this.explorerUrl = 'https://explorer.testnet.near.org/transactions/';
    }
}
class MaticL extends Mainnet {
    constructor() {
        super(...arguments);
        this.name = 'MaticL';
        this.family = base_1.CoinFamily.MATICL;
        this.explorerUrl = 'https://polygonscan.com/tx/';
        this.accountExplorerUrl = 'https://polygonscan.com/address/';
        this.chainId = 137;
    }
}
class MaticLTestnet extends Testnet {
    constructor() {
        super(...arguments);
        this.name = 'MaticLTestnet';
        this.family = base_1.CoinFamily.MATICL;
        this.explorerUrl = 'https://mumbai.polygonscan.com/tx/';
        this.accountExplorerUrl = 'https://mumbai.polygonscan.com/address/';
        this.chainId = 80001;
    }
}
exports.Networks = {
    main: {
        algorand: Object.freeze(new Algorand()),
        avalancheC: Object.freeze(new AvalancheC()),
        bitcoin: Object.freeze(new Bitcoin()),
        bitcoinCash: Object.freeze(new BitcoinCash()),
        bitcoinABC: Object.freeze(new BitcoinABC()),
        bitcoinGold: Object.freeze(new BitcoinGold()),
        bitcoinSV: Object.freeze(new BitcoinSV()),
        casper: Object.freeze(new Casper()),
        celo: Object.freeze(new Celo()),
        dash: Object.freeze(new Dash()),
        dot: Object.freeze(new Polkadot()),
        eos: Object.freeze(new Eos()),
        ethereum: Object.freeze(new Ethereum()),
        ethereum2: Object.freeze(new Ethereum2()),
        ethereumClassic: Object.freeze(new EthereumClassic()),
        fiat: Object.freeze(new Fiat()),
        hedera: Object.freeze(new Hedera()),
        litecoin: Object.freeze(new Litecoin()),
        maticl: Object.freeze(new MaticL()),
        ofc: Object.freeze(new Ofc()),
        rbtc: Object.freeze(new Rbtc()),
        stellar: Object.freeze(new Stellar()),
        sol: Object.freeze(new Sol()),
        near: Object.freeze(new Near()),
        stx: Object.freeze(new Stx()),
        susd: Object.freeze(new SUSD()),
        trx: Object.freeze(new Trx()),
        xrp: Object.freeze(new Xrp()),
        xtz: Object.freeze(new Xtz()),
        zCash: Object.freeze(new ZCash()),
    },
    test: {
        algorand: Object.freeze(new AlgorandTestnet()),
        avalancheC: Object.freeze(new AvalancheCTestnet()),
        bitcoin: Object.freeze(new BitcoinTestnet()),
        bitcoinCash: Object.freeze(new BitcoinCashTestnet()),
        bitcoinGold: Object.freeze(new BitcoinGoldTestnet()),
        bitcoinABC: Object.freeze(new BitcoinABCTestnet()),
        bitcoinSV: Object.freeze(new BitcoinSVTestnet()),
        casper: Object.freeze(new CasperTestnet()),
        celo: Object.freeze(new CeloTestnet()),
        dash: Object.freeze(new DashTestnet()),
        dot: Object.freeze(new PolkadotTestnet()),
        eos: Object.freeze(new EosTestnet()),
        fiat: Object.freeze(new FiatTestnet()),
        pyrmont: Object.freeze(new Pyrmont()),
        ethereumClassicTestnet: Object.freeze(new EthereumClassicTestnet()),
        hedera: Object.freeze(new HederaTestnet()),
        kovan: Object.freeze(new Kovan()),
        goerli: Object.freeze(new Goerli()),
        litecoin: Object.freeze(new LitecoinTestnet()),
        maticl: Object.freeze(new MaticLTestnet()),
        ofc: Object.freeze(new OfcTestnet()),
        rbtc: Object.freeze(new RbtcTestnet()),
        stellar: Object.freeze(new StellarTestnet()),
        sol: Object.freeze(new SolTestnet()),
        near: Object.freeze(new NearTestnet()),
        stx: Object.freeze(new StxTestnet()),
        susd: Object.freeze(new SUSDTestnet()),
        trx: Object.freeze(new TrxTestnet()),
        xrp: Object.freeze(new XrpTestnet()),
        xtz: Object.freeze(new XtzTestnet()),
        zCash: Object.freeze(new ZCashTestnet()),
    },
};
//# sourceMappingURL=data:application/json;base64,