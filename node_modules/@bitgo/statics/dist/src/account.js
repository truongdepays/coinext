"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tfiatToken = exports.fiatToken = exports.tavaxErc20 = exports.avaxErc20 = exports.tsolToken = exports.solToken = exports.teosToken = exports.eosToken = exports.talgoToken = exports.algoToken = exports.hederaCoin = exports.ttronToken = exports.tronToken = exports.tstellarToken = exports.stellarToken = exports.tceloToken = exports.celoToken = exports.erc20CompatibleAccountCoin = exports.terc1155 = exports.erc1155 = exports.terc721 = exports.erc721 = exports.terc20 = exports.erc20 = exports.account = exports.FiatToken = exports.AvaxERC20Token = exports.SolCoin = exports.EosCoin = exports.AlgoCoin = exports.HederaCoin = exports.StellarCoin = exports.CeloCoin = exports.Erc20CompatibleAccountCoin = exports.TronErc20Coin = exports.Erc1155Coin = exports.Erc721Coin = exports.Erc20Coin = exports.Base58ContractAddressDefinedToken = exports.ContractAddressDefinedToken = exports.AccountCoinToken = exports.AccountCoin = void 0;
const base_1 = require("./base");
const errors_1 = require("./errors");
const networks_1 = require("./networks");
/**
 * Account based coins, such as Ethereum, Stellar, or XRP.
 *
 * These types of coins maintain an "account balance" for each address on the network,
 * as opposed to the unspent transaction output model which maintains a record of all
 * "pieces" of coin which belong to an address.
 */
class AccountCoin extends base_1.BaseCoin {
    constructor(options) {
        super({
            ...options,
            kind: base_1.CoinKind.CRYPTO,
        });
        this.network = options.network;
    }
    requiredFeatures() {
        return new Set([base_1.CoinFeature.ACCOUNT_MODEL]);
    }
    disallowedFeatures() {
        return new Set([base_1.CoinFeature.UNSPENT_MODEL]);
    }
}
exports.AccountCoin = AccountCoin;
AccountCoin.DEFAULT_FEATURES = [
    base_1.CoinFeature.ACCOUNT_MODEL,
    base_1.CoinFeature.REQUIRES_BIG_NUMBER,
    base_1.CoinFeature.VALUELESS_TRANSFER,
    base_1.CoinFeature.TRANSACTION_DATA,
    base_1.CoinFeature.CUSTODY,
];
class AccountCoinToken extends AccountCoin {
    constructor(options) {
        super({
            ...options,
        });
    }
}
exports.AccountCoinToken = AccountCoinToken;
/**
 * Some blockchains support tokens which are defined by an address at which they have a smart contract deployed.
 * Examples are ERC20 tokens, and the equivalent on other chains.
 */
class ContractAddressDefinedToken extends AccountCoinToken {
    constructor(options) {
        super({
            ...options,
        });
        // valid ERC 20 contract addresses are "0x" followed by 40 lowercase hex characters
        if (!options.contractAddress.match(/^0x[a-f0-9]{40}$/)) {
            throw new errors_1.InvalidContractAddressError(options.name, options.contractAddress);
        }
        this.contractAddress = options.contractAddress;
    }
}
exports.ContractAddressDefinedToken = ContractAddressDefinedToken;
/**
 * ERC20 token addresses are Base58 formatted on some blockchains.
 */
class Base58ContractAddressDefinedToken extends AccountCoinToken {
    constructor(options) {
        super({
            ...options,
        });
        if (!/^[1-9A-HJ-NP-Za-km-z]{34}$/.test(options.contractAddress)) {
            throw new errors_1.InvalidContractAddressError(options.name, options.contractAddress);
        }
        this.contractAddress = options.contractAddress;
    }
}
exports.Base58ContractAddressDefinedToken = Base58ContractAddressDefinedToken;
/**
 * ERC 20 is a token standard for the Ethereum blockchain. They are similar to other account coins, but have a
 * contract address property which identifies the smart contract which defines the token.
 */
class Erc20Coin extends ContractAddressDefinedToken {
}
exports.Erc20Coin = Erc20Coin;
/**
 * ERC 721 is the non fungible token standard for the Ethereum blockchain.
 *
 * {@link https://eips.ethereum.org/EIPS/eip-721 EIP721}
 */
class Erc721Coin extends ContractAddressDefinedToken {
}
exports.Erc721Coin = Erc721Coin;
/**
 * ERC 1155 is the multi token standard for the Ethereum blockchain.
 *
 * {@link https://eips.ethereum.org/EIPS/eip-1155 EIP1155}
 */
class Erc1155Coin extends ContractAddressDefinedToken {
}
exports.Erc1155Coin = Erc1155Coin;
/**
 * The TRON blockchain supports tokens of the ERC20 standard similar to ETH ERC20 tokens.
 */
class TronErc20Coin extends Base58ContractAddressDefinedToken {
}
exports.TronErc20Coin = TronErc20Coin;
/**
 * Some blockchains have native coins which also support the ERC20 interface such as CELO.
 */
class Erc20CompatibleAccountCoin extends ContractAddressDefinedToken {
    constructor(options) {
        super({
            ...options,
            // These coins should not be classified as tokens as they are not children of other coins
            isToken: false,
        });
    }
}
exports.Erc20CompatibleAccountCoin = Erc20CompatibleAccountCoin;
/**
 * The CELO blockchain supports tokens of the ERC20 standard similar to ETH ERC20 tokens.
 */
class CeloCoin extends ContractAddressDefinedToken {
}
exports.CeloCoin = CeloCoin;
/**
 * The Stellar network supports tokens (non-native assets)
 * XLM is also known as the native asset.
 * Stellar tokens work similar to XLM, but the token name is determined by the chain,
 * the token code and the issuer account in the form: (t)xlm:<token>-<issuer>
 */
class StellarCoin extends AccountCoinToken {
    constructor(options) {
        super({
            ...options,
        });
        const domainPattern = /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$/;
        if (options.domain !== '' && !options.domain.match(domainPattern)) {
            throw new errors_1.InvalidDomainError(options.name, options.domain);
        }
        this.domain = options.domain;
    }
}
exports.StellarCoin = StellarCoin;
/**
 * The Hedera coin needs a client set with the node account Id.
 * It's an account based coin that needs the node account ID
 * where the transaction will be sent.
 */
class HederaCoin extends AccountCoinToken {
    constructor(options) {
        super({
            ...options,
        });
        this.nodeAccountId = options.nodeAccountId;
    }
}
exports.HederaCoin = HederaCoin;
/**
 * The Algo network supports tokens (assets)
 * Algo tokens work similar to native ALGO coin, but the token name is determined by
 * unique asset id on the chain. Internally, BitGo uses token identifiers of the format: (t)algo:<assetId>
 *
 */
class AlgoCoin extends AccountCoinToken {
    constructor(options) {
        super({
            ...options,
        });
        if (options.tokenURL) {
            try {
                new URL(options.tokenURL);
            }
            catch (ex) {
                throw new errors_1.InvalidDomainError(options.name, options.tokenURL);
            }
        }
        this.tokenURL = options.tokenURL;
    }
}
exports.AlgoCoin = AlgoCoin;
/**
 * The Eos network supports tokens
 * Eos tokens work similar to native Eos coin, but the token name is determined by
 * the contractName on the chain.
 *
 */
class EosCoin extends AccountCoinToken {
    constructor(options) {
        super({
            ...options,
        });
        this.contractName = options.contractName;
    }
}
exports.EosCoin = EosCoin;
/**
 * The Sol network supports tokens
 * Sol tokens work similar to native SOL coin, but the token name is determined by
 * the tokenAddress on the chain.
 *
 */
class SolCoin extends AccountCoinToken {
    constructor(options) {
        super({
            ...options,
        });
        this.tokenAddress = options.tokenAddress;
    }
}
exports.SolCoin = SolCoin;
/**
 * The AVAX C Chain network support tokens
 * AVAX C Chain Tokens are ERC20 coins
 */
class AvaxERC20Token extends ContractAddressDefinedToken {
    constructor(options) {
        super(options);
    }
}
exports.AvaxERC20Token = AvaxERC20Token;
/**
 * FIAT based tokens, such as USD, EUR, or YEN.
 */
class FiatToken extends base_1.BaseCoin {
    constructor(options) {
        super({
            ...options,
            kind: base_1.CoinKind.FIAT,
        });
        this.network = options.network;
    }
    requiredFeatures() {
        return new Set([base_1.CoinFeature.ACCOUNT_MODEL]);
    }
    disallowedFeatures() {
        return new Set([base_1.CoinFeature.UNSPENT_MODEL]);
    }
}
exports.FiatToken = FiatToken;
FiatToken.DEFAULT_FEATURES = [
    base_1.CoinFeature.ACCOUNT_MODEL,
    base_1.CoinFeature.REQUIRES_BIG_NUMBER,
    base_1.CoinFeature.VALUELESS_TRANSFER,
    base_1.CoinFeature.TRANSACTION_DATA,
    base_1.CoinFeature.CUSTODY,
];
/**
 * Factory function for account coin instances.
 *
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function account(name, fullName, network, decimalPlaces, asset, features = AccountCoin.DEFAULT_FEATURES, primaryKeyCurve = base_1.KeyCurve.Secp256k1, prefix = '', suffix = name.toUpperCase(), isToken = false) {
    return Object.freeze(new AccountCoin({
        name,
        fullName,
        network,
        prefix,
        suffix,
        features,
        decimalPlaces,
        isToken,
        asset,
        primaryKeyCurve,
    }));
}
exports.account = account;
/**
 * Factory function for erc20 token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Ethereum main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function erc20(name, fullName, decimalPlaces, contractAddress, asset, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.main.ethereum, primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return Object.freeze(new Erc20Coin({
        name,
        fullName,
        network,
        contractAddress,
        prefix,
        suffix,
        features,
        decimalPlaces,
        asset,
        isToken: true,
        primaryKeyCurve,
    }));
}
exports.erc20 = erc20;
/**
 * Factory function for testnet erc20 token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the Kovan test network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
function terc20(name, fullName, decimalPlaces, contractAddress, asset, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.test.kovan) {
    return erc20(name, fullName, decimalPlaces, contractAddress, asset, features, prefix, suffix, network);
}
exports.terc20 = terc20;
/**
 * Factory function for erc721 token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param contractAddress Contract address of this token
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Ethereum main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function erc721(name, fullName, contractAddress, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.main.ethereum, primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return Object.freeze(new Erc721Coin({
        name,
        fullName,
        network,
        contractAddress,
        prefix,
        suffix,
        features,
        decimalPlaces: 0,
        asset: base_1.UnderlyingAsset.ERC721,
        isToken: true,
        primaryKeyCurve,
    }));
}
exports.erc721 = erc721;
/**
 * Factory function for testnet erc721 token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param contractAddress Contract address of this token
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Goerli test network.
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function terc721(name, fullName, contractAddress, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.test.goerli, primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return erc721(name, fullName, contractAddress, features, prefix, suffix, network, primaryKeyCurve);
}
exports.terc721 = terc721;
/**
 * Factory function for erc1155 token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param contractAddress Contract address of this token
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Ethereum main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function erc1155(name, fullName, contractAddress, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.main.ethereum, primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return Object.freeze(new Erc1155Coin({
        name,
        fullName,
        network,
        contractAddress,
        prefix,
        suffix,
        features,
        decimalPlaces: 0,
        asset: base_1.UnderlyingAsset.ERC1155,
        isToken: true,
        primaryKeyCurve,
    }));
}
exports.erc1155 = erc1155;
/**
 * Factory function for testnet erc1155 token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param contractAddress Contract address of this token
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Goerli test network.
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function terc1155(name, fullName, contractAddress, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.test.goerli, primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return erc1155(name, fullName, contractAddress, features, prefix, suffix, network, primaryKeyCurve);
}
exports.terc1155 = terc1155;
/**
 * Factory function for ERC20-compatible account coin instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function erc20CompatibleAccountCoin(name, fullName, network, decimalPlaces, contractAddress, asset, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return Object.freeze(new Erc20CompatibleAccountCoin({
        name,
        fullName,
        network,
        contractAddress,
        prefix,
        suffix,
        features,
        decimalPlaces,
        asset,
        isToken: false,
        primaryKeyCurve,
    }));
}
exports.erc20CompatibleAccountCoin = erc20CompatibleAccountCoin;
/**
 * Factory function for celo token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to CELO main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function celoToken(name, fullName, decimalPlaces, contractAddress, asset, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.main.celo, primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return Object.freeze(new CeloCoin({
        name,
        fullName,
        network,
        contractAddress,
        prefix,
        suffix,
        features,
        decimalPlaces,
        asset,
        isToken: true,
        primaryKeyCurve,
    }));
}
exports.celoToken = celoToken;
/**
 * Factory function for testnet celo token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the testnet CELO network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
function tceloToken(name, fullName, decimalPlaces, contractAddress, asset, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.test.celo) {
    return celoToken(name, fullName, decimalPlaces, contractAddress, asset, features, prefix, suffix, network);
}
exports.tceloToken = tceloToken;
/**
 * Factory function for Stellar token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param domain Domain of the token issuer (used to access token information from the issuer's stellar.toml file)
 * See https://www.stellar.org/developers/guides/concepts/stellar-toml.html
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Stellar mainnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function stellarToken(name, fullName, decimalPlaces, asset, domain = '', features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.main.stellar, primaryKeyCurve = base_1.KeyCurve.Ed25519) {
    return Object.freeze(new StellarCoin({
        name,
        fullName,
        decimalPlaces,
        asset,
        domain,
        features,
        prefix,
        suffix,
        network,
        isToken: true,
        primaryKeyCurve,
    }));
}
exports.stellarToken = stellarToken;
/**
 * Factory function for testnet Stellar token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param domain Domain of the token issuer (used to access token information from the issuer's stellar.toml file)
 * See https://www.stellar.org/developers/guides/concepts/stellar-toml.html
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Stellar testnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
function tstellarToken(name, fullName, decimalPlaces, asset, domain = '', features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.test.stellar) {
    return stellarToken(name, fullName, decimalPlaces, asset, domain, features, prefix, suffix, network);
}
exports.tstellarToken = tstellarToken;
/**
 * Factory function for tron token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to TRON main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function tronToken(name, fullName, decimalPlaces, contractAddress, asset, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.main.trx, primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return Object.freeze(new TronErc20Coin({
        name,
        fullName,
        network,
        contractAddress,
        prefix,
        suffix,
        features,
        decimalPlaces,
        asset,
        isToken: true,
        primaryKeyCurve,
    }));
}
exports.tronToken = tronToken;
/**
 * Factory function for testnet tron token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the testnet TRON network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function ttronToken(name, fullName, decimalPlaces, contractAddress, asset, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.test.trx, primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return tronToken(name, fullName, decimalPlaces, contractAddress, asset, features, prefix, suffix, network, primaryKeyCurve);
}
exports.ttronToken = ttronToken;
/**
 * Factory function for Hedera coin instances
 *
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param nodeAccountId node account Id from which the transaction will be sent
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Hedera mainnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function hederaCoin(name, fullName, network, decimalPlaces, asset, nodeAccountId = '0.0.3', features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), primaryKeyCurve = base_1.KeyCurve.Ed25519) {
    return Object.freeze(new HederaCoin({
        name,
        fullName,
        decimalPlaces,
        asset,
        nodeAccountId,
        features,
        prefix,
        suffix,
        network,
        isToken: false,
        primaryKeyCurve,
    }));
}
exports.hederaCoin = hederaCoin;
/**
 * Factory function for ALGO token instances.
 *
 * @param name unique identifier of the token
 * @param alias (optional) alternative identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param tokenURL Optional asset Url for more informationa about the asset
 * See https://developer.algorand.org/docs/reference/transactions/#url
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to ALGO mainnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function algoToken(name, alias, fullName, decimalPlaces, asset, tokenURL = '', features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.main.algorand, primaryKeyCurve = base_1.KeyCurve.Ed25519) {
    return Object.freeze(new AlgoCoin({
        name,
        alias,
        fullName,
        decimalPlaces,
        asset,
        tokenURL: tokenURL,
        features,
        prefix,
        suffix,
        network,
        isToken: true,
        primaryKeyCurve,
    }));
}
exports.algoToken = algoToken;
/**
 * Factory function for testnet ALGO token instances.
 *
 * @param name unique identifier of the token
 * @param alias (optional) alternative identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param tokenURL Optional asset Url for more informationa about the asset
 * See https://developer.algorand.org/docs/reference/transactions/#url
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Algo testnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
function talgoToken(name, alias, fullName, decimalPlaces, asset, tokenURL = '', features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.test.algorand) {
    return algoToken(name, alias, fullName, decimalPlaces, asset, tokenURL, features, prefix, suffix, network);
}
exports.talgoToken = talgoToken;
/**
 * Factory function for eos token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractName Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to EOS main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function eosToken(name, fullName, decimalPlaces, contractName, asset, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.main.eos, primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return Object.freeze(new EosCoin({
        name,
        fullName,
        network,
        contractName,
        prefix,
        suffix,
        features,
        decimalPlaces,
        asset,
        isToken: true,
        primaryKeyCurve,
    }));
}
exports.eosToken = eosToken;
/**
 * Factory function for testnet eos token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the testnet EOS network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
function teosToken(name, fullName, decimalPlaces, contractName, asset, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.test.eos) {
    return eosToken(name, fullName, decimalPlaces, contractName, asset, features, prefix, suffix, network);
}
exports.teosToken = teosToken;
/**
 * Factory function for sol token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param tokenAddress Token address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to SOL main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES and REQUIRES_RESERVE defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function solToken(name, fullName, decimalPlaces, tokenAddress, asset, features = [...AccountCoin.DEFAULT_FEATURES, base_1.CoinFeature.REQUIRES_RESERVE], prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.main.sol, primaryKeyCurve = base_1.KeyCurve.Ed25519) {
    return Object.freeze(new SolCoin({
        name,
        fullName,
        network,
        tokenAddress,
        prefix,
        suffix,
        features,
        decimalPlaces,
        asset,
        isToken: true,
        primaryKeyCurve,
    }));
}
exports.solToken = solToken;
/**
 * Factory function for testnet sol token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param tokenAddress Token address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the testnet SOL network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES and REQUIRES_RESERVE defined in `AccountCoin`
 */
function tsolToken(name, fullName, decimalPlaces, tokenAddress, asset, features = [...AccountCoin.DEFAULT_FEATURES, base_1.CoinFeature.REQUIRES_RESERVE], prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.test.sol) {
    return solToken(name, fullName, decimalPlaces, tokenAddress, asset, features, prefix, suffix, network);
}
exports.tsolToken = tsolToken;
/**
 * Factory function for avaxErc20 token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to AvalancheC main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function avaxErc20(name, fullName, decimalPlaces, contractAddress, asset, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.main.avalancheC, primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return Object.freeze(new AvaxERC20Token({
        name,
        fullName,
        network,
        contractAddress,
        prefix,
        suffix,
        features,
        decimalPlaces,
        asset,
        isToken: true,
        primaryKeyCurve,
    }));
}
exports.avaxErc20 = avaxErc20;
/**
 * Factory function for testnet avaxErc20 token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the AvalancheC test network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function tavaxErc20(name, fullName, decimalPlaces, contractAddress, asset, features = AccountCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), network = networks_1.Networks.test.avalancheC, primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return avaxErc20(name, fullName, decimalPlaces, contractAddress, asset, features, prefix, suffix, network, primaryKeyCurve);
}
exports.tavaxErc20 = tavaxErc20;
/**
 * Factory function for FIAT currency instances.
 *
 * @param name unique identifier of the currency
 * @param fullName Complete human-readable name of the currency
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param network Network object for this coin
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function fiatToken(name, fullName, asset, decimalPlaces, network = networks_1.Networks.main.fiat, prefix = '', suffix = name.toUpperCase(), features = FiatToken.DEFAULT_FEATURES, isToken = true, primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return Object.freeze(new FiatToken({
        name,
        fullName,
        network,
        prefix,
        suffix,
        features,
        decimalPlaces,
        isToken,
        asset,
        primaryKeyCurve,
    }));
}
exports.fiatToken = fiatToken;
/**
 * Factory function for testnet FIAT currency instances.
 *
 * @param name unique identifier of the currency
 * @param fullName Complete human-readable name of the currency
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a currency.
 * @param decimalPlaces Number of decimal places this currency supports (divisibility exponent)
 */
function tfiatToken(name, fullName, asset, decimalPlaces, network = networks_1.Networks.test.fiat) {
    return fiatToken(name, fullName, asset, decimalPlaces, network);
}
exports.tfiatToken = tfiatToken;
//# sourceMappingURL=data:application/json;base64,