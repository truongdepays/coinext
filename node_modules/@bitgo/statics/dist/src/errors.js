"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConflictingCoinFeaturesError = exports.InvalidDomainError = exports.InvalidContractAddressError = exports.MissingRequiredCoinFeatureError = exports.DisallowedCoinFeatureError = exports.DuplicateCoinDefinitionError = exports.CoinNotDefinedError = void 0;
class BitGoStaticsError extends Error {
    constructor(message) {
        super(message);
        this.stack = new Error(message).stack;
        Object.setPrototypeOf(this, BitGoStaticsError.prototype);
    }
}
class CoinNotDefinedError extends BitGoStaticsError {
    constructor(coinName) {
        super(`coin '${coinName}' is not defined`);
        Object.setPrototypeOf(this, CoinNotDefinedError.prototype);
    }
}
exports.CoinNotDefinedError = CoinNotDefinedError;
class DuplicateCoinDefinitionError extends BitGoStaticsError {
    constructor(coinName) {
        super(`coin '${coinName}' is already defined`);
        Object.setPrototypeOf(this, DuplicateCoinDefinitionError.prototype);
    }
}
exports.DuplicateCoinDefinitionError = DuplicateCoinDefinitionError;
class DisallowedCoinFeatureError extends BitGoStaticsError {
    constructor(coinName, feature) {
        super(`coin feature '${feature}' is disallowed for coin ${coinName}.`);
        Object.setPrototypeOf(this, DisallowedCoinFeatureError.prototype);
    }
}
exports.DisallowedCoinFeatureError = DisallowedCoinFeatureError;
class MissingRequiredCoinFeatureError extends BitGoStaticsError {
    constructor(coinName, missingFeatures) {
        super(`Required coin feature(s) '${missingFeatures.join(', ')}' were not found for coin ${coinName}.`);
        Object.setPrototypeOf(this, MissingRequiredCoinFeatureError.prototype);
    }
}
exports.MissingRequiredCoinFeatureError = MissingRequiredCoinFeatureError;
class InvalidContractAddressError extends BitGoStaticsError {
    constructor(coinName, contractAddress) {
        super(`invalid contract address '${contractAddress}' for coin '${coinName}'`);
        Object.setPrototypeOf(this, InvalidContractAddressError.prototype);
    }
}
exports.InvalidContractAddressError = InvalidContractAddressError;
class InvalidDomainError extends BitGoStaticsError {
    constructor(coinName, domain) {
        super(`invalid domain '${domain}' for coin '${coinName}'`);
        Object.setPrototypeOf(this, InvalidDomainError.prototype);
    }
}
exports.InvalidDomainError = InvalidDomainError;
class ConflictingCoinFeaturesError extends BitGoStaticsError {
    constructor(coinName, conflictingFeatures) {
        super(`coin feature(s) for coin '${coinName}' cannot be both required and disallowed: ${conflictingFeatures.join(', ')}`);
        Object.setPrototypeOf(this, ConflictingCoinFeaturesError.prototype);
    }
}
exports.ConflictingCoinFeaturesError = ConflictingCoinFeaturesError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Vycm9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFNQSxNQUFNLGlCQUFrQixTQUFRLEtBQUs7SUFDbkMsWUFBbUIsT0FBZTtRQUNoQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUN0QyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzRCxDQUFDO0NBQ0Y7QUFFRCxNQUFhLG1CQUFvQixTQUFRLGlCQUFpQjtJQUN4RCxZQUFtQixRQUFnQjtRQUNqQyxLQUFLLENBQUMsU0FBUyxRQUFRLGtCQUFrQixDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDN0QsQ0FBQztDQUNGO0FBTEQsa0RBS0M7QUFFRCxNQUFhLDRCQUE2QixTQUFRLGlCQUFpQjtJQUNqRSxZQUFtQixRQUFnQjtRQUNqQyxLQUFLLENBQUMsU0FBUyxRQUFRLHNCQUFzQixDQUFDLENBQUM7UUFDL0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsNEJBQTRCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdEUsQ0FBQztDQUNGO0FBTEQsb0VBS0M7QUFFRCxNQUFhLDBCQUEyQixTQUFRLGlCQUFpQjtJQUMvRCxZQUFtQixRQUFnQixFQUFFLE9BQW9CO1FBQ3ZELEtBQUssQ0FBQyxpQkFBaUIsT0FBTyw0QkFBNEIsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUN2RSxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSwwQkFBMEIsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwRSxDQUFDO0NBQ0Y7QUFMRCxnRUFLQztBQUVELE1BQWEsK0JBQWdDLFNBQVEsaUJBQWlCO0lBQ3BFLFlBQW1CLFFBQWdCLEVBQUUsZUFBOEI7UUFDakUsS0FBSyxDQUFDLDZCQUE2QixlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUN2RyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSwrQkFBK0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN6RSxDQUFDO0NBQ0Y7QUFMRCwwRUFLQztBQUVELE1BQWEsMkJBQTRCLFNBQVEsaUJBQWlCO0lBQ2hFLFlBQW1CLFFBQWdCLEVBQUUsZUFBdUI7UUFDMUQsS0FBSyxDQUFDLDZCQUE2QixlQUFlLGVBQWUsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUM5RSxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSwyQkFBMkIsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyRSxDQUFDO0NBQ0Y7QUFMRCxrRUFLQztBQUVELE1BQWEsa0JBQW1CLFNBQVEsaUJBQWlCO0lBQ3ZELFlBQW1CLFFBQWdCLEVBQUUsTUFBYztRQUNqRCxLQUFLLENBQUMsbUJBQW1CLE1BQU0sZUFBZSxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVELENBQUM7Q0FDRjtBQUxELGdEQUtDO0FBRUQsTUFBYSw0QkFBNkIsU0FBUSxpQkFBaUI7SUFDakUsWUFBbUIsUUFBZ0IsRUFBRSxtQkFBa0M7UUFDckUsS0FBSyxDQUNILDZCQUE2QixRQUFRLDZDQUE2QyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDbkgsQ0FBQztRQUNGLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLDRCQUE0QixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7Q0FDRjtBQVBELG9FQU9DIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFYWNoIHN1YmNsYXNzIG5lZWRzIHRoZSBleHBsaWNpdCBPYmplY3Quc2V0UHJvdG90eXBlT2YoKSBzbyB0aGF0IGluc3RhbmNlb2Ygd2lsbCB3b3JrIGNvcnJlY3RseS5cbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQtd2lraS9ibG9iL21hc3Rlci9CcmVha2luZy1DaGFuZ2VzLm1kI2V4dGVuZGluZy1idWlsdC1pbnMtbGlrZS1lcnJvci1hcnJheS1hbmQtbWFwLW1heS1uby1sb25nZXItd29ya1xuICovXG5pbXBvcnQgeyBDb2luRmVhdHVyZSB9IGZyb20gJy4vYmFzZSc7XG5cbmNsYXNzIEJpdEdvU3RhdGljc0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBwdWJsaWMgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5zdGFjayA9IG5ldyBFcnJvcihtZXNzYWdlKS5zdGFjaztcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQml0R29TdGF0aWNzRXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29pbk5vdERlZmluZWRFcnJvciBleHRlbmRzIEJpdEdvU3RhdGljc0Vycm9yIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvaW5OYW1lOiBzdHJpbmcpIHtcbiAgICBzdXBlcihgY29pbiAnJHtjb2luTmFtZX0nIGlzIG5vdCBkZWZpbmVkYCk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENvaW5Ob3REZWZpbmVkRXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRHVwbGljYXRlQ29pbkRlZmluaXRpb25FcnJvciBleHRlbmRzIEJpdEdvU3RhdGljc0Vycm9yIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvaW5OYW1lOiBzdHJpbmcpIHtcbiAgICBzdXBlcihgY29pbiAnJHtjb2luTmFtZX0nIGlzIGFscmVhZHkgZGVmaW5lZGApO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBEdXBsaWNhdGVDb2luRGVmaW5pdGlvbkVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERpc2FsbG93ZWRDb2luRmVhdHVyZUVycm9yIGV4dGVuZHMgQml0R29TdGF0aWNzRXJyb3Ige1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29pbk5hbWU6IHN0cmluZywgZmVhdHVyZTogQ29pbkZlYXR1cmUpIHtcbiAgICBzdXBlcihgY29pbiBmZWF0dXJlICcke2ZlYXR1cmV9JyBpcyBkaXNhbGxvd2VkIGZvciBjb2luICR7Y29pbk5hbWV9LmApO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBEaXNhbGxvd2VkQ29pbkZlYXR1cmVFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNaXNzaW5nUmVxdWlyZWRDb2luRmVhdHVyZUVycm9yIGV4dGVuZHMgQml0R29TdGF0aWNzRXJyb3Ige1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29pbk5hbWU6IHN0cmluZywgbWlzc2luZ0ZlYXR1cmVzOiBDb2luRmVhdHVyZVtdKSB7XG4gICAgc3VwZXIoYFJlcXVpcmVkIGNvaW4gZmVhdHVyZShzKSAnJHttaXNzaW5nRmVhdHVyZXMuam9pbignLCAnKX0nIHdlcmUgbm90IGZvdW5kIGZvciBjb2luICR7Y29pbk5hbWV9LmApO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBNaXNzaW5nUmVxdWlyZWRDb2luRmVhdHVyZUVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEludmFsaWRDb250cmFjdEFkZHJlc3NFcnJvciBleHRlbmRzIEJpdEdvU3RhdGljc0Vycm9yIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvaW5OYW1lOiBzdHJpbmcsIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nKSB7XG4gICAgc3VwZXIoYGludmFsaWQgY29udHJhY3QgYWRkcmVzcyAnJHtjb250cmFjdEFkZHJlc3N9JyBmb3IgY29pbiAnJHtjb2luTmFtZX0nYCk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRDb250cmFjdEFkZHJlc3NFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnZhbGlkRG9tYWluRXJyb3IgZXh0ZW5kcyBCaXRHb1N0YXRpY3NFcnJvciB7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb2luTmFtZTogc3RyaW5nLCBkb21haW46IHN0cmluZykge1xuICAgIHN1cGVyKGBpbnZhbGlkIGRvbWFpbiAnJHtkb21haW59JyBmb3IgY29pbiAnJHtjb2luTmFtZX0nYCk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWREb21haW5FcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25mbGljdGluZ0NvaW5GZWF0dXJlc0Vycm9yIGV4dGVuZHMgQml0R29TdGF0aWNzRXJyb3Ige1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29pbk5hbWU6IHN0cmluZywgY29uZmxpY3RpbmdGZWF0dXJlczogQ29pbkZlYXR1cmVbXSkge1xuICAgIHN1cGVyKFxuICAgICAgYGNvaW4gZmVhdHVyZShzKSBmb3IgY29pbiAnJHtjb2luTmFtZX0nIGNhbm5vdCBiZSBib3RoIHJlcXVpcmVkIGFuZCBkaXNhbGxvd2VkOiAke2NvbmZsaWN0aW5nRmVhdHVyZXMuam9pbignLCAnKX1gXG4gICAgKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ29uZmxpY3RpbmdDb2luRmVhdHVyZXNFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG4iXX0=