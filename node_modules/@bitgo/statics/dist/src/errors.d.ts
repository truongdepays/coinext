/**
 * Each subclass needs the explicit Object.setPrototypeOf() so that instanceof will work correctly.
 * See https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
 */
import { CoinFeature } from './base';
declare class BitGoStaticsError extends Error {
    constructor(message: string);
}
export declare class CoinNotDefinedError extends BitGoStaticsError {
    constructor(coinName: string);
}
export declare class DuplicateCoinDefinitionError extends BitGoStaticsError {
    constructor(coinName: string);
}
export declare class DisallowedCoinFeatureError extends BitGoStaticsError {
    constructor(coinName: string, feature: CoinFeature);
}
export declare class MissingRequiredCoinFeatureError extends BitGoStaticsError {
    constructor(coinName: string, missingFeatures: CoinFeature[]);
}
export declare class InvalidContractAddressError extends BitGoStaticsError {
    constructor(coinName: string, contractAddress: string);
}
export declare class InvalidDomainError extends BitGoStaticsError {
    constructor(coinName: string, domain: string);
}
export declare class ConflictingCoinFeaturesError extends BitGoStaticsError {
    constructor(coinName: string, conflictingFeatures: CoinFeature[]);
}
export {};
//# sourceMappingURL=errors.d.ts.map