"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PublicKey = void 0;

var _context = require("./context");

var _constants = require("./constants");

var _assert = _interopRequireDefault(require("assert"));

var _utils = require("./helpers/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PublicKey {
  constructor(value) {
    _defineProperty(this, "value", void 0);

    this.value = value;
  }

  static fromPrivateKey(privateKey) {
    return privateKey.toPublicKey();
  }

  static fromBytes(bytes) {
    const context = (0, _context.getContext)();
    const publicKey = new context.PublicKey();

    if (!_utils.EMPTY_PUBLIC_KEY.equals(bytes)) {
      publicKey.deserialize(bytes);
    }

    return new PublicKey(publicKey);
  }

  static fromHex(value) {
    value = value.replace("0x", "");
    (0, _assert.default)(value.length === _constants.PUBLIC_KEY_LENGTH * 2);
    const context = (0, _context.getContext)();
    return new PublicKey(context.deserializeHexStrToPublicKey(value));
  }

  static fromPublicKeyType(value) {
    return new PublicKey(value);
  }

  add(other) {
    const agg = new PublicKey(this.value.clone());
    agg.value.add(other.value);
    return agg;
  }

  verifyMessage(signature, messageHash) {
    return this.value.verify(signature.getValue(), messageHash);
  }

  toBytesCompressed() {
    return Buffer.from(this.value.serialize());
  }

  toHexString() {
    return "0x".concat(this.toBytesCompressed().toString("hex"));
  }

  getValue() {
    return this.value;
  }

}

exports.PublicKey = PublicKey;