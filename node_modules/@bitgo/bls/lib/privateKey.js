"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PrivateKey = void 0;

var _constants = require("./constants");

var _assert = _interopRequireDefault(require("assert"));

var _blsKeygen = require("@chainsafe/bls-keygen");

var _context = require("./context");

var _publicKey = require("./publicKey");

var _signature = require("./signature");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PrivateKey {
  constructor(value) {
    _defineProperty(this, "value", void 0);

    this.value = value;
  }

  static fromBytes(bytes) {
    (0, _assert.default)(bytes.length === _constants.SECRET_KEY_LENGTH, "Private key should have 32 bytes");
    const context = (0, _context.getContext)();
    const secretKey = new context.SecretKey();
    secretKey.deserialize(Buffer.from(bytes));
    return new PrivateKey(secretKey);
  }

  static fromHexString(value) {
    value = value.replace("0x", "");
    (0, _assert.default)(value.length === _constants.SECRET_KEY_LENGTH * 2, "secret key must have 32 bytes");
    const context = (0, _context.getContext)();
    return new PrivateKey(context.deserializeHexStrToSecretKey(value));
  }

  static fromInt(num) {
    const context = (0, _context.getContext)();
    const secretKey = new context.SecretKey();
    secretKey.setInt(num);
    return new PrivateKey(secretKey);
  }

  static random() {
    const randomKey = (0, _blsKeygen.generateRandomSecretKey)();
    return this.fromBytes(randomKey);
  }

  getValue() {
    return this.value;
  } // public sign(message: Uint8Array): Signature {
  //   return Signature.fromValue(this.value.sign(message));
  // }


  signMessage(message) {
    return _signature.Signature.fromValue(this.value.sign(message));
  }

  toPublicKey() {
    return _publicKey.PublicKey.fromPublicKeyType(this.value.getPublicKey());
  }

  toBytes() {
    return Buffer.from(this.value.serialize());
  }

  toHexString() {
    return "0x".concat(this.value.serializeToHexStr());
  }

}

exports.PrivateKey = PrivateKey;