"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiResponseError = exports.InvalidTransactionError = exports.InvalidKeyPathError = exports.ErrorNoInputToRecover = exports.StellarFederationUserNotFoundError = exports.EthereumLibraryUnavailableError = exports.AddressGenerationError = exports.KeyRecoveryServiceError = exports.InvalidPaymentIdError = exports.InvalidMemoIdError = exports.BlockExplorerUnavailable = exports.MethodNotImplementedError = exports.WalletRecoveryUnsupported = exports.InvalidAddressDerivationPropertyError = exports.UnexpectedAddressError = exports.InvalidAddressVerificationObjectPropertyError = exports.InvalidAddressError = exports.UnsupportedAddressTypeError = exports.P2trUnsupportedError = exports.P2wshUnsupportedError = exports.P2shP2wshUnsupportedError = exports.AddressTypeChainMismatchError = exports.UnsupportedCoinError = exports.NodeEnvironmentError = exports.TlsConfigurationError = exports.BitGoJsError = void 0;
// Descriptive error types for common issues which may arise
// during the operation of BitGoJS or BitGoExpress
const sdk_core_1 = require("@bitgo/sdk-core");
Object.defineProperty(exports, "BitGoJsError", { enumerable: true, get: function () { return sdk_core_1.BitGoJsError; } });
class TlsConfigurationError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'TLS is configuration is invalid');
    }
}
exports.TlsConfigurationError = TlsConfigurationError;
class NodeEnvironmentError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'NODE_ENV is invalid for the current bitgo environment');
    }
}
exports.NodeEnvironmentError = NodeEnvironmentError;
class UnsupportedCoinError extends sdk_core_1.BitGoJsError {
    constructor(coin) {
        super(`Coin or token type ${coin} not supported or not compiled. Please be sure that you are using the latest version of BitGoJS.`);
    }
}
exports.UnsupportedCoinError = UnsupportedCoinError;
class AddressTypeChainMismatchError extends sdk_core_1.BitGoJsError {
    constructor(addressType, chain) {
        super(`address type ${addressType} does not correspond to chain ${chain}`);
    }
}
exports.AddressTypeChainMismatchError = AddressTypeChainMismatchError;
class P2shP2wshUnsupportedError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'p2shP2wsh not supported by this coin');
    }
}
exports.P2shP2wshUnsupportedError = P2shP2wshUnsupportedError;
class P2wshUnsupportedError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'p2wsh not supported by this coin');
    }
}
exports.P2wshUnsupportedError = P2wshUnsupportedError;
class P2trUnsupportedError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'p2tr not supported by this coin');
    }
}
exports.P2trUnsupportedError = P2trUnsupportedError;
class UnsupportedAddressTypeError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'invalid address type');
    }
}
exports.UnsupportedAddressTypeError = UnsupportedAddressTypeError;
class InvalidAddressError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'invalid address');
    }
}
exports.InvalidAddressError = InvalidAddressError;
class InvalidAddressVerificationObjectPropertyError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'address validation failure');
    }
}
exports.InvalidAddressVerificationObjectPropertyError = InvalidAddressVerificationObjectPropertyError;
class UnexpectedAddressError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'address validation failure');
    }
}
exports.UnexpectedAddressError = UnexpectedAddressError;
class InvalidAddressDerivationPropertyError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'address chain and/or index are invalid');
    }
}
exports.InvalidAddressDerivationPropertyError = InvalidAddressDerivationPropertyError;
class WalletRecoveryUnsupported extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'wallet recovery is not supported by this coin');
    }
}
exports.WalletRecoveryUnsupported = WalletRecoveryUnsupported;
class MethodNotImplementedError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'method not implemented');
    }
}
exports.MethodNotImplementedError = MethodNotImplementedError;
class BlockExplorerUnavailable extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'third-party blockexplorer not responding');
    }
}
exports.BlockExplorerUnavailable = BlockExplorerUnavailable;
class InvalidMemoIdError extends InvalidAddressError {
    constructor(message) {
        super(message || 'invalid memo id');
    }
}
exports.InvalidMemoIdError = InvalidMemoIdError;
class InvalidPaymentIdError extends InvalidAddressError {
    constructor(message) {
        super(message || 'invalid payment id');
    }
}
exports.InvalidPaymentIdError = InvalidPaymentIdError;
class KeyRecoveryServiceError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'key recovery service encountered an error');
    }
}
exports.KeyRecoveryServiceError = KeyRecoveryServiceError;
class AddressGenerationError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'address generation failed');
    }
}
exports.AddressGenerationError = AddressGenerationError;
class EthereumLibraryUnavailableError extends sdk_core_1.BitGoJsError {
    constructor(packageName) {
        super(`Ethereum library required for operation is not available. Please install "${(packageName)}".`);
    }
}
exports.EthereumLibraryUnavailableError = EthereumLibraryUnavailableError;
class StellarFederationUserNotFoundError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'account not found');
    }
}
exports.StellarFederationUserNotFoundError = StellarFederationUserNotFoundError;
class ErrorNoInputToRecover extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'No input to recover - aborting!');
    }
}
exports.ErrorNoInputToRecover = ErrorNoInputToRecover;
class InvalidKeyPathError extends sdk_core_1.BitGoJsError {
    constructor(keyPath) {
        super(`invalid keypath: ${keyPath}`);
    }
}
exports.InvalidKeyPathError = InvalidKeyPathError;
class InvalidTransactionError extends sdk_core_1.BitGoJsError {
    constructor(message) {
        super(message || 'Invalid transaction');
    }
}
exports.InvalidTransactionError = InvalidTransactionError;
class ApiResponseError extends sdk_core_1.BitGoJsError {
    constructor(message, status, result, invalidToken, needsOTP) {
        super(message);
        this.message = message;
        this.status = status;
        this.result = result;
        this.invalidToken = invalidToken;
        this.needsOTP = needsOTP;
    }
}
exports.ApiResponseError = ApiResponseError;
//# sourceMappingURL=data:application/json;base64,