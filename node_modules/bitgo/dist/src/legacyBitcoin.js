"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.address = exports.networks = exports.hdPath = exports.HDNode = exports.makeRandomKey = void 0;
/**
 * This file contains a compatability layer for some deprecated types and helper methods
 *
 * @prettier
 */
const utxolib = require("@bitgo/utxo-lib");
const bip32 = require("bip32");
const sdk_api_1 = require("@bitgo/sdk-api");
const bitcoinUtil = require("./bitcoin");
function createECPairCompat(ecPair) {
    return Object.assign(ecPair, {
        getPublicKeyBuffer() {
            return ecPair.publicKey;
        },
    });
}
function makeRandomKey() {
    return createECPairCompat(bitcoinUtil.makeRandomKey());
}
exports.makeRandomKey = makeRandomKey;
/**
 * Implementation of legacy "HDNode" class as used by certain components
 */
class HDNode {
    constructor(bip32) {
        this.bip32 = bip32;
    }
    get publicKey() {
        return this.bip32.publicKey;
    }
    get privateKey() {
        return this.bip32.privateKey;
    }
    static fromSeedBuffer(buf) {
        return new HDNode(bip32.fromSeed(buf));
    }
    static fromBase58(str) {
        return new HDNode(bip32.fromBase58(str));
    }
    isNeutered() {
        return this.bip32.isNeutered();
    }
    neutered() {
        return new HDNode(this.bip32.neutered());
    }
    toBase58() {
        return this.bip32.toBase58();
    }
    derivePath(p) {
        return new HDNode(this.bip32.derivePath(sdk_api_1.sanitizeLegacyPath(p)));
    }
}
exports.HDNode = HDNode;
function hdPath(hdNode) {
    return {
        derive(path) {
            return hdNode.derivePath(path);
        },
        deriveKey(path) {
            const node = hdNode.derivePath(path);
            if (node.privateKey) {
                return createECPairCompat(utxolib.ECPair.fromPrivateKey(node.privateKey));
            }
            else {
                return createECPairCompat(utxolib.ECPair.fromPublicKey(node.publicKey));
            }
        },
    };
}
exports.hdPath = hdPath;
exports.networks = utxolib.networks;
exports.address = {
    fromBase58Check(addr) {
        return utxolib.address.fromBase58Check(addr, utxolib.networks.bitcoin);
    },
    toBase58Check(hash, version) {
        return utxolib.address.toBase58Check(hash, version, utxolib.networks.bitcoin);
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnYWN5Qml0Y29pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sZWdhY3lCaXRjb2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7O0dBSUc7QUFDSCwyQ0FBMkM7QUFDM0MsK0JBQStCO0FBQy9CLDRDQUFvRDtBQUVwRCx5Q0FBeUM7QUFNekMsU0FBUyxrQkFBa0IsQ0FBQyxNQUErQjtJQUN6RCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQzNCLGtCQUFrQjtZQUNoQixPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDMUIsQ0FBQztLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxTQUFnQixhQUFhO0lBQzNCLE9BQU8sa0JBQWtCLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7QUFDekQsQ0FBQztBQUZELHNDQUVDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLE1BQU07SUFDakIsWUFBb0IsS0FBMkI7UUFBM0IsVUFBSyxHQUFMLEtBQUssQ0FBc0I7SUFBRyxDQUFDO0lBRW5ELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7SUFDL0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBVztRQUN0QyxPQUFPLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFXO1FBQ2xDLE9BQU8sSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFTSxVQUFVO1FBQ2YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFTSxRQUFRO1FBQ2IsT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVNLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVNLFVBQVUsQ0FBQyxDQUFTO1FBQ3pCLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsNEJBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Q0FDRjtBQWxDRCx3QkFrQ0M7QUFPRCxTQUFnQixNQUFNLENBQUMsTUFBYztJQUNuQyxPQUFPO1FBQ0wsTUFBTSxDQUFDLElBQVk7WUFDakIsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLENBQUM7UUFFRCxTQUFTLENBQUMsSUFBWTtZQUNwQixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDbkIsT0FBTyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQzthQUMzRTtpQkFBTTtnQkFDTCxPQUFPLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2FBQ3pFO1FBQ0gsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBZkQsd0JBZUM7QUFFWSxRQUFBLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO0FBRTVCLFFBQUEsT0FBTyxHQUFHO0lBQ3JCLGVBQWUsQ0FBQyxJQUFZO1FBQzFCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFZLEVBQUUsT0FBZTtRQUN6QyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoRixDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIGEgY29tcGF0YWJpbGl0eSBsYXllciBmb3Igc29tZSBkZXByZWNhdGVkIHR5cGVzIGFuZCBoZWxwZXIgbWV0aG9kc1xuICpcbiAqIEBwcmV0dGllclxuICovXG5pbXBvcnQgKiBhcyB1dHhvbGliIGZyb20gJ0BiaXRnby91dHhvLWxpYic7XG5pbXBvcnQgKiBhcyBiaXAzMiBmcm9tICdiaXAzMic7XG5pbXBvcnQgeyBzYW5pdGl6ZUxlZ2FjeVBhdGggfSBmcm9tICdAYml0Z28vc2RrLWFwaSc7XG5cbmltcG9ydCAqIGFzIGJpdGNvaW5VdGlsIGZyb20gJy4vYml0Y29pbic7XG5cbmludGVyZmFjZSBFQ1BhaXJDb21wYXQgZXh0ZW5kcyB1dHhvbGliLkVDUGFpckludGVyZmFjZSB7XG4gIGdldFB1YmxpY0tleUJ1ZmZlcigpOiBCdWZmZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVDUGFpckNvbXBhdChlY1BhaXI6IHV0eG9saWIuRUNQYWlySW50ZXJmYWNlKTogRUNQYWlyQ29tcGF0IHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZWNQYWlyLCB7XG4gICAgZ2V0UHVibGljS2V5QnVmZmVyKCk6IEJ1ZmZlciB7XG4gICAgICByZXR1cm4gZWNQYWlyLnB1YmxpY0tleTtcbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VSYW5kb21LZXkoKTogRUNQYWlyQ29tcGF0IHtcbiAgcmV0dXJuIGNyZWF0ZUVDUGFpckNvbXBhdChiaXRjb2luVXRpbC5tYWtlUmFuZG9tS2V5KCkpO1xufVxuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIGxlZ2FjeSBcIkhETm9kZVwiIGNsYXNzIGFzIHVzZWQgYnkgY2VydGFpbiBjb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBIRE5vZGUge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJpcDMyOiBiaXAzMi5CSVAzMkludGVyZmFjZSkge31cblxuICBnZXQgcHVibGljS2V5KCk6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuYmlwMzIucHVibGljS2V5O1xuICB9XG5cbiAgZ2V0IHByaXZhdGVLZXkoKTogQnVmZmVyIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5iaXAzMi5wcml2YXRlS2V5O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBmcm9tU2VlZEJ1ZmZlcihidWY6IEJ1ZmZlcik6IEhETm9kZSB7XG4gICAgcmV0dXJuIG5ldyBIRE5vZGUoYmlwMzIuZnJvbVNlZWQoYnVmKSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZyb21CYXNlNTgoc3RyOiBzdHJpbmcpOiBIRE5vZGUge1xuICAgIHJldHVybiBuZXcgSEROb2RlKGJpcDMyLmZyb21CYXNlNTgoc3RyKSk7XG4gIH1cblxuICBwdWJsaWMgaXNOZXV0ZXJlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5iaXAzMi5pc05ldXRlcmVkKCk7XG4gIH1cblxuICBwdWJsaWMgbmV1dGVyZWQoKTogSEROb2RlIHtcbiAgICByZXR1cm4gbmV3IEhETm9kZSh0aGlzLmJpcDMyLm5ldXRlcmVkKCkpO1xuICB9XG5cbiAgcHVibGljIHRvQmFzZTU4KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYmlwMzIudG9CYXNlNTgoKTtcbiAgfVxuXG4gIHB1YmxpYyBkZXJpdmVQYXRoKHA6IHN0cmluZyk6IEhETm9kZSB7XG4gICAgcmV0dXJuIG5ldyBIRE5vZGUodGhpcy5iaXAzMi5kZXJpdmVQYXRoKHNhbml0aXplTGVnYWN5UGF0aChwKSkpO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVyaXZhYmxlIHtcbiAgZGVyaXZlS2V5KHBhdGg6IHN0cmluZyk6IEVDUGFpckNvbXBhdDtcbiAgZGVyaXZlKHBhdGg6IHN0cmluZyk6IEhETm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhkUGF0aChoZE5vZGU6IEhETm9kZSk6IERlcml2YWJsZSB7XG4gIHJldHVybiB7XG4gICAgZGVyaXZlKHBhdGg6IHN0cmluZyk6IEhETm9kZSB7XG4gICAgICByZXR1cm4gaGROb2RlLmRlcml2ZVBhdGgocGF0aCk7XG4gICAgfSxcblxuICAgIGRlcml2ZUtleShwYXRoOiBzdHJpbmcpOiBFQ1BhaXJDb21wYXQge1xuICAgICAgY29uc3Qgbm9kZSA9IGhkTm9kZS5kZXJpdmVQYXRoKHBhdGgpO1xuICAgICAgaWYgKG5vZGUucHJpdmF0ZUtleSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRUNQYWlyQ29tcGF0KHV0eG9saWIuRUNQYWlyLmZyb21Qcml2YXRlS2V5KG5vZGUucHJpdmF0ZUtleSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVDUGFpckNvbXBhdCh1dHhvbGliLkVDUGFpci5mcm9tUHVibGljS2V5KG5vZGUucHVibGljS2V5KSk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IG5ldHdvcmtzID0gdXR4b2xpYi5uZXR3b3JrcztcblxuZXhwb3J0IGNvbnN0IGFkZHJlc3MgPSB7XG4gIGZyb21CYXNlNThDaGVjayhhZGRyOiBzdHJpbmcpOiB7IGhhc2g6IEJ1ZmZlcjsgdmVyc2lvbjogbnVtYmVyIH0ge1xuICAgIHJldHVybiB1dHhvbGliLmFkZHJlc3MuZnJvbUJhc2U1OENoZWNrKGFkZHIsIHV0eG9saWIubmV0d29ya3MuYml0Y29pbik7XG4gIH0sXG5cbiAgdG9CYXNlNThDaGVjayhoYXNoOiBCdWZmZXIsIHZlcnNpb246IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHV0eG9saWIuYWRkcmVzcy50b0Jhc2U1OENoZWNrKGhhc2gsIHZlcnNpb24sIHV0eG9saWIubmV0d29ya3MuYml0Y29pbik7XG4gIH0sXG59O1xuIl19