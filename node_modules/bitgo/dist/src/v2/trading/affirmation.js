"use strict";
/**
 * @prettier
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Affirmation = exports.AffirmationStatus = void 0;
var AffirmationStatus;
(function (AffirmationStatus) {
    AffirmationStatus["PENDING"] = "pending";
    AffirmationStatus["OVERDUE"] = "overdue";
    AffirmationStatus["REJECTED"] = "rejected";
    AffirmationStatus["AFFIRMED"] = "affirmed";
    AffirmationStatus["FAILED"] = "failed";
    AffirmationStatus["CANCELED"] = "canceled";
})(AffirmationStatus = exports.AffirmationStatus || (exports.AffirmationStatus = {}));
class Affirmation {
    constructor(affirmationData, bitgo, enterpriseId) {
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.updateAffirmationData(affirmationData);
    }
    /**
     * Affirms a pending affirmation, authorizing the settlement
     * @param payload payload authorizing the movement of funds from a trading account
     * @param signature signature of the payload with the user key of the trading account
     */
    async affirm(payload, signature) {
        const body = {
            payload: JSON.stringify(payload),
            signature: signature,
        };
        return await this.updateStatus(AffirmationStatus.AFFIRMED, body);
    }
    /**
     * Rejects a pending affirmation, cancelling the settlement
     */
    async reject() {
        return this.updateStatus(AffirmationStatus.REJECTED, null);
    }
    /**
     * Cancels a pending affirmation, cancelling the settlement
     */
    async cancel() {
        return this.updateStatus(AffirmationStatus.CANCELED, null);
    }
    async updateStatus(status, body) {
        const bodyWithStatus = { status, ...body };
        const url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${this.partyAccountId}/affirmations/${this.id}`);
        const response = await this.bitgo.put(url).send(bodyWithStatus).result();
        this.updateAffirmationData(response);
    }
    updateAffirmationData(affirmationData) {
        this.id = affirmationData.id;
        this.partyAccountId = affirmationData.partyAccountId;
        this.status = affirmationData.status;
        this.settlement = affirmationData.settlement;
        this.lock = affirmationData.lock;
        this.payload = affirmationData.payload;
        this.createdAt = new Date(affirmationData.createdAt);
        this.expireAt = new Date(affirmationData.expireAt);
    }
}
exports.Affirmation = Affirmation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWZmaXJtYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdjIvdHJhZGluZy9hZmZpcm1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7OztBQU9ILElBQVksaUJBT1g7QUFQRCxXQUFZLGlCQUFpQjtJQUMzQix3Q0FBbUIsQ0FBQTtJQUNuQix3Q0FBbUIsQ0FBQTtJQUNuQiwwQ0FBcUIsQ0FBQTtJQUNyQiwwQ0FBcUIsQ0FBQTtJQUNyQixzQ0FBaUIsQ0FBQTtJQUNqQiwwQ0FBcUIsQ0FBQTtBQUN2QixDQUFDLEVBUFcsaUJBQWlCLEdBQWpCLHlCQUFpQixLQUFqQix5QkFBaUIsUUFPNUI7QUFFRCxNQUFhLFdBQVc7SUFhdEIsWUFBWSxlQUFvQixFQUFFLEtBQVksRUFBRSxZQUFvQjtRQUNsRSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUVqQyxJQUFJLENBQUMscUJBQXFCLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQWdCLEVBQUUsU0FBaUI7UUFDOUMsTUFBTSxJQUFJLEdBQUc7WUFDWCxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7WUFDaEMsU0FBUyxFQUFFLFNBQVM7U0FDckIsQ0FBQztRQUVGLE9BQU8sTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsTUFBTTtRQUNWLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLE1BQU07UUFDVixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFTyxLQUFLLENBQUMsWUFBWSxDQUFDLE1BQXlCLEVBQUUsSUFBVTtRQUM5RCxNQUFNLGNBQWMsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDO1FBQzNDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQ3JDLDRCQUE0QixJQUFJLENBQUMsWUFBWSxZQUFZLElBQUksQ0FBQyxjQUFjLGlCQUFpQixJQUFJLENBQUMsRUFBRSxFQUFFLENBQ3ZHLENBQUM7UUFDRixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN6RSxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVPLHFCQUFxQixDQUFDLGVBQW9CO1FBQ2hELElBQUksQ0FBQyxFQUFFLEdBQUcsZUFBZSxDQUFDLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsY0FBYyxHQUFHLGVBQWUsQ0FBQyxjQUFjLENBQUM7UUFDckQsSUFBSSxDQUFDLE1BQU0sR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUFDLFVBQVUsQ0FBQztRQUM3QyxJQUFJLENBQUMsSUFBSSxHQUFHLGVBQWUsQ0FBQyxJQUFZLENBQUM7UUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDRjtBQW5FRCxrQ0FtRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcmV0dGllclxuICovXG5cbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vLi4vYml0Z28nO1xuXG5pbXBvcnQgeyBMb2NrIH0gZnJvbSAnLi9sb2NrJztcbmltcG9ydCB7IFBheWxvYWQgfSBmcm9tICcuL3BheWxvYWQnO1xuXG5leHBvcnQgZW51bSBBZmZpcm1hdGlvblN0YXR1cyB7XG4gIFBFTkRJTkcgPSAncGVuZGluZycsXG4gIE9WRVJEVUUgPSAnb3ZlcmR1ZScsXG4gIFJFSkVDVEVEID0gJ3JlamVjdGVkJyxcbiAgQUZGSVJNRUQgPSAnYWZmaXJtZWQnLFxuICBGQUlMRUQgPSAnZmFpbGVkJyxcbiAgQ0FOQ0VMRUQgPSAnY2FuY2VsZWQnLFxufVxuXG5leHBvcnQgY2xhc3MgQWZmaXJtYXRpb24ge1xuICBwcml2YXRlIGJpdGdvOiBCaXRHbztcbiAgcHJpdmF0ZSBlbnRlcnByaXNlSWQ6IHN0cmluZztcblxuICBwdWJsaWMgaWQ/OiBzdHJpbmc7XG4gIHB1YmxpYyBwYXJ0eUFjY291bnRJZD86IHN0cmluZztcbiAgcHVibGljIHN0YXR1cz86IEFmZmlybWF0aW9uU3RhdHVzO1xuICBwdWJsaWMgc2V0dGxlbWVudD86IHN0cmluZztcbiAgcHVibGljIGxvY2s/OiBMb2NrO1xuICBwdWJsaWMgcGF5bG9hZD86IHN0cmluZztcbiAgcHVibGljIGNyZWF0ZWRBdD86IERhdGU7XG4gIHB1YmxpYyBleHBpcmVBdD86IERhdGU7XG5cbiAgY29uc3RydWN0b3IoYWZmaXJtYXRpb25EYXRhOiBhbnksIGJpdGdvOiBCaXRHbywgZW50ZXJwcmlzZUlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmJpdGdvID0gYml0Z287XG4gICAgdGhpcy5lbnRlcnByaXNlSWQgPSBlbnRlcnByaXNlSWQ7XG5cbiAgICB0aGlzLnVwZGF0ZUFmZmlybWF0aW9uRGF0YShhZmZpcm1hdGlvbkRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmZmlybXMgYSBwZW5kaW5nIGFmZmlybWF0aW9uLCBhdXRob3JpemluZyB0aGUgc2V0dGxlbWVudFxuICAgKiBAcGFyYW0gcGF5bG9hZCBwYXlsb2FkIGF1dGhvcml6aW5nIHRoZSBtb3ZlbWVudCBvZiBmdW5kcyBmcm9tIGEgdHJhZGluZyBhY2NvdW50XG4gICAqIEBwYXJhbSBzaWduYXR1cmUgc2lnbmF0dXJlIG9mIHRoZSBwYXlsb2FkIHdpdGggdGhlIHVzZXIga2V5IG9mIHRoZSB0cmFkaW5nIGFjY291bnRcbiAgICovXG4gIGFzeW5jIGFmZmlybShwYXlsb2FkOiBQYXlsb2FkLCBzaWduYXR1cmU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICBwYXlsb2FkOiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKSxcbiAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlLFxuICAgIH07XG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy51cGRhdGVTdGF0dXMoQWZmaXJtYXRpb25TdGF0dXMuQUZGSVJNRUQsIGJvZHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlamVjdHMgYSBwZW5kaW5nIGFmZmlybWF0aW9uLCBjYW5jZWxsaW5nIHRoZSBzZXR0bGVtZW50XG4gICAqL1xuICBhc3luYyByZWplY3QoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlU3RhdHVzKEFmZmlybWF0aW9uU3RhdHVzLlJFSkVDVEVELCBudWxsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWxzIGEgcGVuZGluZyBhZmZpcm1hdGlvbiwgY2FuY2VsbGluZyB0aGUgc2V0dGxlbWVudFxuICAgKi9cbiAgYXN5bmMgY2FuY2VsKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZVN0YXR1cyhBZmZpcm1hdGlvblN0YXR1cy5DQU5DRUxFRCwgbnVsbCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHVwZGF0ZVN0YXR1cyhzdGF0dXM6IEFmZmlybWF0aW9uU3RhdHVzLCBib2R5PzogYW55KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgYm9keVdpdGhTdGF0dXMgPSB7IHN0YXR1cywgLi4uYm9keSB9O1xuICAgIGNvbnN0IHVybCA9IHRoaXMuYml0Z28ubWljcm9zZXJ2aWNlc1VybChcbiAgICAgIGAvYXBpL3RyYWRlL3YxL2VudGVycHJpc2UvJHt0aGlzLmVudGVycHJpc2VJZH0vYWNjb3VudC8ke3RoaXMucGFydHlBY2NvdW50SWR9L2FmZmlybWF0aW9ucy8ke3RoaXMuaWR9YFxuICAgICk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmJpdGdvLnB1dCh1cmwpLnNlbmQoYm9keVdpdGhTdGF0dXMpLnJlc3VsdCgpO1xuICAgIHRoaXMudXBkYXRlQWZmaXJtYXRpb25EYXRhKHJlc3BvbnNlKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlQWZmaXJtYXRpb25EYXRhKGFmZmlybWF0aW9uRGF0YTogYW55KSB7XG4gICAgdGhpcy5pZCA9IGFmZmlybWF0aW9uRGF0YS5pZDtcbiAgICB0aGlzLnBhcnR5QWNjb3VudElkID0gYWZmaXJtYXRpb25EYXRhLnBhcnR5QWNjb3VudElkO1xuICAgIHRoaXMuc3RhdHVzID0gYWZmaXJtYXRpb25EYXRhLnN0YXR1cztcbiAgICB0aGlzLnNldHRsZW1lbnQgPSBhZmZpcm1hdGlvbkRhdGEuc2V0dGxlbWVudDtcbiAgICB0aGlzLmxvY2sgPSBhZmZpcm1hdGlvbkRhdGEubG9jayBhcyBMb2NrO1xuICAgIHRoaXMucGF5bG9hZCA9IGFmZmlybWF0aW9uRGF0YS5wYXlsb2FkO1xuICAgIHRoaXMuY3JlYXRlZEF0ID0gbmV3IERhdGUoYWZmaXJtYXRpb25EYXRhLmNyZWF0ZWRBdCk7XG4gICAgdGhpcy5leHBpcmVBdCA9IG5ldyBEYXRlKGFmZmlybWF0aW9uRGF0YS5leHBpcmVBdCk7XG4gIH1cbn1cbiJdfQ==