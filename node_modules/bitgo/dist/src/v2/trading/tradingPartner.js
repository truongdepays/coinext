"use strict";
/**
 * @prettier
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradingPartner = exports.TradingPartnerType = exports.TradingPartnerStatus = void 0;
var TradingPartnerStatus;
(function (TradingPartnerStatus) {
    TradingPartnerStatus["ACCEPTED"] = "accepted";
    TradingPartnerStatus["REJECTED"] = "rejected";
    TradingPartnerStatus["CANCELED"] = "canceled";
    TradingPartnerStatus["PENDING"] = "pending";
})(TradingPartnerStatus = exports.TradingPartnerStatus || (exports.TradingPartnerStatus = {}));
// Type of partnership used for settlements
var TradingPartnerType;
(function (TradingPartnerType) {
    TradingPartnerType["DIRECT"] = "direct";
    TradingPartnerType["AGENCY"] = "agency";
})(TradingPartnerType = exports.TradingPartnerType || (exports.TradingPartnerType = {}));
class TradingPartner {
    constructor(tradingPartnerData, bitgo, enterpriseId, currentAccount) {
        this.id = tradingPartnerData.id;
        this.primaryEnterpriseName = tradingPartnerData.primaryEnterpriseName;
        this.primaryAccountId = tradingPartnerData.primaryAccountId;
        this.secondaryEnterpriseName = tradingPartnerData.secondaryEnterpriseName;
        this.secondaryAccountId = tradingPartnerData.secondaryAccountId;
        this.requesterAccountId = tradingPartnerData.requesterAccountId;
        this.status = tradingPartnerData.status;
        this.type = tradingPartnerData.type;
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.currentAccount = currentAccount;
    }
    /**
     * Check if a trading partner has enough funds to cover the cost of a trade.
     * @param currency the currency to check
     * @param amount the amount of currency to check, represented in base units (such as cents, satoshi, or wei)
     */
    async checkBalance(currency, amount) {
        const partnerAccountId = this.primaryAccountId === this.currentAccount.id ? this.secondaryAccountId : this.primaryAccountId;
        const url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${this.currentAccount.id}/tradingpartners/${partnerAccountId}/balance`);
        const response = (await this.bitgo.get(url).query({ currency, amount }).result());
        return response.check;
    }
}
exports.TradingPartner = TradingPartner;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGluZ1BhcnRuZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdjIvdHJhZGluZy90cmFkaW5nUGFydG5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7OztBQU1ILElBQVksb0JBS1g7QUFMRCxXQUFZLG9CQUFvQjtJQUM5Qiw2Q0FBcUIsQ0FBQTtJQUNyQiw2Q0FBcUIsQ0FBQTtJQUNyQiw2Q0FBcUIsQ0FBQTtJQUNyQiwyQ0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBTFcsb0JBQW9CLEdBQXBCLDRCQUFvQixLQUFwQiw0QkFBb0IsUUFLL0I7QUFFRCwyQ0FBMkM7QUFDM0MsSUFBWSxrQkFHWDtBQUhELFdBQVksa0JBQWtCO0lBQzVCLHVDQUFpQixDQUFBO0lBQ2pCLHVDQUFpQixDQUFBO0FBQ25CLENBQUMsRUFIVyxrQkFBa0IsR0FBbEIsMEJBQWtCLEtBQWxCLDBCQUFrQixRQUc3QjtBQUVELE1BQWEsY0FBYztJQWN6QixZQUFZLGtCQUF1QixFQUFFLEtBQVksRUFBRSxZQUFvQixFQUFFLGNBQThCO1FBQ3JHLElBQUksQ0FBQyxFQUFFLEdBQUcsa0JBQWtCLENBQUMsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxrQkFBa0IsQ0FBQyxxQkFBcUIsQ0FBQztRQUN0RSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUM7UUFDNUQsSUFBSSxDQUFDLHVCQUF1QixHQUFHLGtCQUFrQixDQUFDLHVCQUF1QixDQUFDO1FBQzFFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQztRQUNoRSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsa0JBQWtCLENBQUM7UUFDaEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7UUFFcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7SUFDdkMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsWUFBWSxDQUFDLFFBQWdCLEVBQUUsTUFBYztRQUNqRCxNQUFNLGdCQUFnQixHQUNwQixJQUFJLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1FBQ3JHLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQ3JDLDRCQUE0QixJQUFJLENBQUMsWUFBWSxZQUFZLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxvQkFBb0IsZ0JBQWdCLFVBQVUsQ0FDOUgsQ0FBQztRQUVGLE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBUSxDQUFDO1FBRXpGLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQztJQUN4QixDQUFDO0NBQ0Y7QUE3Q0Qsd0NBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuXG5pbXBvcnQgeyBCaXRHbyB9IGZyb20gJy4uLy4uL2JpdGdvJztcblxuaW1wb3J0IHsgVHJhZGluZ0FjY291bnQgfSBmcm9tICcuL3RyYWRpbmdBY2NvdW50JztcblxuZXhwb3J0IGVudW0gVHJhZGluZ1BhcnRuZXJTdGF0dXMge1xuICBBQ0NFUFRFRCA9ICdhY2NlcHRlZCcsXG4gIFJFSkVDVEVEID0gJ3JlamVjdGVkJyxcbiAgQ0FOQ0VMRUQgPSAnY2FuY2VsZWQnLFxuICBQRU5ESU5HID0gJ3BlbmRpbmcnLFxufVxuXG4vLyBUeXBlIG9mIHBhcnRuZXJzaGlwIHVzZWQgZm9yIHNldHRsZW1lbnRzXG5leHBvcnQgZW51bSBUcmFkaW5nUGFydG5lclR5cGUge1xuICBESVJFQ1QgPSAnZGlyZWN0JywgLy8gZGlyZWN0IHNldHRsZW1lbnQgYmV0d2VlbiByZXF1ZXN0ZXIgYW5kIGNvdW50ZXJwYXJ0eVxuICBBR0VOQ1kgPSAnYWdlbmN5JywgLy8gYWdlbnQgc2V0dGxlbWVudCBiZXR3ZWVuIHR3byBjb3VudGVycGFydGllcyBvZiB0aGUgYWdlbnRcbn1cblxuZXhwb3J0IGNsYXNzIFRyYWRpbmdQYXJ0bmVyIHtcbiAgcHJpdmF0ZSBiaXRnbzogQml0R287XG4gIHByaXZhdGUgZW50ZXJwcmlzZUlkOiBzdHJpbmc7XG4gIHByaXZhdGUgY3VycmVudEFjY291bnQ6IFRyYWRpbmdBY2NvdW50OyAvLyBhY2NvdW50IG9mIHRoZSB1c2VyIHVzaW5nIHRoZSBTREssIG5lZWRlZCB0byBjb25zdHJ1Y3QgYmFsYW5jZSBjaGVjayBVUkxcblxuICBwdWJsaWMgaWQ6IHN0cmluZztcbiAgcHVibGljIHByaW1hcnlFbnRlcnByaXNlTmFtZTogc3RyaW5nO1xuICBwdWJsaWMgcHJpbWFyeUFjY291bnRJZDogc3RyaW5nO1xuICBwdWJsaWMgc2Vjb25kYXJ5RW50ZXJwcmlzZU5hbWU6IHN0cmluZztcbiAgcHVibGljIHNlY29uZGFyeUFjY291bnRJZDogc3RyaW5nO1xuICBwdWJsaWMgcmVxdWVzdGVyQWNjb3VudElkOiBzdHJpbmc7XG4gIHB1YmxpYyBzdGF0dXM6IFRyYWRpbmdQYXJ0bmVyU3RhdHVzO1xuICBwdWJsaWMgdHlwZTogVHJhZGluZ1BhcnRuZXJUeXBlO1xuXG4gIGNvbnN0cnVjdG9yKHRyYWRpbmdQYXJ0bmVyRGF0YTogYW55LCBiaXRnbzogQml0R28sIGVudGVycHJpc2VJZDogc3RyaW5nLCBjdXJyZW50QWNjb3VudDogVHJhZGluZ0FjY291bnQpIHtcbiAgICB0aGlzLmlkID0gdHJhZGluZ1BhcnRuZXJEYXRhLmlkO1xuICAgIHRoaXMucHJpbWFyeUVudGVycHJpc2VOYW1lID0gdHJhZGluZ1BhcnRuZXJEYXRhLnByaW1hcnlFbnRlcnByaXNlTmFtZTtcbiAgICB0aGlzLnByaW1hcnlBY2NvdW50SWQgPSB0cmFkaW5nUGFydG5lckRhdGEucHJpbWFyeUFjY291bnRJZDtcbiAgICB0aGlzLnNlY29uZGFyeUVudGVycHJpc2VOYW1lID0gdHJhZGluZ1BhcnRuZXJEYXRhLnNlY29uZGFyeUVudGVycHJpc2VOYW1lO1xuICAgIHRoaXMuc2Vjb25kYXJ5QWNjb3VudElkID0gdHJhZGluZ1BhcnRuZXJEYXRhLnNlY29uZGFyeUFjY291bnRJZDtcbiAgICB0aGlzLnJlcXVlc3RlckFjY291bnRJZCA9IHRyYWRpbmdQYXJ0bmVyRGF0YS5yZXF1ZXN0ZXJBY2NvdW50SWQ7XG4gICAgdGhpcy5zdGF0dXMgPSB0cmFkaW5nUGFydG5lckRhdGEuc3RhdHVzO1xuICAgIHRoaXMudHlwZSA9IHRyYWRpbmdQYXJ0bmVyRGF0YS50eXBlO1xuXG4gICAgdGhpcy5iaXRnbyA9IGJpdGdvO1xuICAgIHRoaXMuZW50ZXJwcmlzZUlkID0gZW50ZXJwcmlzZUlkO1xuICAgIHRoaXMuY3VycmVudEFjY291bnQgPSBjdXJyZW50QWNjb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRyYWRpbmcgcGFydG5lciBoYXMgZW5vdWdoIGZ1bmRzIHRvIGNvdmVyIHRoZSBjb3N0IG9mIGEgdHJhZGUuXG4gICAqIEBwYXJhbSBjdXJyZW5jeSB0aGUgY3VycmVuY3kgdG8gY2hlY2tcbiAgICogQHBhcmFtIGFtb3VudCB0aGUgYW1vdW50IG9mIGN1cnJlbmN5IHRvIGNoZWNrLCByZXByZXNlbnRlZCBpbiBiYXNlIHVuaXRzIChzdWNoIGFzIGNlbnRzLCBzYXRvc2hpLCBvciB3ZWkpXG4gICAqL1xuICBhc3luYyBjaGVja0JhbGFuY2UoY3VycmVuY3k6IHN0cmluZywgYW1vdW50OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBwYXJ0bmVyQWNjb3VudElkID1cbiAgICAgIHRoaXMucHJpbWFyeUFjY291bnRJZCA9PT0gdGhpcy5jdXJyZW50QWNjb3VudC5pZCA/IHRoaXMuc2Vjb25kYXJ5QWNjb3VudElkIDogdGhpcy5wcmltYXJ5QWNjb3VudElkO1xuICAgIGNvbnN0IHVybCA9IHRoaXMuYml0Z28ubWljcm9zZXJ2aWNlc1VybChcbiAgICAgIGAvYXBpL3RyYWRlL3YxL2VudGVycHJpc2UvJHt0aGlzLmVudGVycHJpc2VJZH0vYWNjb3VudC8ke3RoaXMuY3VycmVudEFjY291bnQuaWR9L3RyYWRpbmdwYXJ0bmVycy8ke3BhcnRuZXJBY2NvdW50SWR9L2JhbGFuY2VgXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IHRoaXMuYml0Z28uZ2V0KHVybCkucXVlcnkoeyBjdXJyZW5jeSwgYW1vdW50IH0pLnJlc3VsdCgpKSBhcyBhbnk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2UuY2hlY2s7XG4gIH1cbn1cbiJdfQ==