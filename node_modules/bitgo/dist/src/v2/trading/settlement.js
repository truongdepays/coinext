"use strict";
/**
 * @prettier
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Settlement = exports.SettlementType = exports.SettlementStatus = void 0;
const affirmation_1 = require("./affirmation");
var SettlementStatus;
(function (SettlementStatus) {
    SettlementStatus["CANCELED"] = "canceled";
    SettlementStatus["PENDING"] = "pending";
    SettlementStatus["REJECTED"] = "rejected";
    SettlementStatus["SETTLED"] = "settled";
    SettlementStatus["FAILED"] = "failed";
})(SettlementStatus = exports.SettlementStatus || (exports.SettlementStatus = {}));
var SettlementType;
(function (SettlementType) {
    SettlementType["DIRECT"] = "direct";
    SettlementType["AGENCY"] = "agency";
})(SettlementType = exports.SettlementType || (exports.SettlementType = {}));
class Settlement {
    constructor(settlementData, bitgo, enterpriseId) {
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.id = settlementData.id;
        this.requesterAccountId = settlementData.requesterAccountId;
        this.status = settlementData.status;
        this.type = settlementData.type;
        this.affirmations = settlementData.affirmations.map((affirmation) => new affirmation_1.Affirmation(affirmation, this.bitgo, this.enterpriseId));
        this.createdAt = new Date(settlementData.createdAt);
        this.expireAt = new Date(settlementData.expireAt);
        this.settledAt = new Date(settlementData.settledAt);
        this.trades = settlementData.trades;
    }
}
exports.Settlement = Settlement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92Mi90cmFkaW5nL3NldHRsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7QUFJSCwrQ0FBNEM7QUFFNUMsSUFBWSxnQkFNWDtBQU5ELFdBQVksZ0JBQWdCO0lBQzFCLHlDQUFxQixDQUFBO0lBQ3JCLHVDQUFtQixDQUFBO0lBQ25CLHlDQUFxQixDQUFBO0lBQ3JCLHVDQUFtQixDQUFBO0lBQ25CLHFDQUFpQixDQUFBO0FBQ25CLENBQUMsRUFOVyxnQkFBZ0IsR0FBaEIsd0JBQWdCLEtBQWhCLHdCQUFnQixRQU0zQjtBQUVELElBQVksY0FHWDtBQUhELFdBQVksY0FBYztJQUN4QixtQ0FBaUIsQ0FBQTtJQUNqQixtQ0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBSFcsY0FBYyxHQUFkLHNCQUFjLEtBQWQsc0JBQWMsUUFHekI7QUFFRCxNQUFhLFVBQVU7SUFjckIsWUFBWSxjQUFjLEVBQUUsS0FBSyxFQUFFLFlBQW9CO1FBQ3JELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRWpDLElBQUksQ0FBQyxFQUFFLEdBQUcsY0FBYyxDQUFDLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsY0FBYyxDQUFDLGtCQUFrQixDQUFDO1FBQzVELElBQUksQ0FBQyxNQUFNLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQztRQUNwQyxJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUM7UUFDaEMsSUFBSSxDQUFDLFlBQVksR0FBRyxjQUFjLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FDakQsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLElBQUkseUJBQVcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQzdFLENBQUM7UUFDRixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsTUFBTSxHQUFHLGNBQWMsQ0FBQyxNQUFpQixDQUFDO0lBQ2pELENBQUM7Q0FDRjtBQTlCRCxnQ0E4QkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcmV0dGllclxuICovXG5cbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vLi4vYml0Z28nO1xuaW1wb3J0IHsgVHJhZGUgfSBmcm9tICcuL3RyYWRlJztcbmltcG9ydCB7IEFmZmlybWF0aW9uIH0gZnJvbSAnLi9hZmZpcm1hdGlvbic7XG5cbmV4cG9ydCBlbnVtIFNldHRsZW1lbnRTdGF0dXMge1xuICBDQU5DRUxFRCA9ICdjYW5jZWxlZCcsXG4gIFBFTkRJTkcgPSAncGVuZGluZycsXG4gIFJFSkVDVEVEID0gJ3JlamVjdGVkJyxcbiAgU0VUVExFRCA9ICdzZXR0bGVkJyxcbiAgRkFJTEVEID0gJ2ZhaWxlZCcsXG59XG5cbmV4cG9ydCBlbnVtIFNldHRsZW1lbnRUeXBlIHtcbiAgRElSRUNUID0gJ2RpcmVjdCcsXG4gIEFHRU5DWSA9ICdhZ2VuY3knLFxufVxuXG5leHBvcnQgY2xhc3MgU2V0dGxlbWVudCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgYml0Z286IEJpdEdvO1xuICBwcml2YXRlIHJlYWRvbmx5IGVudGVycHJpc2VJZDogc3RyaW5nO1xuXG4gIHB1YmxpYyBpZDogc3RyaW5nO1xuICBwdWJsaWMgcmVxdWVzdGVyQWNjb3VudElkOiBzdHJpbmc7XG4gIHB1YmxpYyBzdGF0dXM6IFNldHRsZW1lbnRTdGF0dXM7XG4gIHB1YmxpYyB0eXBlOiBTZXR0bGVtZW50VHlwZTtcbiAgcHVibGljIGFmZmlybWF0aW9uczogQWZmaXJtYXRpb25bXTtcbiAgcHVibGljIGNyZWF0ZWRBdDogRGF0ZTtcbiAgcHVibGljIGV4cGlyZUF0OiBEYXRlO1xuICBwdWJsaWMgc2V0dGxlZEF0OiBEYXRlO1xuICBwdWJsaWMgdHJhZGVzOiBUcmFkZVtdO1xuXG4gIGNvbnN0cnVjdG9yKHNldHRsZW1lbnREYXRhLCBiaXRnbywgZW50ZXJwcmlzZUlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmJpdGdvID0gYml0Z287XG4gICAgdGhpcy5lbnRlcnByaXNlSWQgPSBlbnRlcnByaXNlSWQ7XG5cbiAgICB0aGlzLmlkID0gc2V0dGxlbWVudERhdGEuaWQ7XG4gICAgdGhpcy5yZXF1ZXN0ZXJBY2NvdW50SWQgPSBzZXR0bGVtZW50RGF0YS5yZXF1ZXN0ZXJBY2NvdW50SWQ7XG4gICAgdGhpcy5zdGF0dXMgPSBzZXR0bGVtZW50RGF0YS5zdGF0dXM7XG4gICAgdGhpcy50eXBlID0gc2V0dGxlbWVudERhdGEudHlwZTtcbiAgICB0aGlzLmFmZmlybWF0aW9ucyA9IHNldHRsZW1lbnREYXRhLmFmZmlybWF0aW9ucy5tYXAoXG4gICAgICAoYWZmaXJtYXRpb24pID0+IG5ldyBBZmZpcm1hdGlvbihhZmZpcm1hdGlvbiwgdGhpcy5iaXRnbywgdGhpcy5lbnRlcnByaXNlSWQpXG4gICAgKTtcbiAgICB0aGlzLmNyZWF0ZWRBdCA9IG5ldyBEYXRlKHNldHRsZW1lbnREYXRhLmNyZWF0ZWRBdCk7XG4gICAgdGhpcy5leHBpcmVBdCA9IG5ldyBEYXRlKHNldHRsZW1lbnREYXRhLmV4cGlyZUF0KTtcbiAgICB0aGlzLnNldHRsZWRBdCA9IG5ldyBEYXRlKHNldHRsZW1lbnREYXRhLnNldHRsZWRBdCk7XG4gICAgdGhpcy50cmFkZXMgPSBzZXR0bGVtZW50RGF0YS50cmFkZXMgYXMgVHJhZGVbXTtcbiAgfVxufVxuIl19