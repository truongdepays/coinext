"use strict";
/**
 * @prettier
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Settlements = void 0;
const settlement_1 = require("./settlement");
class Settlements {
    constructor(bitgo, enterpriseId, account) {
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.account = account;
    }
    /**
     * Retrieves all settlements for an enterprise
     */
    async list() {
        let url;
        if (this.account) {
            url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${this.account.id}/settlements`);
        }
        else {
            url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/settlements`);
        }
        const response = (await this.bitgo.get(url).result());
        return response.settlements.map((settlement) => new settlement_1.Settlement(settlement, this.bitgo, this.enterpriseId));
    }
    /**
     * Retrieves a single settlement by its ID.
     * @param id ID of the settlement
     * @param accountId ID of the trading account that the affirmation belongs to
     */
    async get({ id, accountId }) {
        const account = accountId || (this.account && this.account.id);
        if (!account) {
            throw new Error('accountId must be provided in parameters for an enterprise context');
        }
        const url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${account}/settlements/${id}`);
        const response = await this.bitgo.get(url).result();
        return new settlement_1.Settlement(response, this.bitgo, this.enterpriseId);
    }
    /**
     * Submits a new settlement for a set of trades.
     * NOTE: This function must be called as tradingAccount.settlements().create(), enterprise.settlements().create() is not a valid call.
     * @param params
     * @param params.requesterAccountId trading account ID that is creating this settlement
     * @param params.payload payload authorizing the movement of funds for the included trades
     * @param params.signature hex-encoded signature of the payload
     * @param params.trades list of trades to settle as part of this settlement
     */
    async create(params) {
        if (!this.account) {
            throw new Error('Must select a trading account before creating a settlement. Try tradingAccount.settlements().create()');
        }
        // payload must be stringified before being passed to API
        const body = Object.assign({}, params);
        body.payload = JSON.stringify(body.payload);
        const url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${this.account.id}/settlements`);
        const response = await this.bitgo.post(url).send(body).result();
        return new settlement_1.Settlement(response, this.bitgo, this.enterpriseId);
    }
}
exports.Settlements = Settlements;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGxlbWVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdjIvdHJhZGluZy9zZXR0bGVtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7OztBQUlILDZDQUEwQztBQWlCMUMsTUFBYSxXQUFXO0lBS3RCLFlBQVksS0FBWSxFQUFFLFlBQW9CLEVBQUUsT0FBd0I7UUFDdEUsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLElBQUk7UUFDUixJQUFJLEdBQUcsQ0FBQztRQUNSLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDL0IsNEJBQTRCLElBQUksQ0FBQyxZQUFZLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLGNBQWMsQ0FDdkYsQ0FBQztTQUNIO2FBQU07WUFDTCxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyw0QkFBNEIsSUFBSSxDQUFDLFlBQVksY0FBYyxDQUFDLENBQUM7U0FDaEc7UUFDRCxNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQVEsQ0FBQztRQUU3RCxPQUFPLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLHVCQUFVLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDN0csQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBYztRQUNyQyxNQUFNLE9BQU8sR0FBRyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsb0VBQW9FLENBQUMsQ0FBQztTQUN2RjtRQUVELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQ3JDLDRCQUE0QixJQUFJLENBQUMsWUFBWSxZQUFZLE9BQU8sZ0JBQWdCLEVBQUUsRUFBRSxDQUNyRixDQUFDO1FBQ0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNwRCxPQUFPLElBQUksdUJBQVUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUE4QjtRQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNqQixNQUFNLElBQUksS0FBSyxDQUNiLHVHQUF1RyxDQUN4RyxDQUFDO1NBQ0g7UUFFRCx5REFBeUQ7UUFDekQsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBYSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU1QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUNyQyw0QkFBNEIsSUFBSSxDQUFDLFlBQVksWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsY0FBYyxDQUN2RixDQUFDO1FBQ0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFaEUsT0FBTyxJQUFJLHVCQUFVLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Q0FDRjtBQXpFRCxrQ0F5RUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcmV0dGllclxuICovXG5cbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vLi4vYml0Z28nO1xuXG5pbXBvcnQgeyBTZXR0bGVtZW50IH0gZnJvbSAnLi9zZXR0bGVtZW50JztcbmltcG9ydCB7IFBheWxvYWQgfSBmcm9tICcuL3BheWxvYWQnO1xuaW1wb3J0IHsgVHJhZGUgfSBmcm9tICcuL3RyYWRlJztcbmltcG9ydCB7IFRyYWRpbmdBY2NvdW50IH0gZnJvbSAnLi90cmFkaW5nQWNjb3VudCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlU2V0dGxlbWVudFBhcmFtcyB7XG4gIHJlcXVlc3RlckFjY291bnRJZDogc3RyaW5nO1xuICBwYXlsb2FkOiBQYXlsb2FkO1xuICBzaWduYXR1cmU6IHN0cmluZztcbiAgdHJhZGVzOiBUcmFkZVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldE9wdGlvbnMge1xuICBpZDogc3RyaW5nO1xuICBhY2NvdW50SWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFNldHRsZW1lbnRzIHtcbiAgcHJpdmF0ZSBiaXRnbzogQml0R287XG4gIHByaXZhdGUgZW50ZXJwcmlzZUlkOiBzdHJpbmc7XG4gIHByaXZhdGUgYWNjb3VudD86IFRyYWRpbmdBY2NvdW50O1xuXG4gIGNvbnN0cnVjdG9yKGJpdGdvOiBCaXRHbywgZW50ZXJwcmlzZUlkOiBzdHJpbmcsIGFjY291bnQ/OiBUcmFkaW5nQWNjb3VudCkge1xuICAgIHRoaXMuYml0Z28gPSBiaXRnbztcbiAgICB0aGlzLmVudGVycHJpc2VJZCA9IGVudGVycHJpc2VJZDtcbiAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhbGwgc2V0dGxlbWVudHMgZm9yIGFuIGVudGVycHJpc2VcbiAgICovXG4gIGFzeW5jIGxpc3QoKTogUHJvbWlzZTxTZXR0bGVtZW50W10+IHtcbiAgICBsZXQgdXJsO1xuICAgIGlmICh0aGlzLmFjY291bnQpIHtcbiAgICAgIHVybCA9IHRoaXMuYml0Z28ubWljcm9zZXJ2aWNlc1VybChcbiAgICAgICAgYC9hcGkvdHJhZGUvdjEvZW50ZXJwcmlzZS8ke3RoaXMuZW50ZXJwcmlzZUlkfS9hY2NvdW50LyR7dGhpcy5hY2NvdW50LmlkfS9zZXR0bGVtZW50c2BcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVybCA9IHRoaXMuYml0Z28ubWljcm9zZXJ2aWNlc1VybChgL2FwaS90cmFkZS92MS9lbnRlcnByaXNlLyR7dGhpcy5lbnRlcnByaXNlSWR9L3NldHRsZW1lbnRzYCk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IHRoaXMuYml0Z28uZ2V0KHVybCkucmVzdWx0KCkpIGFzIGFueTtcblxuICAgIHJldHVybiByZXNwb25zZS5zZXR0bGVtZW50cy5tYXAoKHNldHRsZW1lbnQpID0+IG5ldyBTZXR0bGVtZW50KHNldHRsZW1lbnQsIHRoaXMuYml0Z28sIHRoaXMuZW50ZXJwcmlzZUlkKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgc2luZ2xlIHNldHRsZW1lbnQgYnkgaXRzIElELlxuICAgKiBAcGFyYW0gaWQgSUQgb2YgdGhlIHNldHRsZW1lbnRcbiAgICogQHBhcmFtIGFjY291bnRJZCBJRCBvZiB0aGUgdHJhZGluZyBhY2NvdW50IHRoYXQgdGhlIGFmZmlybWF0aW9uIGJlbG9uZ3MgdG9cbiAgICovXG4gIGFzeW5jIGdldCh7IGlkLCBhY2NvdW50SWQgfTogR2V0T3B0aW9ucyk6IFByb21pc2U8U2V0dGxlbWVudD4ge1xuICAgIGNvbnN0IGFjY291bnQgPSBhY2NvdW50SWQgfHwgKHRoaXMuYWNjb3VudCAmJiB0aGlzLmFjY291bnQuaWQpO1xuICAgIGlmICghYWNjb3VudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdhY2NvdW50SWQgbXVzdCBiZSBwcm92aWRlZCBpbiBwYXJhbWV0ZXJzIGZvciBhbiBlbnRlcnByaXNlIGNvbnRleHQnKTtcbiAgICB9XG5cbiAgICBjb25zdCB1cmwgPSB0aGlzLmJpdGdvLm1pY3Jvc2VydmljZXNVcmwoXG4gICAgICBgL2FwaS90cmFkZS92MS9lbnRlcnByaXNlLyR7dGhpcy5lbnRlcnByaXNlSWR9L2FjY291bnQvJHthY2NvdW50fS9zZXR0bGVtZW50cy8ke2lkfWBcbiAgICApO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5iaXRnby5nZXQodXJsKS5yZXN1bHQoKTtcbiAgICByZXR1cm4gbmV3IFNldHRsZW1lbnQocmVzcG9uc2UsIHRoaXMuYml0Z28sIHRoaXMuZW50ZXJwcmlzZUlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJtaXRzIGEgbmV3IHNldHRsZW1lbnQgZm9yIGEgc2V0IG9mIHRyYWRlcy5cbiAgICogTk9URTogVGhpcyBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCBhcyB0cmFkaW5nQWNjb3VudC5zZXR0bGVtZW50cygpLmNyZWF0ZSgpLCBlbnRlcnByaXNlLnNldHRsZW1lbnRzKCkuY3JlYXRlKCkgaXMgbm90IGEgdmFsaWQgY2FsbC5cbiAgICogQHBhcmFtIHBhcmFtc1xuICAgKiBAcGFyYW0gcGFyYW1zLnJlcXVlc3RlckFjY291bnRJZCB0cmFkaW5nIGFjY291bnQgSUQgdGhhdCBpcyBjcmVhdGluZyB0aGlzIHNldHRsZW1lbnRcbiAgICogQHBhcmFtIHBhcmFtcy5wYXlsb2FkIHBheWxvYWQgYXV0aG9yaXppbmcgdGhlIG1vdmVtZW50IG9mIGZ1bmRzIGZvciB0aGUgaW5jbHVkZWQgdHJhZGVzXG4gICAqIEBwYXJhbSBwYXJhbXMuc2lnbmF0dXJlIGhleC1lbmNvZGVkIHNpZ25hdHVyZSBvZiB0aGUgcGF5bG9hZFxuICAgKiBAcGFyYW0gcGFyYW1zLnRyYWRlcyBsaXN0IG9mIHRyYWRlcyB0byBzZXR0bGUgYXMgcGFydCBvZiB0aGlzIHNldHRsZW1lbnRcbiAgICovXG4gIGFzeW5jIGNyZWF0ZShwYXJhbXM6IENyZWF0ZVNldHRsZW1lbnRQYXJhbXMpOiBQcm9taXNlPFNldHRsZW1lbnQ+IHtcbiAgICBpZiAoIXRoaXMuYWNjb3VudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnTXVzdCBzZWxlY3QgYSB0cmFkaW5nIGFjY291bnQgYmVmb3JlIGNyZWF0aW5nIGEgc2V0dGxlbWVudC4gVHJ5IHRyYWRpbmdBY2NvdW50LnNldHRsZW1lbnRzKCkuY3JlYXRlKCknXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHBheWxvYWQgbXVzdCBiZSBzdHJpbmdpZmllZCBiZWZvcmUgYmVpbmcgcGFzc2VkIHRvIEFQSVxuICAgIGNvbnN0IGJvZHkgPSBPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMgYXMgYW55KTtcbiAgICBib2R5LnBheWxvYWQgPSBKU09OLnN0cmluZ2lmeShib2R5LnBheWxvYWQpO1xuXG4gICAgY29uc3QgdXJsID0gdGhpcy5iaXRnby5taWNyb3NlcnZpY2VzVXJsKFxuICAgICAgYC9hcGkvdHJhZGUvdjEvZW50ZXJwcmlzZS8ke3RoaXMuZW50ZXJwcmlzZUlkfS9hY2NvdW50LyR7dGhpcy5hY2NvdW50LmlkfS9zZXR0bGVtZW50c2BcbiAgICApO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5iaXRnby5wb3N0KHVybCkuc2VuZChib2R5KS5yZXN1bHQoKTtcblxuICAgIHJldHVybiBuZXcgU2V0dGxlbWVudChyZXNwb25zZSwgdGhpcy5iaXRnbywgdGhpcy5lbnRlcnByaXNlSWQpO1xuICB9XG59XG4iXX0=