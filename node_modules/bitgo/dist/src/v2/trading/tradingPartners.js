"use strict";
/**
 * @prettier
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradingPartners = exports.TradingReferralRequesterSide = void 0;
const tradingPartner_1 = require("./tradingPartner");
// Side of the requester (if they should be considered the primary or the secondary)
// Only important for agency partnerships
// the primaryAccount is the agent, settling trades for the secondary account id
var TradingReferralRequesterSide;
(function (TradingReferralRequesterSide) {
    TradingReferralRequesterSide["PRIMARY"] = "primary";
    TradingReferralRequesterSide["SECONDARY"] = "secondary";
})(TradingReferralRequesterSide = exports.TradingReferralRequesterSide || (exports.TradingReferralRequesterSide = {}));
class TradingPartners {
    constructor(bitgo, enterpriseId, account) {
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.account = account;
    }
    /**
     * List all trading partners of your trading account. Your trading partners are the accounts you are allowed to settle with.
     */
    async list() {
        const url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${this.account.id}/tradingpartners`);
        const response = (await this.bitgo.get(url).result());
        return response.tradingPartners.map((partner) => new tradingPartner_1.TradingPartner(partner, this.bitgo, this.enterpriseId, this.account));
    }
    /**
     * Add trading partner given the unique referralCode provided by trading partner.
     * @param params
     * @param params.referralCode unique referral code provided by counterparty
     * @param params.type type of trading partnership
     * @param params.requesterSide side of the requester (primary or secondary) important for agency relationships
     */
    async addByCode(params) {
        const url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${this.account.id}/tradingpartners`);
        return await this.bitgo.post(url).send(params).result();
    }
}
exports.TradingPartners = TradingPartners;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGluZ1BhcnRuZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3YyL3RyYWRpbmcvdHJhZGluZ1BhcnRuZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7O0FBS0gscURBQXNFO0FBRXRFLG9GQUFvRjtBQUNwRix5Q0FBeUM7QUFDekMsZ0ZBQWdGO0FBQ2hGLElBQVksNEJBR1g7QUFIRCxXQUFZLDRCQUE0QjtJQUN0QyxtREFBbUIsQ0FBQTtJQUNuQix1REFBdUIsQ0FBQTtBQUN6QixDQUFDLEVBSFcsNEJBQTRCLEdBQTVCLG9DQUE0QixLQUE1QixvQ0FBNEIsUUFHdkM7QUFRRCxNQUFhLGVBQWU7SUFNMUIsWUFBWSxLQUFZLEVBQUUsWUFBb0IsRUFBRSxPQUF1QjtRQUNyRSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsSUFBSTtRQUNSLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQ3JDLDRCQUE0QixJQUFJLENBQUMsWUFBWSxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxrQkFBa0IsQ0FDM0YsQ0FBQztRQUNGLE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBUSxDQUFDO1FBRTdELE9BQU8sUUFBUSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQ2pDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLCtCQUFjLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQ3RGLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUF5QztRQUN2RCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUNyQyw0QkFBNEIsSUFBSSxDQUFDLFlBQVksWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsa0JBQWtCLENBQzNGLENBQUM7UUFDRixPQUFPLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzFELENBQUM7Q0FDRjtBQXZDRCwwQ0F1Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcmV0dGllclxuICovXG5cbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vLi4vYml0Z28nO1xuXG5pbXBvcnQgeyBUcmFkaW5nQWNjb3VudCB9IGZyb20gJy4vdHJhZGluZ0FjY291bnQnO1xuaW1wb3J0IHsgVHJhZGluZ1BhcnRuZXIsIFRyYWRpbmdQYXJ0bmVyVHlwZSB9IGZyb20gJy4vdHJhZGluZ1BhcnRuZXInO1xuXG4vLyBTaWRlIG9mIHRoZSByZXF1ZXN0ZXIgKGlmIHRoZXkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdGhlIHByaW1hcnkgb3IgdGhlIHNlY29uZGFyeSlcbi8vIE9ubHkgaW1wb3J0YW50IGZvciBhZ2VuY3kgcGFydG5lcnNoaXBzXG4vLyB0aGUgcHJpbWFyeUFjY291bnQgaXMgdGhlIGFnZW50LCBzZXR0bGluZyB0cmFkZXMgZm9yIHRoZSBzZWNvbmRhcnkgYWNjb3VudCBpZFxuZXhwb3J0IGVudW0gVHJhZGluZ1JlZmVycmFsUmVxdWVzdGVyU2lkZSB7XG4gIFBSSU1BUlkgPSAncHJpbWFyeScsIC8vIGlmIHBhcnRuZXJzaGlwIGlzIG9mIHR5cGUgYWdlbmN5LCBwcmltYXJ5IGlzIHRoZSBhZ2VudFxuICBTRUNPTkRBUlkgPSAnc2Vjb25kYXJ5Jyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmFkaW5nUGFydG5lckFkZEJ5Q29kZVBhcmFtZXRlcnMge1xuICByZWZlcnJhbENvZGU6IHN0cmluZztcbiAgdHlwZTogVHJhZGluZ1BhcnRuZXJUeXBlO1xuICByZXF1ZXN0ZXJTaWRlOiBUcmFkaW5nUmVmZXJyYWxSZXF1ZXN0ZXJTaWRlO1xufVxuXG5leHBvcnQgY2xhc3MgVHJhZGluZ1BhcnRuZXJzIHtcbiAgcHJpdmF0ZSBiaXRnbzogQml0R287XG5cbiAgcHJpdmF0ZSBlbnRlcnByaXNlSWQ6IHN0cmluZztcbiAgcHJpdmF0ZSBhY2NvdW50OiBUcmFkaW5nQWNjb3VudDtcblxuICBjb25zdHJ1Y3RvcihiaXRnbzogQml0R28sIGVudGVycHJpc2VJZDogc3RyaW5nLCBhY2NvdW50OiBUcmFkaW5nQWNjb3VudCkge1xuICAgIHRoaXMuYml0Z28gPSBiaXRnbztcbiAgICB0aGlzLmVudGVycHJpc2VJZCA9IGVudGVycHJpc2VJZDtcbiAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgYWxsIHRyYWRpbmcgcGFydG5lcnMgb2YgeW91ciB0cmFkaW5nIGFjY291bnQuIFlvdXIgdHJhZGluZyBwYXJ0bmVycyBhcmUgdGhlIGFjY291bnRzIHlvdSBhcmUgYWxsb3dlZCB0byBzZXR0bGUgd2l0aC5cbiAgICovXG4gIGFzeW5jIGxpc3QoKTogUHJvbWlzZTxUcmFkaW5nUGFydG5lcltdPiB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5iaXRnby5taWNyb3NlcnZpY2VzVXJsKFxuICAgICAgYC9hcGkvdHJhZGUvdjEvZW50ZXJwcmlzZS8ke3RoaXMuZW50ZXJwcmlzZUlkfS9hY2NvdW50LyR7dGhpcy5hY2NvdW50LmlkfS90cmFkaW5ncGFydG5lcnNgXG4gICAgKTtcbiAgICBjb25zdCByZXNwb25zZSA9IChhd2FpdCB0aGlzLmJpdGdvLmdldCh1cmwpLnJlc3VsdCgpKSBhcyBhbnk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2UudHJhZGluZ1BhcnRuZXJzLm1hcChcbiAgICAgIChwYXJ0bmVyKSA9PiBuZXcgVHJhZGluZ1BhcnRuZXIocGFydG5lciwgdGhpcy5iaXRnbywgdGhpcy5lbnRlcnByaXNlSWQsIHRoaXMuYWNjb3VudClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCB0cmFkaW5nIHBhcnRuZXIgZ2l2ZW4gdGhlIHVuaXF1ZSByZWZlcnJhbENvZGUgcHJvdmlkZWQgYnkgdHJhZGluZyBwYXJ0bmVyLlxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqIEBwYXJhbSBwYXJhbXMucmVmZXJyYWxDb2RlIHVuaXF1ZSByZWZlcnJhbCBjb2RlIHByb3ZpZGVkIGJ5IGNvdW50ZXJwYXJ0eVxuICAgKiBAcGFyYW0gcGFyYW1zLnR5cGUgdHlwZSBvZiB0cmFkaW5nIHBhcnRuZXJzaGlwXG4gICAqIEBwYXJhbSBwYXJhbXMucmVxdWVzdGVyU2lkZSBzaWRlIG9mIHRoZSByZXF1ZXN0ZXIgKHByaW1hcnkgb3Igc2Vjb25kYXJ5KSBpbXBvcnRhbnQgZm9yIGFnZW5jeSByZWxhdGlvbnNoaXBzXG4gICAqL1xuICBhc3luYyBhZGRCeUNvZGUocGFyYW1zOiBUcmFkaW5nUGFydG5lckFkZEJ5Q29kZVBhcmFtZXRlcnMpOiBQcm9taXNlPFRyYWRpbmdQYXJ0bmVyPiB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5iaXRnby5taWNyb3NlcnZpY2VzVXJsKFxuICAgICAgYC9hcGkvdHJhZGUvdjEvZW50ZXJwcmlzZS8ke3RoaXMuZW50ZXJwcmlzZUlkfS9hY2NvdW50LyR7dGhpcy5hY2NvdW50LmlkfS90cmFkaW5ncGFydG5lcnNgXG4gICAgKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5iaXRnby5wb3N0KHVybCkuc2VuZChwYXJhbXMpLnJlc3VsdCgpO1xuICB9XG59XG4iXX0=