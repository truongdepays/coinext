"use strict";
/**
 * @prettier
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Affirmations = void 0;
const affirmation_1 = require("./affirmation");
class Affirmations {
    constructor(bitgo, enterpriseId, account) {
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.account = account;
    }
    /**
     * Lists all affirmations for an enterprise
     * @param status optional status to filter affirmations by
     */
    async list(status) {
        let url;
        if (this.account) {
            url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${this.account.id}/affirmations`);
        }
        else {
            url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/affirmations`);
        }
        if (status) {
            url = `${url}?status=${status}`;
        }
        const response = (await this.bitgo.get(url).result());
        return response.affirmations.map((affirmation) => new affirmation_1.Affirmation(affirmation, this.bitgo, this.enterpriseId));
    }
    /**
     * Retrieves a single affirmation by its ID
     * @param id ID of the affirmation to retrieve
     * @param accountId ID of the trading account that the affirmation belongs to
     */
    async get({ id, accountId }) {
        const account = (this.account && this.account.id) || accountId;
        if (!account) {
            throw new Error('accountId must be provided in parameters for an enterprise context');
        }
        const url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${account}/affirmations/${id}`);
        const response = await this.bitgo.get(url).result();
        return new affirmation_1.Affirmation(response, this.bitgo, this.enterpriseId);
    }
}
exports.Affirmations = Affirmations;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWZmaXJtYXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3YyL3RyYWRpbmcvYWZmaXJtYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7O0FBR0gsK0NBQStEO0FBUS9ELE1BQWEsWUFBWTtJQUt2QixZQUFZLEtBQVksRUFBRSxZQUFvQixFQUFFLE9BQXdCO1FBQ3RFLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQTBCO1FBQ25DLElBQUksR0FBRyxDQUFDO1FBQ1IsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUMvQiw0QkFBNEIsSUFBSSxDQUFDLFlBQVksWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxDQUN4RixDQUFDO1NBQ0g7YUFBTTtZQUNMLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLDRCQUE0QixJQUFJLENBQUMsWUFBWSxlQUFlLENBQUMsQ0FBQztTQUNqRztRQUNELElBQUksTUFBTSxFQUFFO1lBQ1YsR0FBRyxHQUFHLEdBQUcsR0FBRyxXQUFXLE1BQU0sRUFBRSxDQUFDO1NBQ2pDO1FBRUQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFRLENBQUM7UUFFN0QsT0FBTyxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsSUFBSSx5QkFBVyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQ2pILENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQTRCO1FBQ25ELE1BQU0sT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLFNBQVMsQ0FBQztRQUMvRCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxvRUFBb0UsQ0FBQyxDQUFDO1NBQ3ZGO1FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDckMsNEJBQTRCLElBQUksQ0FBQyxZQUFZLFlBQVksT0FBTyxpQkFBaUIsRUFBRSxFQUFFLENBQ3RGLENBQUM7UUFDRixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3BELE9BQU8sSUFBSSx5QkFBVyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNsRSxDQUFDO0NBQ0Y7QUFsREQsb0NBa0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuXG5pbXBvcnQgeyBCaXRHbyB9IGZyb20gJy4uLy4uL2JpdGdvJztcbmltcG9ydCB7IEFmZmlybWF0aW9uLCBBZmZpcm1hdGlvblN0YXR1cyB9IGZyb20gJy4vYWZmaXJtYXRpb24nO1xuaW1wb3J0IHsgVHJhZGluZ0FjY291bnQgfSBmcm9tICcuL3RyYWRpbmdBY2NvdW50JztcblxuZXhwb3J0IGludGVyZmFjZSBHZXRBZmZpcm1hdGlvblBhcmFtZXRlcnMge1xuICBpZDogc3RyaW5nO1xuICBhY2NvdW50SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBBZmZpcm1hdGlvbnMge1xuICBwcml2YXRlIGJpdGdvOiBCaXRHbztcbiAgcHJpdmF0ZSBlbnRlcnByaXNlSWQ6IHN0cmluZztcbiAgcHJpdmF0ZSBhY2NvdW50PzogVHJhZGluZ0FjY291bnQ7XG5cbiAgY29uc3RydWN0b3IoYml0Z286IEJpdEdvLCBlbnRlcnByaXNlSWQ6IHN0cmluZywgYWNjb3VudD86IFRyYWRpbmdBY2NvdW50KSB7XG4gICAgdGhpcy5iaXRnbyA9IGJpdGdvO1xuICAgIHRoaXMuZW50ZXJwcmlzZUlkID0gZW50ZXJwcmlzZUlkO1xuICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gIH1cblxuICAvKipcbiAgICogTGlzdHMgYWxsIGFmZmlybWF0aW9ucyBmb3IgYW4gZW50ZXJwcmlzZVxuICAgKiBAcGFyYW0gc3RhdHVzIG9wdGlvbmFsIHN0YXR1cyB0byBmaWx0ZXIgYWZmaXJtYXRpb25zIGJ5XG4gICAqL1xuICBhc3luYyBsaXN0KHN0YXR1cz86IEFmZmlybWF0aW9uU3RhdHVzKTogUHJvbWlzZTxBZmZpcm1hdGlvbltdPiB7XG4gICAgbGV0IHVybDtcbiAgICBpZiAodGhpcy5hY2NvdW50KSB7XG4gICAgICB1cmwgPSB0aGlzLmJpdGdvLm1pY3Jvc2VydmljZXNVcmwoXG4gICAgICAgIGAvYXBpL3RyYWRlL3YxL2VudGVycHJpc2UvJHt0aGlzLmVudGVycHJpc2VJZH0vYWNjb3VudC8ke3RoaXMuYWNjb3VudC5pZH0vYWZmaXJtYXRpb25zYFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdXJsID0gdGhpcy5iaXRnby5taWNyb3NlcnZpY2VzVXJsKGAvYXBpL3RyYWRlL3YxL2VudGVycHJpc2UvJHt0aGlzLmVudGVycHJpc2VJZH0vYWZmaXJtYXRpb25zYCk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMpIHtcbiAgICAgIHVybCA9IGAke3VybH0/c3RhdHVzPSR7c3RhdHVzfWA7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSAoYXdhaXQgdGhpcy5iaXRnby5nZXQodXJsKS5yZXN1bHQoKSkgYXMgYW55O1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmFmZmlybWF0aW9ucy5tYXAoKGFmZmlybWF0aW9uKSA9PiBuZXcgQWZmaXJtYXRpb24oYWZmaXJtYXRpb24sIHRoaXMuYml0Z28sIHRoaXMuZW50ZXJwcmlzZUlkKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgc2luZ2xlIGFmZmlybWF0aW9uIGJ5IGl0cyBJRFxuICAgKiBAcGFyYW0gaWQgSUQgb2YgdGhlIGFmZmlybWF0aW9uIHRvIHJldHJpZXZlXG4gICAqIEBwYXJhbSBhY2NvdW50SWQgSUQgb2YgdGhlIHRyYWRpbmcgYWNjb3VudCB0aGF0IHRoZSBhZmZpcm1hdGlvbiBiZWxvbmdzIHRvXG4gICAqL1xuICBhc3luYyBnZXQoeyBpZCwgYWNjb3VudElkIH06IEdldEFmZmlybWF0aW9uUGFyYW1ldGVycyk6IFByb21pc2U8QWZmaXJtYXRpb24+IHtcbiAgICBjb25zdCBhY2NvdW50ID0gKHRoaXMuYWNjb3VudCAmJiB0aGlzLmFjY291bnQuaWQpIHx8IGFjY291bnRJZDtcbiAgICBpZiAoIWFjY291bnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYWNjb3VudElkIG11c3QgYmUgcHJvdmlkZWQgaW4gcGFyYW1ldGVycyBmb3IgYW4gZW50ZXJwcmlzZSBjb250ZXh0Jyk7XG4gICAgfVxuXG4gICAgY29uc3QgdXJsID0gdGhpcy5iaXRnby5taWNyb3NlcnZpY2VzVXJsKFxuICAgICAgYC9hcGkvdHJhZGUvdjEvZW50ZXJwcmlzZS8ke3RoaXMuZW50ZXJwcmlzZUlkfS9hY2NvdW50LyR7YWNjb3VudH0vYWZmaXJtYXRpb25zLyR7aWR9YFxuICAgICk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmJpdGdvLmdldCh1cmwpLnJlc3VsdCgpO1xuICAgIHJldHVybiBuZXcgQWZmaXJtYXRpb24ocmVzcG9uc2UsIHRoaXMuYml0Z28sIHRoaXMuZW50ZXJwcmlzZUlkKTtcbiAgfVxufVxuIl19