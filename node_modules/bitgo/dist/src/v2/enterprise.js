"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Enterprise = void 0;
/**
 * @prettier
 */
const _ = require("lodash");
const wallet_1 = require("./wallet");
const internal_1 = require("./internal/internal");
const settlements_1 = require("./trading/settlements");
const affirmations_1 = require("./trading/affirmations");
class Enterprise {
    constructor(bitgo, baseCoin, enterpriseData) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
        if (!_.isObject(enterpriseData)) {
            throw new Error('enterpriseData has to be an object');
        }
        if (!_.isString(enterpriseData.id)) {
            throw new Error('enterprise id has to be a string');
        }
        if (!_.isString(enterpriseData.name)) {
            throw new Error('enterprise name has to be a string');
        }
        this.id = enterpriseData.id;
        this.name = enterpriseData.name;
    }
    /**
     * Enterprise URL for v1 methods, such as getting users
     * @param query
     */
    url(query = '') {
        return this.bitgo.url(`/enterprise/${this.id}${query}`);
    }
    /**
     * Enterprise URL for v2 methods, such as getting fee address balances
     * @param query
     */
    coinUrl(query = '') {
        return this.baseCoin.url(`/enterprise/${this.id}${query}`);
    }
    /**
     * Get the wallets associated with this Enterprise
     * @param params
     */
    async coinWallets(params = {}) {
        const walletData = (await this.bitgo.get(this.baseCoin.url('/wallet/enterprise/' + this.id)).result());
        walletData.wallets = walletData.wallets.map((w) => {
            return new wallet_1.Wallet(this.bitgo, this.baseCoin, w);
        });
        return walletData;
    }
    /**
     * Get the users associated with this Enterprise
     * @param params
     */
    async users(params = {}) {
        return await this.bitgo.get(this.url('/user')).result();
    }
    /**
     * Get the fee address balance for this Enterprise
     * @param params
     */
    async getFeeAddressBalance(params = {}) {
        return await this.bitgo.get(this.coinUrl('/feeAddressBalance')).result();
    }
    /**
     * Add a user to this Enterprise
     * @param params
     */
    async addUser(params = {}) {
        return await this.bitgo.post(this.url('/user')).send(params).result();
    }
    /**
     * Remove a user from this Enterprise
     * @param params
     */
    async removeUser(params = {}) {
        return await this.bitgo.del(this.url('/user')).send(params).result();
    }
    /**
     * Get the first pending transaction for this Enterprise
     * @param params
     */
    async getFirstPendingTransaction(params = {}) {
        return internal_1.getFirstPendingTransaction({ enterpriseId: this.id }, this.baseCoin, this.bitgo);
    }
    /**
     * Manage settlements for an enterprise
     */
    settlements() {
        return new settlements_1.Settlements(this.bitgo, this.id);
    }
    /**
     * Manage affirmations for an enterprise
     */
    affirmations() {
        return new affirmations_1.Affirmations(this.bitgo, this.id);
    }
}
exports.Enterprise = Enterprise;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50ZXJwcmlzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92Mi9lbnRlcnByaXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOztHQUVHO0FBQ0gsNEJBQTRCO0FBRzVCLHFDQUFrQztBQUNsQyxrREFBaUU7QUFFakUsdURBQW9EO0FBQ3BELHlEQUFzRDtBQUV0RCxNQUFhLFVBQVU7SUFNckIsWUFBWSxLQUFZLEVBQUUsUUFBa0IsRUFBRSxjQUE0QztRQUN4RixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7U0FDdkQ7UUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1NBQ3JEO1FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztTQUN2RDtRQUNELElBQUksQ0FBQyxFQUFFLEdBQUcsY0FBYyxDQUFDLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUM7SUFDbEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEdBQUcsQ0FBQyxLQUFLLEdBQUcsRUFBRTtRQUNaLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsZUFBZSxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVEOzs7T0FHRztJQUNILE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsV0FBVyxDQUFDLFNBQWdDLEVBQUU7UUFDbEQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFRLENBQUM7UUFDOUcsVUFBVSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ2hELE9BQU8sSUFBSSxlQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2xELENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBZ0MsRUFBRTtRQUM1QyxPQUFPLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzFELENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsb0JBQW9CLENBQUMsU0FBZ0MsRUFBRTtRQUMzRCxPQUFPLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDM0UsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBYyxFQUFFO1FBQzVCLE9BQU8sTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3hFLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsVUFBVSxDQUFDLFNBQWMsRUFBRTtRQUMvQixPQUFPLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN2RSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLDBCQUEwQixDQUFDLFNBQWdDLEVBQUU7UUFDakUsT0FBTyxxQ0FBMEIsQ0FBQyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUYsQ0FBQztJQUVEOztPQUVHO0lBQ0gsV0FBVztRQUNULE9BQU8sSUFBSSx5QkFBVyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRDs7T0FFRztJQUNILFlBQVk7UUFDVixPQUFPLElBQUksMkJBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQyxDQUFDO0NBQ0Y7QUF2R0QsZ0NBdUdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgQml0R28gfSBmcm9tICcuLi9iaXRnbyc7XG5pbXBvcnQgeyBCYXNlQ29pbiB9IGZyb20gJy4vYmFzZUNvaW4nO1xuaW1wb3J0IHsgV2FsbGV0IH0gZnJvbSAnLi93YWxsZXQnO1xuaW1wb3J0IHsgZ2V0Rmlyc3RQZW5kaW5nVHJhbnNhY3Rpb24gfSBmcm9tICcuL2ludGVybmFsL2ludGVybmFsJztcblxuaW1wb3J0IHsgU2V0dGxlbWVudHMgfSBmcm9tICcuL3RyYWRpbmcvc2V0dGxlbWVudHMnO1xuaW1wb3J0IHsgQWZmaXJtYXRpb25zIH0gZnJvbSAnLi90cmFkaW5nL2FmZmlybWF0aW9ucyc7XG5cbmV4cG9ydCBjbGFzcyBFbnRlcnByaXNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBiaXRnbzogQml0R287XG4gIHByaXZhdGUgcmVhZG9ubHkgYmFzZUNvaW46IEJhc2VDb2luO1xuICByZWFkb25seSBpZDogc3RyaW5nO1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoYml0Z286IEJpdEdvLCBiYXNlQ29pbjogQmFzZUNvaW4sIGVudGVycHJpc2VEYXRhOiB7IGlkOiBzdHJpbmc7IG5hbWU6IHN0cmluZyB9KSB7XG4gICAgdGhpcy5iaXRnbyA9IGJpdGdvO1xuICAgIHRoaXMuYmFzZUNvaW4gPSBiYXNlQ29pbjtcbiAgICBpZiAoIV8uaXNPYmplY3QoZW50ZXJwcmlzZURhdGEpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2VudGVycHJpc2VEYXRhIGhhcyB0byBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgaWYgKCFfLmlzU3RyaW5nKGVudGVycHJpc2VEYXRhLmlkKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdlbnRlcnByaXNlIGlkIGhhcyB0byBiZSBhIHN0cmluZycpO1xuICAgIH1cbiAgICBpZiAoIV8uaXNTdHJpbmcoZW50ZXJwcmlzZURhdGEubmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZW50ZXJwcmlzZSBuYW1lIGhhcyB0byBiZSBhIHN0cmluZycpO1xuICAgIH1cbiAgICB0aGlzLmlkID0gZW50ZXJwcmlzZURhdGEuaWQ7XG4gICAgdGhpcy5uYW1lID0gZW50ZXJwcmlzZURhdGEubmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbnRlcnByaXNlIFVSTCBmb3IgdjEgbWV0aG9kcywgc3VjaCBhcyBnZXR0aW5nIHVzZXJzXG4gICAqIEBwYXJhbSBxdWVyeVxuICAgKi9cbiAgdXJsKHF1ZXJ5ID0gJycpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmJpdGdvLnVybChgL2VudGVycHJpc2UvJHt0aGlzLmlkfSR7cXVlcnl9YCk7XG4gIH1cblxuICAvKipcbiAgICogRW50ZXJwcmlzZSBVUkwgZm9yIHYyIG1ldGhvZHMsIHN1Y2ggYXMgZ2V0dGluZyBmZWUgYWRkcmVzcyBiYWxhbmNlc1xuICAgKiBAcGFyYW0gcXVlcnlcbiAgICovXG4gIGNvaW5VcmwocXVlcnkgPSAnJyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYmFzZUNvaW4udXJsKGAvZW50ZXJwcmlzZS8ke3RoaXMuaWR9JHtxdWVyeX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHdhbGxldHMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgRW50ZXJwcmlzZVxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqL1xuICBhc3luYyBjb2luV2FsbGV0cyhwYXJhbXM6IFJlY29yZDxzdHJpbmcsIG5ldmVyPiA9IHt9KTogUHJvbWlzZTxXYWxsZXRbXT4ge1xuICAgIGNvbnN0IHdhbGxldERhdGEgPSAoYXdhaXQgdGhpcy5iaXRnby5nZXQodGhpcy5iYXNlQ29pbi51cmwoJy93YWxsZXQvZW50ZXJwcmlzZS8nICsgdGhpcy5pZCkpLnJlc3VsdCgpKSBhcyBhbnk7XG4gICAgd2FsbGV0RGF0YS53YWxsZXRzID0gd2FsbGV0RGF0YS53YWxsZXRzLm1hcCgodykgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBXYWxsZXQodGhpcy5iaXRnbywgdGhpcy5iYXNlQ29pbiwgdyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHdhbGxldERhdGE7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB1c2VycyBhc3NvY2lhdGVkIHdpdGggdGhpcyBFbnRlcnByaXNlXG4gICAqIEBwYXJhbSBwYXJhbXNcbiAgICovXG4gIGFzeW5jIHVzZXJzKHBhcmFtczogUmVjb3JkPHN0cmluZywgbmV2ZXI+ID0ge30pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmJpdGdvLmdldCh0aGlzLnVybCgnL3VzZXInKSkucmVzdWx0KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBmZWUgYWRkcmVzcyBiYWxhbmNlIGZvciB0aGlzIEVudGVycHJpc2VcbiAgICogQHBhcmFtIHBhcmFtc1xuICAgKi9cbiAgYXN5bmMgZ2V0RmVlQWRkcmVzc0JhbGFuY2UocGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBuZXZlcj4gPSB7fSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYml0Z28uZ2V0KHRoaXMuY29pblVybCgnL2ZlZUFkZHJlc3NCYWxhbmNlJykpLnJlc3VsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHVzZXIgdG8gdGhpcyBFbnRlcnByaXNlXG4gICAqIEBwYXJhbSBwYXJhbXNcbiAgICovXG4gIGFzeW5jIGFkZFVzZXIocGFyYW1zOiBhbnkgPSB7fSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYml0Z28ucG9zdCh0aGlzLnVybCgnL3VzZXInKSkuc2VuZChwYXJhbXMpLnJlc3VsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHVzZXIgZnJvbSB0aGlzIEVudGVycHJpc2VcbiAgICogQHBhcmFtIHBhcmFtc1xuICAgKi9cbiAgYXN5bmMgcmVtb3ZlVXNlcihwYXJhbXM6IGFueSA9IHt9KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5iaXRnby5kZWwodGhpcy51cmwoJy91c2VyJykpLnNlbmQocGFyYW1zKS5yZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGZpcnN0IHBlbmRpbmcgdHJhbnNhY3Rpb24gZm9yIHRoaXMgRW50ZXJwcmlzZVxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqL1xuICBhc3luYyBnZXRGaXJzdFBlbmRpbmdUcmFuc2FjdGlvbihwYXJhbXM6IFJlY29yZDxzdHJpbmcsIG5ldmVyPiA9IHt9KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gZ2V0Rmlyc3RQZW5kaW5nVHJhbnNhY3Rpb24oeyBlbnRlcnByaXNlSWQ6IHRoaXMuaWQgfSwgdGhpcy5iYXNlQ29pbiwgdGhpcy5iaXRnbyk7XG4gIH1cblxuICAvKipcbiAgICogTWFuYWdlIHNldHRsZW1lbnRzIGZvciBhbiBlbnRlcnByaXNlXG4gICAqL1xuICBzZXR0bGVtZW50cygpOiBTZXR0bGVtZW50cyB7XG4gICAgcmV0dXJuIG5ldyBTZXR0bGVtZW50cyh0aGlzLmJpdGdvLCB0aGlzLmlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYW5hZ2UgYWZmaXJtYXRpb25zIGZvciBhbiBlbnRlcnByaXNlXG4gICAqL1xuICBhZmZpcm1hdGlvbnMoKTogQWZmaXJtYXRpb25zIHtcbiAgICByZXR1cm4gbmV3IEFmZmlybWF0aW9ucyh0aGlzLmJpdGdvLCB0aGlzLmlkKTtcbiAgfVxufVxuIl19