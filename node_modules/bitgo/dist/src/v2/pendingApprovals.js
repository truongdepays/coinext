"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PendingApprovals = void 0;
/**
 * @prettier
 */
const _ = require("lodash");
const debugLib = require("debug");
const sdk_core_1 = require("@bitgo/sdk-core");
const pendingApproval_1 = require("./pendingApproval");
const { validateParams } = sdk_core_1.common;
const debug = debugLib('bitgo:v2:pendingApprovals');
class PendingApprovals {
    constructor(bitgo, baseCoin) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
    }
    /**
     * List the pending approvals available to the user
     * @param params
     */
    async list(params = {}) {
        validateParams(params, [], ['walletId', 'enterpriseId']);
        const queryParams = {};
        if (_.isString(params.walletId)) {
            queryParams.walletId = params.walletId;
        }
        if (_.isString(params.enterpriseId)) {
            queryParams.enterprise = params.enterpriseId;
        }
        if (Object.keys(queryParams).length !== 1) {
            throw new Error('must provide exactly 1 of walletId or enterpriseId to get pending approvals on');
        }
        const body = (await this.bitgo.get(this.baseCoin.url('/pendingapprovals')).query(queryParams).result());
        body.pendingApprovals = body.pendingApprovals.map((currentApproval) => new pendingApproval_1.PendingApproval(this.bitgo, this.baseCoin, currentApproval));
        return body;
    }
    /**
     * Fetch an existing pending approval
     * @param params
     */
    async get(params = {}) {
        validateParams(params, ['id'], []);
        const approvalData = (await this.bitgo.get(this.baseCoin.url('/pendingapprovals/' + params.id)).result());
        let approvalWallet;
        if (approvalData.wallet) {
            try {
                approvalWallet = await this.baseCoin.wallets().get({ id: approvalData.wallet });
            }
            catch (e) {
                // nothing to be done here, although it's probably noteworthy that a non-existent wallet is referenced
                debug('failed to get wallet %s, referenced by pending approval %s', approvalData.wallet, params.id);
            }
        }
        return new pendingApproval_1.PendingApproval(this.bitgo, this.baseCoin, approvalData, approvalWallet);
    }
}
exports.PendingApprovals = PendingApprovals;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVuZGluZ0FwcHJvdmFscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92Mi9wZW5kaW5nQXBwcm92YWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOztHQUVHO0FBQ0gsNEJBQTRCO0FBQzVCLGtDQUFrQztBQUdsQyw4Q0FBeUM7QUFDekMsdURBQW9EO0FBR3BELE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxpQkFBTSxDQUFDO0FBQ2xDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBZXBELE1BQWEsZ0JBQWdCO0lBSTNCLFlBQVksS0FBWSxFQUFFLFFBQWtCO1FBQzFDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQXNDLEVBQUU7UUFDakQsY0FBYyxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUN6RCxNQUFNLFdBQVcsR0FBUSxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUMvQixXQUFXLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7U0FDeEM7UUFDRCxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ25DLFdBQVcsQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQztTQUM5QztRQUVELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0ZBQWdGLENBQUMsQ0FBQztTQUNuRztRQUVELE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFRLENBQUM7UUFDL0csSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQy9DLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxJQUFJLGlDQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUNyRixDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFvQyxFQUFFO1FBQzlDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVuQyxNQUFNLFlBQVksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQVEsQ0FBQztRQUNqSCxJQUFJLGNBQWMsQ0FBQztRQUNuQixJQUFJLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDdkIsSUFBSTtnQkFDRixjQUFjLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQzthQUNqRjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLHNHQUFzRztnQkFDdEcsS0FBSyxDQUFDLDREQUE0RCxFQUFFLFlBQVksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ3JHO1NBQ0Y7UUFDRCxPQUFPLElBQUksaUNBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsWUFBWSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3RGLENBQUM7Q0FDRjtBQXJERCw0Q0FxREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcmV0dGllclxuICovXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgKiBhcyBkZWJ1Z0xpYiBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBCaXRHbyB9IGZyb20gJy4uL2JpdGdvJztcblxuaW1wb3J0IHsgY29tbW9uIH0gZnJvbSAnQGJpdGdvL3Nkay1jb3JlJztcbmltcG9ydCB7IFBlbmRpbmdBcHByb3ZhbCB9IGZyb20gJy4vcGVuZGluZ0FwcHJvdmFsJztcbmltcG9ydCB7IEJhc2VDb2luIH0gZnJvbSAnLi9iYXNlQ29pbic7XG5cbmNvbnN0IHsgdmFsaWRhdGVQYXJhbXMgfSA9IGNvbW1vbjtcbmNvbnN0IGRlYnVnID0gZGVidWdMaWIoJ2JpdGdvOnYyOnBlbmRpbmdBcHByb3ZhbHMnKTtcblxuZXhwb3J0IGludGVyZmFjZSBMaXN0UGVuZGluZ0FwcHJvdmFsc09wdGlvbnMge1xuICB3YWxsZXRJZD86IHN0cmluZztcbiAgZW50ZXJwcmlzZUlkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFBlbmRpbmdBcHByb3ZhbE9wdGlvbnMge1xuICBpZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMaXN0UGVuZGluZ0FwcHJvdmFsc1Jlc3VsdCB7XG4gIHBlbmRpbmdBcHByb3ZhbHM6IFBlbmRpbmdBcHByb3ZhbFtdO1xufVxuXG5leHBvcnQgY2xhc3MgUGVuZGluZ0FwcHJvdmFscyB7XG4gIHByaXZhdGUgcmVhZG9ubHkgYml0Z286IEJpdEdvO1xuICBwcml2YXRlIHJlYWRvbmx5IGJhc2VDb2luOiBCYXNlQ29pbjtcblxuICBjb25zdHJ1Y3RvcihiaXRnbzogQml0R28sIGJhc2VDb2luOiBCYXNlQ29pbikge1xuICAgIHRoaXMuYml0Z28gPSBiaXRnbztcbiAgICB0aGlzLmJhc2VDb2luID0gYmFzZUNvaW47XG4gIH1cblxuICAvKipcbiAgICogTGlzdCB0aGUgcGVuZGluZyBhcHByb3ZhbHMgYXZhaWxhYmxlIHRvIHRoZSB1c2VyXG4gICAqIEBwYXJhbSBwYXJhbXNcbiAgICovXG4gIGFzeW5jIGxpc3QocGFyYW1zOiBMaXN0UGVuZGluZ0FwcHJvdmFsc09wdGlvbnMgPSB7fSk6IFByb21pc2U8TGlzdFBlbmRpbmdBcHByb3ZhbHNSZXN1bHQ+IHtcbiAgICB2YWxpZGF0ZVBhcmFtcyhwYXJhbXMsIFtdLCBbJ3dhbGxldElkJywgJ2VudGVycHJpc2VJZCddKTtcbiAgICBjb25zdCBxdWVyeVBhcmFtczogYW55ID0ge307XG4gICAgaWYgKF8uaXNTdHJpbmcocGFyYW1zLndhbGxldElkKSkge1xuICAgICAgcXVlcnlQYXJhbXMud2FsbGV0SWQgPSBwYXJhbXMud2FsbGV0SWQ7XG4gICAgfVxuICAgIGlmIChfLmlzU3RyaW5nKHBhcmFtcy5lbnRlcnByaXNlSWQpKSB7XG4gICAgICBxdWVyeVBhcmFtcy5lbnRlcnByaXNlID0gcGFyYW1zLmVudGVycHJpc2VJZDtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMocXVlcnlQYXJhbXMpLmxlbmd0aCAhPT0gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtdXN0IHByb3ZpZGUgZXhhY3RseSAxIG9mIHdhbGxldElkIG9yIGVudGVycHJpc2VJZCB0byBnZXQgcGVuZGluZyBhcHByb3ZhbHMgb24nKTtcbiAgICB9XG5cbiAgICBjb25zdCBib2R5ID0gKGF3YWl0IHRoaXMuYml0Z28uZ2V0KHRoaXMuYmFzZUNvaW4udXJsKCcvcGVuZGluZ2FwcHJvdmFscycpKS5xdWVyeShxdWVyeVBhcmFtcykucmVzdWx0KCkpIGFzIGFueTtcbiAgICBib2R5LnBlbmRpbmdBcHByb3ZhbHMgPSBib2R5LnBlbmRpbmdBcHByb3ZhbHMubWFwKFxuICAgICAgKGN1cnJlbnRBcHByb3ZhbCkgPT4gbmV3IFBlbmRpbmdBcHByb3ZhbCh0aGlzLmJpdGdvLCB0aGlzLmJhc2VDb2luLCBjdXJyZW50QXBwcm92YWwpXG4gICAgKTtcbiAgICByZXR1cm4gYm9keTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBhbiBleGlzdGluZyBwZW5kaW5nIGFwcHJvdmFsXG4gICAqIEBwYXJhbSBwYXJhbXNcbiAgICovXG4gIGFzeW5jIGdldChwYXJhbXM6IEdldFBlbmRpbmdBcHByb3ZhbE9wdGlvbnMgPSB7fSk6IFByb21pc2U8UGVuZGluZ0FwcHJvdmFsPiB7XG4gICAgdmFsaWRhdGVQYXJhbXMocGFyYW1zLCBbJ2lkJ10sIFtdKTtcblxuICAgIGNvbnN0IGFwcHJvdmFsRGF0YSA9IChhd2FpdCB0aGlzLmJpdGdvLmdldCh0aGlzLmJhc2VDb2luLnVybCgnL3BlbmRpbmdhcHByb3ZhbHMvJyArIHBhcmFtcy5pZCkpLnJlc3VsdCgpKSBhcyBhbnk7XG4gICAgbGV0IGFwcHJvdmFsV2FsbGV0O1xuICAgIGlmIChhcHByb3ZhbERhdGEud2FsbGV0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBhcHByb3ZhbFdhbGxldCA9IGF3YWl0IHRoaXMuYmFzZUNvaW4ud2FsbGV0cygpLmdldCh7IGlkOiBhcHByb3ZhbERhdGEud2FsbGV0IH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBub3RoaW5nIHRvIGJlIGRvbmUgaGVyZSwgYWx0aG91Z2ggaXQncyBwcm9iYWJseSBub3Rld29ydGh5IHRoYXQgYSBub24tZXhpc3RlbnQgd2FsbGV0IGlzIHJlZmVyZW5jZWRcbiAgICAgICAgZGVidWcoJ2ZhaWxlZCB0byBnZXQgd2FsbGV0ICVzLCByZWZlcmVuY2VkIGJ5IHBlbmRpbmcgYXBwcm92YWwgJXMnLCBhcHByb3ZhbERhdGEud2FsbGV0LCBwYXJhbXMuaWQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFBlbmRpbmdBcHByb3ZhbCh0aGlzLmJpdGdvLCB0aGlzLmJhc2VDb2luLCBhcHByb3ZhbERhdGEsIGFwcHJvdmFsV2FsbGV0KTtcbiAgfVxufVxuIl19