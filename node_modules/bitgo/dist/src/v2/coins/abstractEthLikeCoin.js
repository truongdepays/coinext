"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractEthLikeCoin = void 0;
const account_lib_1 = require("@bitgo/account-lib");
const bip32 = require("bip32");
const crypto_1 = require("crypto");
const baseCoin_1 = require("../baseCoin");
const errors_1 = require("../../errors");
const bignumber_js_1 = require("bignumber.js");
class AbstractEthLikeCoin extends baseCoin_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    getChain() {
        return this._staticsCoin.name;
    }
    /**
     * Get the base chain that the coin exists on.
     */
    getBaseChain() {
        return this.getChain();
    }
    getFamily() {
        return this._staticsCoin.family;
    }
    getFullName() {
        return this._staticsCoin.fullName;
    }
    getBaseFactor() {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    }
    valuelessTransferAllowed() {
        return true;
    }
    isValidAddress(address) {
        if (!address) {
            return false;
        }
        return account_lib_1.Eth.Utils.isValidEthAddress(address);
    }
    generateKeyPair(seed) {
        const extendedKey = bip32.fromSeed(seed || crypto_1.randomBytes(32));
        const xpub = extendedKey.neutered().toBase58();
        return {
            pub: xpub,
            prv: extendedKey.toBase58(),
        };
    }
    async parseTransaction(params) {
        return {};
    }
    isWalletAddress() {
        throw new errors_1.MethodNotImplementedError();
    }
    async verifyTransaction(params) {
        return true;
    }
    async signTransaction(params) {
        const txBuilder = this.getTransactionBuilder();
        txBuilder.from(params.txPrebuild.txHex);
        txBuilder.transfer().key(new account_lib_1.Eth.KeyPair({ prv: params.prv }).getKeys().prv);
        const transaction = await txBuilder.build();
        const recipients = transaction.outputs.map((output) => ({ address: output.address, amount: output.value }));
        return {
            halfSigned: {
                txHex: transaction.toBroadcastFormat(),
                recipients: recipients,
                expiration: params.txPrebuild.expireTime,
            },
        };
    }
    isValidPub(pub) {
        let valid = true;
        try {
            new account_lib_1.Eth.KeyPair({ pub });
        }
        catch (e) {
            valid = false;
        }
        return valid;
    }
    /**
     * Builds a funds recovery transaction without BitGo.
     * We need to do three queries during this:
     * 1) Node query - how much money is in the account
     * 2) Build transaction - build our transaction for the amount
     * 3) Send signed build - send our signed build to a public node
     * @param params The options with which to recover
     */
    async recover(params) {
        throw new errors_1.MethodNotImplementedError();
    }
    /**
     * Explain a transaction from txHex
     * @param params The options with which to explain the transaction
     */
    async explainTransaction(params) {
        const txHex = params.txHex || (params.halfSigned && params.halfSigned.txHex);
        if (!txHex || !params.feeInfo) {
            throw new Error('missing explain tx parameters');
        }
        const txBuilder = this.getTransactionBuilder();
        txBuilder.from(txHex);
        const tx = await txBuilder.build();
        const outputs = tx.outputs.map((output) => {
            return {
                address: output.address,
                amount: output.value,
            };
        });
        const displayOrder = ['id', 'outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee'];
        return {
            displayOrder,
            id: tx.id,
            outputs: outputs,
            outputAmount: outputs
                .reduce((accumulator, output) => accumulator.plus(output.amount), new bignumber_js_1.default('0'))
                .toFixed(0),
            changeOutputs: [],
            changeAmount: '0',
            fee: params.feeInfo,
        };
    }
    /**
     * Create a new transaction builder for the current chain
     * @return a new transaction builder
     */
    getTransactionBuilder() {
        return account_lib_1.getBuilder(this.getBaseChain());
    }
}
exports.AbstractEthLikeCoin = AbstractEthLikeCoin;
//# sourceMappingURL=data:application/json;base64,