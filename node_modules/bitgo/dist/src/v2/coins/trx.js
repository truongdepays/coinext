"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Trx = exports.NodeTypes = exports.MINIMUM_TRON_MSIG_TRANSACTION_FEE = void 0;
/**
 * @prettier
 */
const bip32 = require("bip32");
const secp256k1 = require("secp256k1");
const crypto_1 = require("crypto");
const bitgoAccountLib = require("@bitgo/account-lib");
const utxo_lib_1 = require("@bitgo/utxo-lib");
const request = require("superagent");
const sdk_core_1 = require("@bitgo/sdk-core");
const baseCoin_1 = require("../baseCoin");
const initiate_1 = require("../recovery/initiate");
const errors_1 = require("../../errors");
exports.MINIMUM_TRON_MSIG_TRANSACTION_FEE = 1e6;
var NodeTypes;
(function (NodeTypes) {
    NodeTypes[NodeTypes["Full"] = 0] = "Full";
    NodeTypes[NodeTypes["Solidity"] = 1] = "Solidity";
})(NodeTypes = exports.NodeTypes || (exports.NodeTypes = {}));
class Trx extends baseCoin_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    getChain() {
        return this._staticsCoin.name;
    }
    getFamily() {
        return this._staticsCoin.family;
    }
    getFullName() {
        return this._staticsCoin.fullName;
    }
    getBaseFactor() {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    }
    /** @inheritdoc */
    transactionDataAllowed() {
        return true;
    }
    static createInstance(bitgo, staticsCoin) {
        return new Trx(bitgo, staticsCoin);
    }
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed() {
        return true;
    }
    /**
     * Checks if this is a valid base58 or hex address
     * @param address
     */
    isValidAddress(address) {
        if (!address) {
            return false;
        }
        return this.isValidHexAddress(address) || bitgoAccountLib.Trx.Utils.isBase58Address(address);
    }
    /**
     * Checks if this is a valid hex address
     * @param address hex address
     */
    isValidHexAddress(address) {
        return address.length === 42 && /^(0x)?([0-9a-f]{2})+$/i.test(address);
    }
    /**
     * Generate ed25519 key pair
     *
     * @param seed
     * @returns {Object} object with generated pub, prv
     */
    generateKeyPair(seed) {
        // TODO: move this and address creation logic to account-lib
        if (!seed) {
            // An extended private key has both a normal 256 bit private key and a 256 bit chain code, both of which must be
            // random. 512 bits is therefore the maximum entropy and gives us maximum security against cracking.
            seed = crypto_1.randomBytes(512 / 8);
        }
        const hd = bip32.fromSeed(seed);
        return {
            pub: hd.neutered().toBase58(),
            prv: hd.toBase58(),
        };
    }
    isValidXpub(xpub) {
        try {
            return bip32.fromBase58(xpub).isNeutered();
        }
        catch (e) {
            return false;
        }
    }
    isValidPub(pub) {
        if (this.isValidXpub(pub)) {
            // xpubs can be converted into regular pubs, so technically it is a valid pub
            return true;
        }
        return new RegExp('^04[a-zA-Z0-9]{128}$').test(pub);
    }
    async parseTransaction(params) {
        return {};
    }
    isWalletAddress(params) {
        throw new errors_1.MethodNotImplementedError();
    }
    async verifyTransaction(params) {
        return true;
    }
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {Object} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @param params.wallet.addressVersion {String} this is the version of the Algorand multisig address generation format
     * @returns Bluebird<SignedTransaction>
     */
    async signTransaction(params) {
        const txBuilder = bitgoAccountLib.getBuilder(this.getChain()).from(params.txPrebuild.txHex);
        txBuilder.sign({ key: params.prv });
        const transaction = await txBuilder.build();
        const response = {
            txHex: JSON.stringify(transaction.toJson()),
        };
        if (transaction.toJson().signature.length >= 2) {
            return response;
        }
        // Half signed transaction
        return {
            halfSigned: response,
        };
    }
    /**
     * Return boolean indicating whether input is valid seed for the coin
     *
     * @param prv - the prv to be checked
     */
    isValidXprv(prv) {
        try {
            return !bip32.fromBase58(prv).isNeutered();
        }
        catch {
            return false;
        }
    }
    /**
     * Convert a message to string in hexadecimal format.
     *
     * @param message {Buffer|String} message to sign
     * @return the message as a hexadecimal string
     */
    toHexString(message) {
        if (typeof message === 'string') {
            return Buffer.from(message).toString('hex');
        }
        else if (Buffer.isBuffer(message)) {
            return message.toString('hex');
        }
        else {
            throw new Error('Invalid messaged passed to signMessage');
        }
    }
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     */
    async signMessage(key, message) {
        var _a;
        const toSign = this.toHexString(message);
        let prv = key.prv;
        if (this.isValidXprv(prv)) {
            prv = (_a = bip32.fromBase58(prv).privateKey) === null || _a === void 0 ? void 0 : _a.toString('hex');
        }
        if (!prv) {
            throw new Error('no privateKey');
        }
        let sig = bitgoAccountLib.Trx.Utils.signString(toSign, prv, true);
        // remove the preceding 0x
        sig = sig.replace(/^0x/, '');
        return Buffer.from(sig, 'hex');
    }
    /**
     * Converts an xpub to a uncompressed pub
     * @param xpub
     */
    xpubToUncompressedPub(xpub) {
        if (!this.isValidXpub(xpub)) {
            throw new Error('invalid xpub');
        }
        const publicKey = bip32.fromBase58(xpub, utxo_lib_1.networks.bitcoin).publicKey;
        return Buffer.from(secp256k1.publicKeyConvert(publicKey, false /* compressed */)).toString('hex');
    }
    /**
     * Modify prebuild before sending it to the server.
     * @param buildParams The whitelisted parameters for this prebuild
     */
    async getExtraPrebuildParams(buildParams) {
        if (buildParams.recipients[0].data && buildParams.feeLimit) {
            buildParams.recipients[0].feeLimit = buildParams.feeLimit;
        }
    }
    pubToHexAddress(pub) {
        const byteArrayAddr = bitgoAccountLib.Trx.Utils.getByteArrayFromHexAddress(pub);
        const rawAddress = bitgoAccountLib.Trx.Utils.getRawAddressFromPubKey(byteArrayAddr);
        return bitgoAccountLib.Trx.Utils.getHexAddressFromByteArray(rawAddress);
    }
    xprvToCompressedPrv(xprv) {
        if (!this.isValidXprv(xprv)) {
            throw new Error('invalid xprv');
        }
        const hdNode = bip32.fromBase58(xprv, utxo_lib_1.networks.bitcoin);
        if (!hdNode.privateKey) {
            throw new Error('no privateKey');
        }
        return hdNode.privateKey.toString('hex');
    }
    /**
     * Make a query to Trongrid for information such as balance, token balance, solidity calls
     * @param query {Object} key-value pairs of parameters to append after /api
     * @returns {Object} response from Trongrid
     */
    async recoveryPost(query) {
        let nodeUri = '';
        switch (query.node) {
            case NodeTypes.Full:
                nodeUri = sdk_core_1.common.Environments[this.bitgo.getEnv()].tronNodes.full;
                break;
            case NodeTypes.Solidity:
                nodeUri = sdk_core_1.common.Environments[this.bitgo.getEnv()].tronNodes.solidity;
                break;
            default:
                throw new Error('node type not found');
        }
        const response = await request
            .post(nodeUri + query.path)
            .type('json')
            .send(query.jsonObj);
        if (!response.ok) {
            throw new Error('could not reach Tron node');
        }
        // unfortunately, it doesn't look like most TRON nodes return valid json as body
        return JSON.parse(response.text);
    }
    /**
     * Query our explorer for the balance of an address
     * @param address {String} the address encoded in hex
     * @returns {BigNumber} address balance
     */
    async getAccountFromNode(address) {
        return await this.recoveryPost({
            path: '/walletsolidity/getaccount',
            jsonObj: { address },
            node: NodeTypes.Solidity,
        });
    }
    /**
     * Retrieves our build transaction from a node.
     * @param toAddr hex-encoded address
     * @param fromAddr hex-encoded address
     * @param amount
     */
    async getBuildTransaction(toAddr, fromAddr, amount) {
        // our addresses should be base58, we'll have to encode to hex
        return await this.recoveryPost({
            path: '/wallet/createtransaction',
            jsonObj: {
                to_address: toAddr,
                owner_address: fromAddr,
                amount,
            },
            node: NodeTypes.Full,
        });
    }
    /**
     * Throws an error if any keys in the ownerKeys collection don't match the keys array we pass
     * @param ownerKeys
     * @param keys
     */
    checkPermissions(ownerKeys, keys) {
        keys = keys.map((k) => k.toUpperCase());
        ownerKeys.map((key) => {
            const hexKey = key.address.toUpperCase();
            if (!keys.includes(hexKey)) {
                throw new Error(`pub address ${hexKey} not found in account`);
            }
            if (key.weight !== 1) {
                throw new Error('owner permission is invalid for this structure');
            }
        });
    }
    /**
     * Builds a funds recovery transaction without BitGo.
     * We need to do three queries during this:
     * 1) Node query - how much money is in the account
     * 2) Build transaction - build our transaction for the amount
     * 3) Send signed build - send our signed build to a public node
     * @param params
     */
    async recover(params) {
        const isKrsRecovery = initiate_1.getIsKrsRecovery(params);
        const isUnsignedSweep = initiate_1.getIsUnsignedSweep(params);
        if (!this.isValidAddress(params.recoveryDestination)) {
            throw new Error('Invalid destination address!');
        }
        // get our user, backup keys
        const keys = initiate_1.getBip32Keys(this.bitgo, params, { requireBitGoXpub: false });
        // we need to decode our bitgoKey to a base58 address
        const bitgoHexAddr = this.pubToHexAddress(this.xpubToUncompressedPub(params.bitgoKey));
        const recoveryAddressHex = bitgoAccountLib.Trx.Utils.getHexAddressFromBase58Address(params.recoveryDestination);
        // call the node to get our account balance
        const account = await this.getAccountFromNode(bitgoHexAddr);
        const recoveryAmount = account.balance;
        const userXPub = keys[0].neutered().toBase58();
        const userXPrv = keys[0].toBase58();
        const backupXPub = keys[1].neutered().toBase58();
        // construct the tx -
        // there's an assumption here being made about fees: for a wallet that hasn't been used in awhile, the implication is
        // it has maximum bandwidth. thus, a recovery should cost the minimum amount (1e6 sun or 1 Tron)
        if (exports.MINIMUM_TRON_MSIG_TRANSACTION_FEE > recoveryAmount) {
            throw new Error('Amount of funds to recover wouldnt be able to fund a send');
        }
        const recoveryAmountMinusFees = recoveryAmount - exports.MINIMUM_TRON_MSIG_TRANSACTION_FEE;
        const buildTx = await this.getBuildTransaction(recoveryAddressHex, bitgoHexAddr, recoveryAmountMinusFees);
        const keyHexAddresses = [
            this.pubToHexAddress(this.xpubToUncompressedPub(userXPub)),
            this.pubToHexAddress(this.xpubToUncompressedPub(backupXPub)),
            bitgoHexAddr,
        ];
        // run checks to ensure this is a valid tx - permissions match our signer keys
        this.checkPermissions(account.owner_permission.keys, keyHexAddresses);
        this.checkPermissions(account.active_permission[0].keys, keyHexAddresses);
        // construct our tx
        const txBuilder = bitgoAccountLib.getBuilder(this.getChain()).from(buildTx);
        // this tx should be enough to drop into a node
        if (isUnsignedSweep) {
            return {
                tx: (await txBuilder.build()).toJson(),
                recoveryAmount: recoveryAmountMinusFees,
            };
        }
        const userPrv = this.xprvToCompressedPrv(userXPrv);
        txBuilder.sign({ key: userPrv });
        // krs recoveries don't get signed
        if (!isKrsRecovery) {
            const backupXPrv = keys[1].toBase58();
            const backupPrv = this.xprvToCompressedPrv(backupXPrv);
            txBuilder.sign({ key: backupPrv });
        }
        return {
            tx: (await txBuilder.build()).toJson(),
            recoveryAmount: recoveryAmountMinusFees,
        };
    }
    /**
     * Explain a Tron transaction from txHex
     * @param params
     */
    async explainTransaction(params) {
        const txHex = params.txHex || (params.halfSigned && params.halfSigned.txHex);
        if (!txHex || !params.feeInfo) {
            throw new Error('missing explain tx parameters');
        }
        const txBuilder = bitgoAccountLib.getBuilder(this.getChain()).from(txHex);
        const tx = await txBuilder.build();
        const outputs = [
            {
                amount: tx.outputs[0].value.toString(),
                address: tx.outputs[0].address, // Should turn it into a readable format, aka base58
            },
        ];
        const displayOrder = [
            'id',
            'outputAmount',
            'changeAmount',
            'outputs',
            'changeOutputs',
            'fee',
            'timestamp',
            'expiration',
        ];
        return {
            displayOrder,
            id: tx.id,
            outputs,
            outputAmount: outputs[0].amount,
            changeOutputs: [],
            changeAmount: '0',
            fee: params.feeInfo,
            timestamp: tx.validFrom,
            expiration: tx.validTo,
        };
    }
}
exports.Trx = Trx;
//# sourceMappingURL=data:application/json;base64,