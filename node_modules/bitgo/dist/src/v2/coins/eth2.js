"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Eth2 = void 0;
/**
 * @prettier
 */
const _ = require("lodash");
const ethUtil = require("ethereumjs-util");
const request = require("superagent");
const account_lib_1 = require("@bitgo/account-lib");
const bignumber_js_1 = require("bignumber.js");
const baseCoin_1 = require("../baseCoin");
const sdk_core_1 = require("@bitgo/sdk-core");
const errors_1 = require("../../errors");
const keychains_1 = require("../keychains");
class Eth2 extends baseCoin_1.BaseCoin {
    static createInstance(bitgo) {
        return new Eth2(bitgo);
    }
    /** @inheritDoc */
    supportsBlsDkg() {
        return true;
    }
    /**
     * Returns the factor between the base unit and its smallest subdivison
     * @return {number}
     */
    getBaseFactor() {
        // 10^18
        return '1000000000000000000';
    }
    getChain() {
        return 'eth2';
    }
    getFamily() {
        return 'eth2';
    }
    getFullName() {
        return 'Ethereum 2.0';
    }
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed() {
        // false until phase 2 of eth2.0 rolled out
        return false;
    }
    /**
     * Flag for sending data along with transactions
     * @returns {boolean} True if okay to send tx data (ETH), false otherwise
     */
    transactionDataAllowed() {
        // false until phase 2 of eth2.0 rolled out
        return false;
    }
    /**
     * Evaluates whether a address string is valid for this coin
     * @param address
     */
    isValidAddress(address) {
        return this.isValidPub(address);
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin.
     *
     * @param {String} pub the pub to be checked
     * @returns {Boolean} is it valid?
     */
    isValidPub(pub) {
        return account_lib_1.Eth2.KeyPair.isValidPub(pub);
    }
    /**
     * Default gas price from platform
     * @returns {BigNumber}
     */
    getRecoveryGasPrice() {
        throw new Error('Method not yet implemented');
    }
    /**
     * Default gas limit from platform
     * @returns {BigNumber}
     */
    getRecoveryGasLimit() {
        throw new Error('Method not yet implemented');
    }
    /**
     * Specifies what key we will need for signing - ETH2 needs the backup, bitgo pubs.
     */
    keyIdsForSigning() {
        return [keychains_1.KeyIndices.USER, keychains_1.KeyIndices.BACKUP, keychains_1.KeyIndices.BITGO];
    }
    /**
     * Query Beaconscan for the balance of an address
     * @param address {String} the ETH address
     * @returns {BigNumber} address balance
     */
    async queryAddressBalance(address) {
        const result = await this.recoveryBlockchainExplorerQuery({
            module: 'account',
            action: 'balance',
            address: address,
        });
        return new bignumber_js_1.default(result.result, 10);
    }
    /**
     * Assemble keychain and half-sign prebuilt transaction
     * @param params
     * - txPrebuild
     * - prv
     * @returns {Promise<SignedTransaction>}
     */
    async signTransaction(params) {
        throw new Error('Method not yet implemented');
    }
    /**
     * Ensure either enterprise or newFeeAddress is passed, to know whether to create new key or use enterprise key
     * @param params
     * @param params.enterprise {String} the enterprise id to associate with this key
     * @param params.newFeeAddress {Boolean} create a new fee address (enterprise not needed in this case)
     */
    preCreateBitGo(params) {
        // We always need params object, since either enterprise or newFeeAddress is required
        if (!_.isObject(params)) {
            throw new Error(`preCreateBitGo must be passed a params object. Got ${params} (type ${typeof params})`);
        }
        if (_.isUndefined(params.enterprise)) {
            throw new Error('expecting enterprise when adding BitGo key');
        }
        if (!_.isUndefined(params.enterprise) && !_.isString(params.enterprise)) {
            throw new Error(`enterprise should be a string - got ${params.enterprise} (type ${typeof params.enterprise})`);
        }
    }
    /**
     * Queries public block explorer to get the next ETH nonce that should be used for the given ETH address
     * @param address
     * @returns Promise<number>
     */
    async getAddressNonce(address) {
        // Get nonce for backup key (should be 0)
        let nonce = 0;
        const result = await this.recoveryBlockchainExplorerQuery({
            module: 'account',
            action: 'txlist',
            address,
        });
        const backupKeyTxList = result.result;
        if (backupKeyTxList.length > 0) {
            // Calculate last nonce used
            const outgoingTxs = backupKeyTxList.filter((tx) => tx.from === address);
            nonce = outgoingTxs.length;
        }
        return nonce;
    }
    /**
     * Builds a funds recovery transaction without BitGo
     * @param params
     * @param params.userKey {String} [encrypted] xprv
     * @param params.backupKey {String} [encrypted] xprv or xpub if the xprv is held by a KRS provider
     * @param params.walletPassphrase {String} used to decrypt userKey and backupKey
     * @param params.walletContractAddress {String} the ETH address of the wallet contract
     * @param params.recoveryDestination {String} target address to send recovered funds to
     */
    recover(params) {
        throw new Error('recover not implemented');
    }
    /**
     * Make a query to Etherscan for information such as balance, token balance, solidity calls
     * @param query {Object} key-value pairs of parameters to append after /api
     * @returns {Object} response from Etherscan
     */
    async recoveryBlockchainExplorerQuery(query) {
        const response = await request.get(sdk_core_1.common.Environments[this.bitgo.getEnv()].eth2ExplorerBaseUrl).query(query);
        if (!response.ok) {
            throw new Error('could not reach BeaconScan');
        }
        return response.body;
    }
    /**
     * Generate BLS key pair
     *
     * @param seed - byte array to generate BLS key pair from
     * @returns {Object} object with generated pub and prv
     */
    generateKeyPair(seed) {
        let keyPair = new account_lib_1.Eth2.KeyPair();
        if (seed && account_lib_1.Eth2.KeyPair.isValidPrv(seed)) {
            const seedStr = '0x' + Buffer.from(seed).toString('hex');
            keyPair = new account_lib_1.Eth2.KeyPair({ prv: seedStr });
        }
        else if (seed) {
            throw new Error('trying to generate keypair from invalid seed');
        }
        return {
            pub: keyPair.getKeys().publicShare,
            prv: keyPair.getKeys().prv || '',
            secretShares: keyPair.getKeys().secretShares || [],
        };
    }
    async parseTransaction(params) {
        return {};
    }
    isWalletAddress(params) {
        throw new errors_1.MethodNotImplementedError();
    }
    async verifyTransaction(params) {
        return true;
    }
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     */
    async signMessage(key, message) {
        const keyPair = new account_lib_1.Eth2.KeyPair({ prv: key.prv });
        let messageToSign = Buffer.from(message);
        if (account_lib_1.Eth2.KeyPair.isValidPub(message)) {
            // if we are doing a key signature, we should decode the message as a hex string
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore BG-34579: known compatibility issue with @types/ethereumjs-util
            messageToSign = Buffer.from(ethUtil.stripHexPrefix(message), 'hex');
        }
        const signedMessage = await keyPair.sign(messageToSign);
        return ethUtil.toBuffer(signedMessage);
    }
    aggregateShares(shares) {
        const commonPub = account_lib_1.Eth2.KeyPair.aggregatePubkeys(shares.pubShares);
        const prv = account_lib_1.Eth2.KeyPair.aggregatePrvkeys(shares.prvShares);
        return {
            pub: commonPub,
            prv,
            secretShares: shares.prvShares,
        };
    }
}
exports.Eth2 = Eth2;
//# sourceMappingURL=data:application/json;base64,