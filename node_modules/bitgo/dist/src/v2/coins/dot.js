"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dot = void 0;
const accountLib = require("@bitgo/account-lib");
const _ = require("lodash");
const errors_1 = require("../../errors");
const baseCoin_1 = require("../baseCoin");
const dotUtils = accountLib.Dot.Utils.default;
class Dot extends baseCoin_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        this.MAX_VALIDITY_DURATION = 2400;
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    static createInstance(bitgo, staticsCoin) {
        return new Dot(bitgo, staticsCoin);
    }
    getChain() {
        return 'dot';
    }
    getBaseChain() {
        return 'dot';
    }
    getFamily() {
        return 'dot';
    }
    getFullName() {
        return 'Polkadot';
    }
    getBaseFactor() {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    }
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed() {
        return true;
    }
    /** @inheritDoc */
    supportsTss() {
        return true;
    }
    allowsAccountConsolidations() {
        return true;
    }
    /**
     * Generate ed25519 key pair
     *
     * @param seed
     * @returns {Object} object with generated pub, prv
     */
    generateKeyPair(seed) {
        const keyPair = seed
            ? dotUtils.keyPairFromSeed(new Uint8Array(seed))
            : new accountLib.Dot.KeyPair();
        const keys = keyPair.getKeys();
        if (!keys.prv) {
            throw new Error('Missing prv in key generation.');
        }
        return {
            pub: keys.pub,
            prv: keys.prv,
        };
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin.
     *
     * @param {String} pub the pub to be checked
     * @returns {Boolean} is it valid?
     */
    isValidPub(pub) {
        return dotUtils.isValidPublicKey(pub);
    }
    /**
     * Return boolean indicating whether the supplied private key is a valid dot private key
     *
     * @param {String} prv the prv to be checked
     * @returns {Boolean} is it valid?
     */
    isValidPrv(prv) {
        return dotUtils.isValidPrivateKey(prv);
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin
     *
     * @param {String} address the pub to be checked
     * @returns {Boolean} is it valid?
     */
    isValidAddress(address) {
        return dotUtils.isValidAddress(address);
    }
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     * @return {Buffer} A signature over the given message using the given key
     */
    async signMessage(key, message) {
        const msg = Buffer.isBuffer(message) ? message.toString('utf8') : message;
        // reconstitute keys and sign
        return Buffer.from(new accountLib.Dot.KeyPair({ prv: key.prv }).signMessage(msg));
    }
    /**
     * Explain/parse transaction
     * @param params
     * @param callback
     */
    explainTransaction(params) {
        throw new errors_1.MethodNotImplementedError('Dot recovery not implemented');
    }
    verifySignTransactionParams(params) {
        const prv = params.prv;
        const txHex = params.txPrebuild.txHex;
        if (_.isUndefined(txHex)) {
            throw new Error('missing txPrebuild parameter');
        }
        if (!_.isString(txHex)) {
            throw new Error(`txPrebuild must be an object, got type ${typeof txHex}`);
        }
        if (_.isUndefined(prv)) {
            throw new Error('missing prv parameter to sign transaction');
        }
        if (!_.isString(prv)) {
            throw new Error(`prv must be a string, got type ${typeof prv}`);
        }
        if (!_.has(params, 'pubs')) {
            throw new Error('missing public key parameter to sign transaction');
        }
        return { txHex, prv };
    }
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {TransactionPrebuild} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @returns {Promise<SignedTransaction>}
     */
    async signTransaction(params) {
        const { txHex, prv } = this.verifySignTransactionParams(params);
        const factory = accountLib.register(this.getChain(), accountLib.Dot.TransactionBuilderFactory);
        const txBuilder = factory.from(txHex);
        const keyPair = new accountLib.Dot.KeyPair({ prv: prv });
        const { referenceBlock, blockNumber, transactionVersion, sender } = params.txPrebuild.transaction;
        txBuilder
            .validity({ firstValid: blockNumber, maxDuration: this.MAX_VALIDITY_DURATION })
            .referenceBlock(referenceBlock)
            .version(transactionVersion)
            .sender({ address: sender })
            .sign({ key: keyPair.getKeys().prv });
        const transaction = await txBuilder.build();
        if (!transaction) {
            throw new Error('Invalid transaction');
        }
        const signedTxHex = transaction.toBroadcastFormat();
        return { txHex: signedTxHex };
    }
    /**
     * Builds a funds recovery transaction without BitGo
     * @param params
     */
    async recover(params) {
        throw new errors_1.MethodNotImplementedError('Dot recovery not implemented');
    }
    async parseTransaction(params) {
        return {};
    }
    isWalletAddress(params) {
        throw new errors_1.MethodNotImplementedError();
    }
    async verifyTransaction(params) {
        return true;
    }
    getAddressFromPublicKey(Pubkey) {
        return new accountLib.Dot.KeyPair({ pub: Pubkey }).getAddress();
    }
}
exports.Dot = Dot;
//# sourceMappingURL=data:application/json;base64,