"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ltc = void 0;
/**
 * @prettier
 */
const utxolib = require("@bitgo/utxo-lib");
const abstractUtxoCoin_1 = require("./abstractUtxoCoin");
const errors_1 = require("../../errors");
class Ltc extends abstractUtxoCoin_1.AbstractUtxoCoin {
    constructor(bitgo, network) {
        super(bitgo, network || utxolib.networks.litecoin);
        // use legacy script hash version, which is the current Bitcoin one
        this.altScriptHash = utxolib.networks.bitcoin.scriptHash;
        // do not support alt destinations in prod
        this.supportAltScriptDestination = false;
    }
    static createInstance(bitgo) {
        return new Ltc(bitgo);
    }
    getChain() {
        return 'ltc';
    }
    getFamily() {
        return 'ltc';
    }
    getFullName() {
        return 'Litecoin';
    }
    supportsBlockTarget() {
        return false;
    }
    /**
     * Canonicalize a Litecoin address for a specific scriptHash version
     * @param address
     * @param scriptHashVersion 1 or 2, where 1 is the old version and 2 is the new version
     * @returns {*} address string
     */
    canonicalAddress(address, scriptHashVersion = 2) {
        if (!this.isValidAddress(address, true)) {
            throw new errors_1.InvalidAddressError();
        }
        try {
            // try deserializing as bech32
            utxolib.address.fromBech32(address);
            // address may be all uppercase, but canonical bech32 addresses are all lowercase
            return address.toLowerCase();
        }
        catch (e) {
            // not a valid bech32, try to decode as base58
        }
        const addressDetails = utxolib.address.fromBase58Check(address, this.network);
        if (addressDetails.version === this.network.pubKeyHash) {
            // the pub keys never changed
            return address;
        }
        if ([1, 2].indexOf(scriptHashVersion) === -1) {
            throw new Error('scriptHashVersion needs to be either 1 or 2');
        }
        const scriptHashMap = {
            // altScriptHash is the old one
            1: this.altScriptHash,
            // by default we're using the new one
            2: this.network.scriptHash,
        };
        const newScriptHash = scriptHashMap[scriptHashVersion];
        return utxolib.address.toBase58Check(addressDetails.hash, newScriptHash, this.network);
    }
    calculateRecoveryAddress(scriptHashScript) {
        const bitgoAddress = utxolib.address.fromOutputScript(scriptHashScript, this.network);
        return this.canonicalAddress(bitgoAddress, 1);
    }
}
exports.Ltc = Ltc;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHRjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3YyL2NvaW5zL2x0Yy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNILDJDQUEyQztBQUUzQyx5REFBbUU7QUFHbkUseUNBQW1EO0FBRW5ELE1BQWEsR0FBSSxTQUFRLG1DQUFnQjtJQUN2QyxZQUFZLEtBQVksRUFBRSxPQUFxQjtRQUM3QyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25ELG1FQUFtRTtRQUNuRSxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUN6RCwwQ0FBMEM7UUFDMUMsSUFBSSxDQUFDLDJCQUEyQixHQUFHLEtBQUssQ0FBQztJQUMzQyxDQUFDO0lBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFZO1FBQ2hDLE9BQU8sSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxtQkFBbUI7UUFDakIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxnQkFBZ0IsQ0FBQyxPQUFlLEVBQUUsaUJBQWlCLEdBQUcsQ0FBQztRQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDdkMsTUFBTSxJQUFJLDRCQUFtQixFQUFFLENBQUM7U0FDakM7UUFFRCxJQUFJO1lBQ0YsOEJBQThCO1lBQzlCLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3BDLGlGQUFpRjtZQUNqRixPQUFPLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUM5QjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsOENBQThDO1NBQy9DO1FBRUQsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5RSxJQUFJLGNBQWMsQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUU7WUFDdEQsNkJBQTZCO1lBQzdCLE9BQU8sT0FBTyxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUM1QyxNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7U0FDaEU7UUFDRCxNQUFNLGFBQWEsR0FBRztZQUNwQiwrQkFBK0I7WUFDL0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ3JCLHFDQUFxQztZQUNyQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVO1NBQzNCLENBQUM7UUFDRixNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN2RCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBRUQsd0JBQXdCLENBQUMsZ0JBQXdCO1FBQy9DLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RGLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDO0NBQ0Y7QUF4RUQsa0JBd0VDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0ICogYXMgdXR4b2xpYiBmcm9tICdAYml0Z28vdXR4by1saWInO1xuXG5pbXBvcnQgeyBBYnN0cmFjdFV0eG9Db2luLCBVdHhvTmV0d29yayB9IGZyb20gJy4vYWJzdHJhY3RVdHhvQ29pbic7XG5pbXBvcnQgeyBCYXNlQ29pbiB9IGZyb20gJy4uL2Jhc2VDb2luJztcbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vLi4vYml0Z28nO1xuaW1wb3J0IHsgSW52YWxpZEFkZHJlc3NFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9ycyc7XG5cbmV4cG9ydCBjbGFzcyBMdGMgZXh0ZW5kcyBBYnN0cmFjdFV0eG9Db2luIHtcbiAgY29uc3RydWN0b3IoYml0Z286IEJpdEdvLCBuZXR3b3JrPzogVXR4b05ldHdvcmspIHtcbiAgICBzdXBlcihiaXRnbywgbmV0d29yayB8fCB1dHhvbGliLm5ldHdvcmtzLmxpdGVjb2luKTtcbiAgICAvLyB1c2UgbGVnYWN5IHNjcmlwdCBoYXNoIHZlcnNpb24sIHdoaWNoIGlzIHRoZSBjdXJyZW50IEJpdGNvaW4gb25lXG4gICAgdGhpcy5hbHRTY3JpcHRIYXNoID0gdXR4b2xpYi5uZXR3b3Jrcy5iaXRjb2luLnNjcmlwdEhhc2g7XG4gICAgLy8gZG8gbm90IHN1cHBvcnQgYWx0IGRlc3RpbmF0aW9ucyBpbiBwcm9kXG4gICAgdGhpcy5zdXBwb3J0QWx0U2NyaXB0RGVzdGluYXRpb24gPSBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVJbnN0YW5jZShiaXRnbzogQml0R28pOiBCYXNlQ29pbiB7XG4gICAgcmV0dXJuIG5ldyBMdGMoYml0Z28pO1xuICB9XG5cbiAgZ2V0Q2hhaW4oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ2x0Yyc7XG4gIH1cblxuICBnZXRGYW1pbHkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ2x0Yyc7XG4gIH1cblxuICBnZXRGdWxsTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnTGl0ZWNvaW4nO1xuICB9XG5cbiAgc3VwcG9ydHNCbG9ja1RhcmdldCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQ2Fub25pY2FsaXplIGEgTGl0ZWNvaW4gYWRkcmVzcyBmb3IgYSBzcGVjaWZpYyBzY3JpcHRIYXNoIHZlcnNpb25cbiAgICogQHBhcmFtIGFkZHJlc3NcbiAgICogQHBhcmFtIHNjcmlwdEhhc2hWZXJzaW9uIDEgb3IgMiwgd2hlcmUgMSBpcyB0aGUgb2xkIHZlcnNpb24gYW5kIDIgaXMgdGhlIG5ldyB2ZXJzaW9uXG4gICAqIEByZXR1cm5zIHsqfSBhZGRyZXNzIHN0cmluZ1xuICAgKi9cbiAgY2Fub25pY2FsQWRkcmVzcyhhZGRyZXNzOiBzdHJpbmcsIHNjcmlwdEhhc2hWZXJzaW9uID0gMik6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWRBZGRyZXNzKGFkZHJlc3MsIHRydWUpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFkZHJlc3NFcnJvcigpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyB0cnkgZGVzZXJpYWxpemluZyBhcyBiZWNoMzJcbiAgICAgIHV0eG9saWIuYWRkcmVzcy5mcm9tQmVjaDMyKGFkZHJlc3MpO1xuICAgICAgLy8gYWRkcmVzcyBtYXkgYmUgYWxsIHVwcGVyY2FzZSwgYnV0IGNhbm9uaWNhbCBiZWNoMzIgYWRkcmVzc2VzIGFyZSBhbGwgbG93ZXJjYXNlXG4gICAgICByZXR1cm4gYWRkcmVzcy50b0xvd2VyQ2FzZSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5vdCBhIHZhbGlkIGJlY2gzMiwgdHJ5IHRvIGRlY29kZSBhcyBiYXNlNThcbiAgICB9XG5cbiAgICBjb25zdCBhZGRyZXNzRGV0YWlscyA9IHV0eG9saWIuYWRkcmVzcy5mcm9tQmFzZTU4Q2hlY2soYWRkcmVzcywgdGhpcy5uZXR3b3JrKTtcbiAgICBpZiAoYWRkcmVzc0RldGFpbHMudmVyc2lvbiA9PT0gdGhpcy5uZXR3b3JrLnB1YktleUhhc2gpIHtcbiAgICAgIC8vIHRoZSBwdWIga2V5cyBuZXZlciBjaGFuZ2VkXG4gICAgICByZXR1cm4gYWRkcmVzcztcbiAgICB9XG5cbiAgICBpZiAoWzEsIDJdLmluZGV4T2Yoc2NyaXB0SGFzaFZlcnNpb24pID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzY3JpcHRIYXNoVmVyc2lvbiBuZWVkcyB0byBiZSBlaXRoZXIgMSBvciAyJyk7XG4gICAgfVxuICAgIGNvbnN0IHNjcmlwdEhhc2hNYXAgPSB7XG4gICAgICAvLyBhbHRTY3JpcHRIYXNoIGlzIHRoZSBvbGQgb25lXG4gICAgICAxOiB0aGlzLmFsdFNjcmlwdEhhc2gsXG4gICAgICAvLyBieSBkZWZhdWx0IHdlJ3JlIHVzaW5nIHRoZSBuZXcgb25lXG4gICAgICAyOiB0aGlzLm5ldHdvcmsuc2NyaXB0SGFzaCxcbiAgICB9O1xuICAgIGNvbnN0IG5ld1NjcmlwdEhhc2ggPSBzY3JpcHRIYXNoTWFwW3NjcmlwdEhhc2hWZXJzaW9uXTtcbiAgICByZXR1cm4gdXR4b2xpYi5hZGRyZXNzLnRvQmFzZTU4Q2hlY2soYWRkcmVzc0RldGFpbHMuaGFzaCwgbmV3U2NyaXB0SGFzaCwgdGhpcy5uZXR3b3JrKTtcbiAgfVxuXG4gIGNhbGN1bGF0ZVJlY292ZXJ5QWRkcmVzcyhzY3JpcHRIYXNoU2NyaXB0OiBCdWZmZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGJpdGdvQWRkcmVzcyA9IHV0eG9saWIuYWRkcmVzcy5mcm9tT3V0cHV0U2NyaXB0KHNjcmlwdEhhc2hTY3JpcHQsIHRoaXMubmV0d29yayk7XG4gICAgcmV0dXJuIHRoaXMuY2Fub25pY2FsQWRkcmVzcyhiaXRnb0FkZHJlc3MsIDEpO1xuICB9XG59XG4iXX0=