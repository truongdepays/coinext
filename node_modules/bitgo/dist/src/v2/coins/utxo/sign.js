"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.signAndVerifyWalletTransaction = exports.TransactionSigningError = exports.InputSigningError = void 0;
/**
 * @prettier
 */
const utxolib = require("@bitgo/utxo-lib");
const bitgo_1 = require("@bitgo/utxo-lib/dist/src/bitgo");
const debugLib = require("debug");
const replayProtection_1 = require("./replayProtection");
const debug = debugLib('bitgo:v2:utxo');
class InputSigningError extends Error {
    constructor(inputIndex, unspent, reason) {
        super(`signing error at input ${inputIndex}: unspentId=${unspent.id}: ${reason}`);
        this.inputIndex = inputIndex;
        this.unspent = unspent;
        this.reason = reason;
    }
    static expectedWalletUnspent(inputIndex, unspent) {
        return new InputSigningError(inputIndex, unspent, `not a wallet unspent, not a replay protection unspent`);
    }
}
exports.InputSigningError = InputSigningError;
class TransactionSigningError extends Error {
    constructor(signErrors, verifyError) {
        super(`sign errors at inputs: [${signErrors.join(',')}], ` +
            `verify errors at inputs: [${verifyError.join(',')}], see log for details`);
    }
}
exports.TransactionSigningError = TransactionSigningError;
/**
 * Sign all inputs of a wallet transaction and verify signatures after signing.
 * Collects and logs signing errors and verification errors, throws error in the end if any of them
 * failed.
 *
 * @param transaction - wallet transaction (builder) to be signed
 * @param unspents - transaction unspents
 * @param walletSigner - signing parameters
 * @param isLastSignature - Returns full-signed transaction when true. Builds half-signed when false.
 */
function signAndVerifyWalletTransaction(transaction, unspents, walletSigner, { isLastSignature }) {
    const network = transaction.network;
    const prevOutputs = unspents.map((u) => bitgo_1.toOutput(u, network));
    let txBuilder;
    if (transaction instanceof utxolib.bitgo.UtxoTransaction) {
        txBuilder = utxolib.bitgo.createTransactionBuilderFromTransaction(transaction, prevOutputs);
        if (transaction.ins.length !== unspents.length) {
            throw new Error(`transaction inputs must match unspents`);
        }
    }
    else if (transaction instanceof utxolib.bitgo.UtxoTransactionBuilder) {
        txBuilder = transaction;
    }
    else {
        throw new Error(`must pass UtxoTransaction or UtxoTransactionBuilder`);
    }
    const signErrors = unspents
        .map((unspent, inputIndex) => {
        if (replayProtection_1.isReplayProtectionUnspent(unspent, network)) {
            debug('Skipping signature for input %d of %d (RP input?)', inputIndex + 1, unspents.length);
            return;
        }
        if (!bitgo_1.isWalletUnspent(unspent)) {
            return InputSigningError.expectedWalletUnspent(inputIndex, unspent);
        }
        try {
            bitgo_1.signInputWithUnspent(txBuilder, inputIndex, unspent, walletSigner);
            debug('Successfully signed input %d of %d', inputIndex + 1, unspents.length);
        }
        catch (e) {
            return new InputSigningError(inputIndex, unspent, e);
        }
    })
        .filter((e) => e !== undefined);
    const signedTransaction = isLastSignature ? txBuilder.build() : txBuilder.buildIncomplete();
    const verifyErrors = signedTransaction.ins
        .map((input, inputIndex) => {
        const unspent = unspents[inputIndex];
        if (replayProtection_1.isReplayProtectionUnspent(unspent, network)) {
            debug('Skipping input signature %d of %d (unspent from replay protection address which is platform signed only)', inputIndex + 1, unspents.length);
            return;
        }
        if (!bitgo_1.isWalletUnspent(unspent)) {
            return InputSigningError.expectedWalletUnspent(inputIndex, unspent);
        }
        try {
            const publicKey = walletSigner.deriveForChainAndIndex(unspent.chain, unspent.index).signer.publicKey;
            if (!utxolib.bitgo.verifySignatureWithPublicKey(signedTransaction, inputIndex, prevOutputs, publicKey)) {
                return new InputSigningError(inputIndex, unspent, new Error(`invalid signature`));
            }
        }
        catch (e) {
            debug('Invalid signature');
            return new InputSigningError(inputIndex, unspent, e);
        }
    })
        .filter((e) => e !== undefined);
    if (signErrors.length || verifyErrors.length) {
        throw new TransactionSigningError(signErrors, verifyErrors);
    }
    return signedTransaction;
}
exports.signAndVerifyWalletTransaction = signAndVerifyWalletTransaction;
//# sourceMappingURL=data:application/json;base64,