"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.recoverCrossChain = exports.getWallet = void 0;
/**
 * @prettier
 */
const _ = require("lodash");
const request = require("superagent");
const Bluebird = require("bluebird");
const bip32 = require("bip32");
const utxolib = require("@bitgo/utxo-lib");
const bitgo_1 = require("@bitgo/utxo-lib/dist/src/bitgo");
const unspents_1 = require("@bitgo/unspents");
const wallet_1 = require("../../../wallet");
const sdk_api_1 = require("@bitgo/sdk-api");
const sign_1 = require("../sign");
class BitgoPublicApi {
    constructor(coin) {
        this.coin = coin;
    }
    async getTransactionInfo(txid) {
        const url = this.coin.url(`/public/tx/${txid}`);
        return (await request.get(url)).body;
    }
    /**
     * Fetch unspent transaction outputs using IMS unspents API
     * @param addresses
     * @returns {*}
     */
    async getUnspentInfo(addresses) {
        const url = this.coin.url(`/public/addressUnspents/${_.uniq(addresses).join(',')}`);
        return (await request.get(url)).body;
    }
}
async function getWallet(bitgo, coin, walletId) {
    try {
        return await coin.wallets().get({ id: walletId });
    }
    catch (e) {
        // TODO: BG-46364 handle errors more gracefully
        // The v2 endpoint coin.wallets().get() may throw 404 or 400 errors, but this should not prevent us from searching for the walletId in v1 wallets.
        if (e.status >= 500) {
            throw e;
        }
    }
    try {
        return await this.bitgo.wallets().get({ id: walletId });
    }
    catch (e) {
        throw new Error(`could not get wallet ${walletId} from v1 or v2`);
    }
}
exports.getWallet = getWallet;
/**
 * @param recoveryCoin
 * @param wallet
 * @return wallet pubkeys
 */
async function getWalletKeys(recoveryCoin, wallet) {
    let xpubs;
    if (wallet instanceof wallet_1.Wallet) {
        const keychains = (await recoveryCoin.keychains().getKeysForSigning({ wallet }));
        if (keychains.length !== 3) {
            throw new Error(`expected triple got ${keychains.length}`);
        }
        xpubs = keychains.map((k) => k.pub);
    }
    else {
        xpubs = wallet.keychains.map((k) => k.xpub);
    }
    return new bitgo_1.RootWalletKeys(xpubs.map((k) => bip32.fromBase58(k)));
}
/**
 * @param coin
 * @param txid
 * @return all unspents for transaction outputs, including outputs from other transactions
 */
async function getAllRecoveryOutputs(coin, txid) {
    const api = new BitgoPublicApi(coin);
    const info = await api.getTransactionInfo(txid);
    const addresses = new Set(info.outputs.map((o) => o.address));
    return await api.getUnspentInfo([...addresses]);
}
async function getScriptId(coin, wallet, script) {
    const address = utxolib.address.fromOutputScript(script, coin.network);
    let addressData;
    if (wallet instanceof wallet_1.Wallet) {
        addressData = await wallet.getAddress({ address });
    }
    else {
        addressData = await wallet.address({ address });
    }
    if (typeof addressData.chain === 'number' && typeof addressData.index === 'number') {
        return { chain: addressData.chain, index: addressData.index };
    }
    throw new Error(`invalid address data: ${JSON.stringify(addressData)}`);
}
/**
 * Lookup address data from unspents on sourceCoin in address database of recoveryCoin.
 * Return full walletUnspents including scriptId in sourceCoin format.
 *
 * @param sourceCoin
 * @param recoveryCoin
 * @param unspents
 * @param wallet
 * @return walletUnspents
 */
async function toWalletUnspents(sourceCoin, recoveryCoin, unspents, wallet) {
    const addresses = new Set(unspents.map((u) => u.address));
    return (await Bluebird.mapSeries(addresses, async (address) => {
        let scriptId;
        try {
            scriptId = await getScriptId(recoveryCoin, wallet, utxolib.address.toOutputScript(address, sourceCoin.network));
        }
        catch (e) {
            console.error(`error getting scriptId for ${address}:`, e);
            return [];
        }
        return unspents
            .filter((u) => u.address === address)
            .map((u) => ({
            ...u,
            ...scriptId,
        }));
    })).flat();
}
/**
 * @param coin
 * @return feeRate for transaction
 */
async function getFeeRateSatVB(coin) {
    // TODO: use feeRate API
    const feeRate = {
        bch: 20,
        tbch: 20,
        bsv: 20,
        tbsv: 20,
        btc: 80,
        tbtc: 80,
        ltc: 100,
        tltc: 100,
    }[coin.getChain()];
    if (!feeRate) {
        throw new Error(`no feeRate for ${coin.getChain()}`);
    }
    return feeRate;
}
/**
 * @param xprv
 * @param passphrase
 * @param wallet
 * @return signing key
 */
async function getPrv(xprv, passphrase, wallet) {
    if (xprv) {
        const key = bip32.fromBase58(xprv);
        if (key.isNeutered()) {
            throw new Error(`not a private key`);
        }
        return key;
    }
    if (!wallet || !passphrase) {
        throw new Error(`no xprv given: need wallet and passphrase to continue`);
    }
    let encryptedPrv;
    if (wallet instanceof wallet_1.Wallet) {
        encryptedPrv = (await wallet.getEncryptedUserKeychain()).encryptedPrv;
    }
    else {
        encryptedPrv = (await wallet.getEncryptedUserKeychain()).encryptedXprv;
    }
    return getPrv(sdk_api_1.decrypt(passphrase, encryptedPrv));
}
/**
 * @param network
 * @param unspents
 * @param targetAddress
 * @param feeRateSatVB
 * @param signer - if set, sign transaction
 * @return transaction spending full input amount to targetAddress
 */
function createSweepTransaction(network, unspents, targetAddress, feeRateSatVB, signer) {
    const inputValue = bitgo_1.unspentSum(unspents);
    const vsize = unspents_1.Dimensions.fromUnspents(unspents)
        .plus(unspents_1.Dimensions.fromOutput({ script: utxolib.address.toOutputScript(targetAddress, network) }))
        .getVSize();
    const fee = vsize * feeRateSatVB;
    const transactionBuilder = utxolib.bitgo.createTransactionBuilderForNetwork(network);
    transactionBuilder.addOutput(targetAddress, inputValue - fee);
    unspents.forEach((unspent) => {
        utxolib.bitgo.addToTransactionBuilder(transactionBuilder, unspent);
    });
    let transaction = transactionBuilder.buildIncomplete();
    if (signer) {
        transaction = sign_1.signAndVerifyWalletTransaction(transactionBuilder, unspents, signer, { isLastSignature: false });
    }
    return transaction;
}
function getTxInfo(transaction, unspents, walletId, walletKeys) {
    const inputAmount = utxolib.bitgo.unspentSum(unspents);
    const outputAmount = transaction.outs.reduce((sum, o) => sum + o.value, 0);
    const outputs = transaction.outs.map((o) => ({
        address: utxolib.address.fromOutputScript(o.script, transaction.network),
        valueString: o.value.toString(),
        change: false,
    }));
    const inputs = unspents.map((u) => {
        // NOTE:
        // The `redeemScript` and `walletScript` properties are required for legacy versions of BitGoJS
        // which might require these scripts for signing. The Wallet Recovery Wizard (WRW) can create
        // unsigned prebuilds that are submitted to BitGoJS instances which are not necessarily the same
        // version.
        const addressKeys = walletKeys.deriveForChainAndIndex(u.chain, u.index);
        const scriptType = bitgo_1.scriptTypeForChain(u.chain);
        const { redeemScript, witnessScript } = bitgo_1.outputScripts.createOutputScript2of3(addressKeys.publicKeys, scriptType);
        return {
            ...u,
            wallet: walletId,
            fromWallet: walletId,
            redeemScript: redeemScript === null || redeemScript === void 0 ? void 0 : redeemScript.toString('hex'),
            witnessScript: witnessScript === null || witnessScript === void 0 ? void 0 : witnessScript.toString('hex'),
        };
    });
    return {
        inputAmount,
        outputAmount,
        minerFee: inputAmount - outputAmount,
        spendAmount: outputAmount,
        inputs,
        unspents: inputs,
        outputs,
        externalOutputs: outputs,
        changeOutputs: [],
        payGoFee: 0,
    } /* cast to TransactionInfo to allow extra fields may be required by legacy consumers of this data */;
}
function getFeeInfo(transaction, unspents) {
    const vsize = unspents_1.Dimensions.fromUnspents(unspents).plus(unspents_1.Dimensions.fromOutputs(transaction.outs)).getVSize();
    const inputAmount = utxolib.bitgo.unspentSum(unspents);
    const outputAmount = transaction.outs.reduce((sum, o) => sum + o.value, 0);
    const fee = inputAmount - outputAmount;
    return {
        size: vsize,
        fee,
        feeRate: fee / vsize,
        payGoFee: 0,
    };
}
/**
 * Recover wallet deposits that were received on the wrong blockchain
 * (for instance bitcoin deposits that were received for a litecoin wallet).
 *
 * Fetches the unspent data from BitGo's public blockchain API and the script data from the user's
 * wallet.
 *
 * @param {BitGo} bitgo
 * @param {RecoverParams} params
 */
async function recoverCrossChain(bitgo, params) {
    const wallet = await getWallet(bitgo, params.recoveryCoin, params.walletId);
    const unspents = await getAllRecoveryOutputs(params.sourceCoin, params.txid);
    const walletUnspents = await toWalletUnspents(params.sourceCoin, params.recoveryCoin, unspents, wallet);
    const walletKeys = await getWalletKeys(params.recoveryCoin, wallet);
    const prv = params.xprv || params.walletPassphrase ? await getPrv(params.xprv, params.walletPassphrase, wallet) : undefined;
    const signer = prv ? new bitgo_1.WalletUnspentSigner(walletKeys, prv, walletKeys.bitgo) : undefined;
    const feeRateSatVB = await getFeeRateSatVB(params.sourceCoin);
    const transaction = createSweepTransaction(params.sourceCoin.network, walletUnspents, params.recoveryAddress, feeRateSatVB, signer);
    const recoveryAmount = transaction.outs[0].value;
    const txHex = transaction.toBuffer().toString('hex');
    const txInfo = getTxInfo(transaction, walletUnspents, params.walletId, walletKeys);
    if (prv) {
        return {
            version: wallet instanceof wallet_1.Wallet ? 2 : 1,
            walletId: params.walletId,
            txHex,
            txInfo,
            sourceCoin: params.sourceCoin.getChain(),
            recoveryCoin: params.recoveryCoin.getChain(),
            recoveryAmount,
        };
    }
    else {
        return {
            txHex,
            txInfo,
            walletId: params.walletId,
            feeInfo: getFeeInfo(transaction, walletUnspents),
            address: params.recoveryAddress,
            coin: params.sourceCoin.getChain(),
        };
    }
}
exports.recoverCrossChain = recoverCrossChain;
//# sourceMappingURL=data:application/json;base64,