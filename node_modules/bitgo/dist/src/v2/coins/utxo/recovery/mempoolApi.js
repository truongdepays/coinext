"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MempoolApi = void 0;
/**
 * @prettier
 */
const _ = require("lodash");
const baseApi_1 = require("./baseApi");
class MempoolApi extends baseApi_1.BaseApi {
    static forCoin(coinName) {
        switch (coinName) {
            case 'btc':
            case 'tbtc':
                // FIXME: tbtc is enabled here for legacy reasons;
                return new MempoolApi('https://mempool.space/api/v1');
        }
        throw new baseApi_1.ApiNotImplementedError(coinName);
    }
    constructor(baseUrl) {
        super(baseUrl);
    }
    async getRecoveryFeePerBytes() {
        const res = await this.get('/fees/recommended');
        return res.map((body) => {
            if (body.publicFeeData && body.publicFeeData.hourFee && _.isInteger(body.publicFeeData.hourFee)) {
                return body.publicFeeData.hourFee;
            }
            throw new Error('unexpected response');
        });
    }
}
exports.MempoolApi = MempoolApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtcG9vbEFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy92Mi9jb2lucy91dHhvL3JlY292ZXJ5L21lbXBvb2xBcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0dBRUc7QUFDSCw0QkFBNEI7QUFFNUIsdUNBQTREO0FBRTVELE1BQWEsVUFBVyxTQUFRLGlCQUFPO0lBQ3JDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBZ0I7UUFDN0IsUUFBUSxRQUFRLEVBQUU7WUFDaEIsS0FBSyxLQUFLLENBQUM7WUFDWCxLQUFLLE1BQU07Z0JBQ1Qsa0RBQWtEO2dCQUNsRCxPQUFPLElBQUksVUFBVSxDQUFDLDhCQUE4QixDQUFDLENBQUM7U0FDekQ7UUFDRCxNQUFNLElBQUksZ0NBQXNCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELFlBQVksT0FBZTtRQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakIsQ0FBQztJQUVELEtBQUssQ0FBQyxzQkFBc0I7UUFDMUIsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFNLG1CQUFtQixDQUFDLENBQUM7UUFDckQsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDdEIsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDL0YsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQzthQUNuQztZQUNELE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQXhCRCxnQ0F3QkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcmV0dGllclxuICovXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IEFwaU5vdEltcGxlbWVudGVkRXJyb3IsIEJhc2VBcGkgfSBmcm9tICcuL2Jhc2VBcGknO1xuXG5leHBvcnQgY2xhc3MgTWVtcG9vbEFwaSBleHRlbmRzIEJhc2VBcGkge1xuICBzdGF0aWMgZm9yQ29pbihjb2luTmFtZTogc3RyaW5nKTogTWVtcG9vbEFwaSB7XG4gICAgc3dpdGNoIChjb2luTmFtZSkge1xuICAgICAgY2FzZSAnYnRjJzpcbiAgICAgIGNhc2UgJ3RidGMnOlxuICAgICAgICAvLyBGSVhNRTogdGJ0YyBpcyBlbmFibGVkIGhlcmUgZm9yIGxlZ2FjeSByZWFzb25zO1xuICAgICAgICByZXR1cm4gbmV3IE1lbXBvb2xBcGkoJ2h0dHBzOi8vbWVtcG9vbC5zcGFjZS9hcGkvdjEnKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEFwaU5vdEltcGxlbWVudGVkRXJyb3IoY29pbk5hbWUpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoYmFzZVVybDogc3RyaW5nKSB7XG4gICAgc3VwZXIoYmFzZVVybCk7XG4gIH1cblxuICBhc3luYyBnZXRSZWNvdmVyeUZlZVBlckJ5dGVzKCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5nZXQ8YW55PignL2ZlZXMvcmVjb21tZW5kZWQnKTtcbiAgICByZXR1cm4gcmVzLm1hcCgoYm9keSkgPT4ge1xuICAgICAgaWYgKGJvZHkucHVibGljRmVlRGF0YSAmJiBib2R5LnB1YmxpY0ZlZURhdGEuaG91ckZlZSAmJiBfLmlzSW50ZWdlcihib2R5LnB1YmxpY0ZlZURhdGEuaG91ckZlZSkpIHtcbiAgICAgICAgcmV0dXJuIGJvZHkucHVibGljRmVlRGF0YS5ob3VyRmVlO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmV4cGVjdGVkIHJlc3BvbnNlJyk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==