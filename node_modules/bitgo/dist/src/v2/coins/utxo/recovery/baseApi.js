"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseApi = exports.ApiRequestError = exports.ApiNotImplementedError = void 0;
/**
 * @prettier
 */
const superagent = require("superagent");
const sdk_core_1 = require("@bitgo/sdk-core");
class ApiNotImplementedError extends sdk_core_1.BitGoJsError {
    constructor(coinName) {
        super(`api not implemented for coin ${coinName}`);
    }
}
exports.ApiNotImplementedError = ApiNotImplementedError;
class ApiRequestError extends sdk_core_1.BitGoJsError {
    constructor(url, reason) {
        super(`error in API request: ${url}: ${reason}`);
    }
    static forRequest(req, reason) {
        return new ApiRequestError(req.toString(), reason);
    }
    static forResponse(res, reason) {
        return new ApiRequestError(res.header, reason);
    }
}
exports.ApiRequestError = ApiRequestError;
class BaseApi {
    constructor(baseUrl) {
        this.baseUrl = baseUrl;
        if (!baseUrl.startsWith('https://')) {
            throw new Error(`baseUrl must start with https://`);
        }
        if (baseUrl.endsWith(`/`)) {
            throw new Error(`baseUrl must not end with slash (/)`);
        }
    }
    async request(method, path, requestBody, params = {}) {
        if (!path.startsWith(path)) {
            throw new Error(`path must start with '/' character`);
        }
        const url = this.baseUrl + path;
        let response;
        try {
            response = await superagent(method, url)
                .retry(params.retry)
                .send(requestBody);
        }
        catch (e) {
            throw new ApiRequestError(url, e);
        }
        if (!response.ok) {
            throw new ApiRequestError(url, `status code ${response.statusCode}`);
        }
        return {
            map(f) {
                try {
                    return f(response.body);
                }
                catch (e) {
                    throw new ApiRequestError(url, e);
                }
            },
        };
    }
    get(path, params) {
        return this.request('get', path, undefined, params);
    }
    post(path, body, params) {
        return this.request('post', path, body, params);
    }
}
exports.BaseApi = BaseApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZUFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy92Mi9jb2lucy91dHhvL3JlY292ZXJ5L2Jhc2VBcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0dBRUc7QUFDSCx5Q0FBeUM7QUFDekMsOENBQStDO0FBRS9DLE1BQWEsc0JBQXVCLFNBQVEsdUJBQVk7SUFDdEQsWUFBWSxRQUFnQjtRQUMxQixLQUFLLENBQUMsZ0NBQWdDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNGO0FBSkQsd0RBSUM7QUFFRCxNQUFhLGVBQWdCLFNBQVEsdUJBQVk7SUFDL0MsWUFBWSxHQUFXLEVBQUUsTUFBc0I7UUFDN0MsS0FBSyxDQUFDLHlCQUF5QixHQUFHLEtBQUssTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUF1QixFQUFFLE1BQXNCO1FBQy9ELE9BQU8sSUFBSSxlQUFlLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQXdCLEVBQUUsTUFBc0I7UUFDakUsT0FBTyxJQUFJLGVBQWUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FDRjtBQVpELDBDQVlDO0FBVUQsTUFBYSxPQUFPO0lBQ2xCLFlBQW1CLE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ25DLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztTQUNyRDtRQUNELElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7U0FDeEQ7SUFDSCxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU8sQ0FDWCxNQUFjLEVBQ2QsSUFBWSxFQUNaLFdBQWdDLEVBQ2hDLFNBQXlCLEVBQUU7UUFFM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDaEMsSUFBSSxRQUFRLENBQUM7UUFDYixJQUFJO1lBQ0YsUUFBUSxHQUFHLE1BQU0sVUFBVSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7aUJBQ3JDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2lCQUNuQixJQUFJLENBQUMsV0FBc0MsQ0FBQyxDQUFDO1NBQ2pEO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixNQUFNLElBQUksZUFBZSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNuQztRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxlQUFlLENBQUMsR0FBRyxFQUFFLGVBQWUsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7U0FDdEU7UUFFRCxPQUFPO1lBQ0wsR0FBRyxDQUFJLENBQWlCO2dCQUN0QixJQUFJO29CQUNGLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDekI7Z0JBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ1YsTUFBTSxJQUFJLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ25DO1lBQ0gsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsR0FBRyxDQUFJLElBQVksRUFBRSxNQUF1QjtRQUMxQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELElBQUksQ0FBSSxJQUFZLEVBQUUsSUFBYSxFQUFFLE1BQXVCO1FBQzFELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNsRCxDQUFDO0NBQ0Y7QUFsREQsMEJBa0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0ICogYXMgc3VwZXJhZ2VudCBmcm9tICdzdXBlcmFnZW50JztcbmltcG9ydCB7IEJpdEdvSnNFcnJvciB9IGZyb20gJ0BiaXRnby9zZGstY29yZSc7XG5cbmV4cG9ydCBjbGFzcyBBcGlOb3RJbXBsZW1lbnRlZEVycm9yIGV4dGVuZHMgQml0R29Kc0Vycm9yIHtcbiAgY29uc3RydWN0b3IoY29pbk5hbWU6IHN0cmluZykge1xuICAgIHN1cGVyKGBhcGkgbm90IGltcGxlbWVudGVkIGZvciBjb2luICR7Y29pbk5hbWV9YCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFwaVJlcXVlc3RFcnJvciBleHRlbmRzIEJpdEdvSnNFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHVybDogc3RyaW5nLCByZWFzb246IEVycm9yIHwgc3RyaW5nKSB7XG4gICAgc3VwZXIoYGVycm9yIGluIEFQSSByZXF1ZXN0OiAke3VybH06ICR7cmVhc29ufWApO1xuICB9XG5cbiAgc3RhdGljIGZvclJlcXVlc3QocmVxOiBzdXBlcmFnZW50LlJlcXVlc3QsIHJlYXNvbjogRXJyb3IgfCBzdHJpbmcpOiBBcGlSZXF1ZXN0RXJyb3Ige1xuICAgIHJldHVybiBuZXcgQXBpUmVxdWVzdEVycm9yKHJlcS50b1N0cmluZygpLCByZWFzb24pO1xuICB9XG5cbiAgc3RhdGljIGZvclJlc3BvbnNlKHJlczogc3VwZXJhZ2VudC5SZXNwb25zZSwgcmVhc29uOiBFcnJvciB8IHN0cmluZyk6IEFwaVJlcXVlc3RFcnJvciB7XG4gICAgcmV0dXJuIG5ldyBBcGlSZXF1ZXN0RXJyb3IocmVzLmhlYWRlciwgcmVhc29uKTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBSZXF1ZXN0T3B0aW9ucyA9IHtcbiAgcmV0cnk/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBSZXNwb25zZTxUPiA9IHtcbiAgbWFwPFY+KGY6IChib2R5OiBUKSA9PiBWKTogVjtcbn07XG5cbmV4cG9ydCBjbGFzcyBCYXNlQXBpIHtcbiAgY29uc3RydWN0b3IocHVibGljIGJhc2VVcmw6IHN0cmluZykge1xuICAgIGlmICghYmFzZVVybC5zdGFydHNXaXRoKCdodHRwczovLycpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGJhc2VVcmwgbXVzdCBzdGFydCB3aXRoIGh0dHBzOi8vYCk7XG4gICAgfVxuICAgIGlmIChiYXNlVXJsLmVuZHNXaXRoKGAvYCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgYmFzZVVybCBtdXN0IG5vdCBlbmQgd2l0aCBzbGFzaCAoLylgKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyByZXF1ZXN0PFQ+KFxuICAgIG1ldGhvZDogc3RyaW5nLFxuICAgIHBhdGg6IHN0cmluZyxcbiAgICByZXF1ZXN0Qm9keTogdW5rbm93biB8IHVuZGVmaW5lZCxcbiAgICBwYXJhbXM6IFJlcXVlc3RPcHRpb25zID0ge31cbiAgKTogUHJvbWlzZTxSZXNwb25zZTxUPj4ge1xuICAgIGlmICghcGF0aC5zdGFydHNXaXRoKHBhdGgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHBhdGggbXVzdCBzdGFydCB3aXRoICcvJyBjaGFyYWN0ZXJgKTtcbiAgICB9XG4gICAgY29uc3QgdXJsID0gdGhpcy5iYXNlVXJsICsgcGF0aDtcbiAgICBsZXQgcmVzcG9uc2U7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3BvbnNlID0gYXdhaXQgc3VwZXJhZ2VudChtZXRob2QsIHVybClcbiAgICAgICAgLnJldHJ5KHBhcmFtcy5yZXRyeSlcbiAgICAgICAgLnNlbmQocmVxdWVzdEJvZHkgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBBcGlSZXF1ZXN0RXJyb3IodXJsLCBlKTtcbiAgICB9XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEFwaVJlcXVlc3RFcnJvcih1cmwsIGBzdGF0dXMgY29kZSAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1hcDxWPihmOiAoYm9keTogVCkgPT4gVik6IFYge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmKHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEFwaVJlcXVlc3RFcnJvcih1cmwsIGUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBnZXQ8VD4ocGF0aDogc3RyaW5nLCBwYXJhbXM/OiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8UmVzcG9uc2U8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdnZXQnLCBwYXRoLCB1bmRlZmluZWQsIHBhcmFtcyk7XG4gIH1cblxuICBwb3N0PFQ+KHBhdGg6IHN0cmluZywgYm9keTogdW5rbm93biwgcGFyYW1zPzogUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPFJlc3BvbnNlPFQ+PiB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCgncG9zdCcsIHBhdGgsIGJvZHksIHBhcmFtcyk7XG4gIH1cbn1cbiJdfQ==