"use strict";
/**
 * @prettier
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.backupKeyRecovery = void 0;
const _ = require("lodash");
const utxolib = require("@bitgo/utxo-lib");
const bitgo_1 = require("@bitgo/utxo-lib/dist/src/bitgo");
const unspents_1 = require("@bitgo/unspents");
const config = require("../../../../config");
const errors = require("../../../../errors");
const initiate_1 = require("../../../recovery/initiate");
const RecoveryProvider_1 = require("./RecoveryProvider");
const baseApi_1 = require("./baseApi");
const smartbitApi_1 = require("./smartbitApi");
const mempoolApi_1 = require("./mempoolApi");
const coingeckoApi_1 = require("./coingeckoApi");
const triple_1 = require("../../../triple");
const sign_1 = require("../sign");
/**
 * This transforms the txInfo from recover into the format that offline-signing-tool expects
 * @param coinName
 * @param txInfo
 * @param txHex
 * @returns {{txHex: *, txInfo: {unspents: *}, feeInfo: {}, coin: void}}
 */
function formatForOfflineVault(coinName, txInfo, txHex) {
    return {
        txHex,
        txInfo: {
            unspents: txInfo.inputs,
        },
        feeInfo: {},
        coin: coinName,
    };
}
/**
 * Get the current market price from a third party to be used for recovery
 * This function is only intended for non-bitgo recovery transactions, when it is necessary
 * to calculate the rough fee needed to pay to Keyternal. We are okay with approximating,
 * because the resulting price of this function only has less than 1 dollar influence on the
 * fee that needs to be paid to Keyternal.
 *
 * See calculateFeeAmount function:  return Math.round(feeAmountUsd / currentPrice * self.getBaseFactor());
 *
 * This end function should not be used as an accurate endpoint, since some coins' prices are missing from the provider
 */
async function getRecoveryMarketPrice(coin) {
    return await new coingeckoApi_1.CoingeckoApi().getUSDPrice(coin.getFamily());
}
/**
 * Calculates the amount (in base units) to pay a KRS provider when building a recovery transaction
 * @param coin
 * @param params
 * @param params.provider {String} the KRS provider that holds the backup key
 * @param params.amount {Number} amount (in base units) to be recovered
 * @returns {*}
 */
async function calculateFeeAmount(coin, params) {
    const krsProvider = config.krsProviders[params.provider];
    if (krsProvider === undefined) {
        throw new Error(`no fee structure specified for provider ${params.provider}`);
    }
    if (krsProvider.feeType === 'flatUsd') {
        const feeAmountUsd = krsProvider.feeAmount;
        const currentPrice = await getRecoveryMarketPrice(coin);
        return Math.round((feeAmountUsd / currentPrice) * coin.getBaseFactor());
    }
    else {
        // we can add more fee structures here as needed for different providers, such as percentage of recovery amount
        throw new Error('Fee structure not implemented');
    }
}
async function queryBlockchainUnspentsPath(coin, params, walletKeys, chain) {
    var _a;
    const recoveryProvider = (_a = params.recoveryProvider) !== null && _a !== void 0 ? _a : RecoveryProvider_1.forCoin(coin.getChain(), params.apiKey);
    const MAX_SEQUENTIAL_ADDRESSES_WITHOUT_TXS = params.scan || 20;
    let numSequentialAddressesWithoutTxs = 0;
    async function gatherUnspents(addrIndex) {
        const walletKeysForUnspent = walletKeys.deriveForChainAndIndex(chain, addrIndex);
        const address = coin.createMultiSigAddress(bitgo_1.scriptTypeForChain(chain), 2, walletKeysForUnspent.publicKeys);
        const addrInfo = await recoveryProvider.getAddressInfo(address.address);
        // we use txCount here because it implies usage - having tx'es means the addr was generated and used
        if (addrInfo.txCount === 0) {
            numSequentialAddressesWithoutTxs++;
        }
        else {
            numSequentialAddressesWithoutTxs = 0;
            if (addrInfo.balance > 0) {
                console.log(`Found an address with balance: ${address.address} with balance ${addrInfo.balance}`);
                const addressUnspents = await recoveryProvider.getUnspentsForAddresses([address.address]);
                walletUnspents.push(...addressUnspents.map((u) => ({
                    ...u,
                    chain: chain,
                    index: addrIndex,
                })));
            }
        }
        if (numSequentialAddressesWithoutTxs >= MAX_SEQUENTIAL_ADDRESSES_WITHOUT_TXS) {
            // stop searching for addresses with unspents in them, we've found ${MAX_SEQUENTIAL_ADDRESSES_WITHOUT_TXS} in a row with none
            // we are done
            return;
        }
        return gatherUnspents(addrIndex + 1);
    }
    // get unspents for these addresses
    const walletUnspents = [];
    // This will populate walletAddresses
    await gatherUnspents(0);
    if (walletUnspents.length === 0) {
        // Couldn't find any addresses with funds
        return [];
    }
    return walletUnspents;
}
async function getRecoveryFeePerBytes(coin, { defaultValue }) {
    try {
        return await mempoolApi_1.MempoolApi.forCoin(coin.getChain()).getRecoveryFeePerBytes();
    }
    catch (e) {
        console.dir(e);
        return defaultValue;
    }
}
/**
 * Builds a funds recovery transaction without BitGo
 * @param coin
 * @param bitgo
 * @param params
 * - userKey: [encrypted] xprv, or xpub
 * - backupKey: [encrypted] xprv, or xpub if the xprv is held by a KRS provider
 * - walletPassphrase: necessary if one of the xprvs is encrypted
 * - bitgoKey: xpub
 * - krsProvider: necessary if backup key is held by KRS
 * - recoveryDestination: target address to send recovered funds to
 * - scan: the amount of consecutive addresses without unspents to scan through before stopping
 * - ignoreAddressTypes: (optional) scripts to ignore
 *        for example: ['p2shP2wsh', 'p2wsh'] will prevent code from checking for wrapped-segwit and native-segwit chains on the public block explorers
 */
async function backupKeyRecovery(coin, bitgo, params) {
    if (_.isUndefined(params.userKey)) {
        throw new Error('missing userKey');
    }
    if (_.isUndefined(params.backupKey)) {
        throw new Error('missing backupKey');
    }
    if (_.isUndefined(params.recoveryDestination) || !coin.isValidAddress(params.recoveryDestination)) {
        throw new Error('invalid recoveryDestination');
    }
    if (!_.isUndefined(params.scan) && (!_.isInteger(params.scan) || params.scan < 0)) {
        throw new Error('scan must be a positive integer');
    }
    const isKrsRecovery = initiate_1.getIsKrsRecovery(params);
    const isUnsignedSweep = initiate_1.getIsUnsignedSweep(params);
    const krsProvider = isKrsRecovery ? initiate_1.getKrsProvider(coin, params.krsProvider) : undefined;
    // check whether key material and password authenticate the users and return parent keys of all three keys of the wallet
    const keys = initiate_1.getBip32Keys(bitgo, params, { requireBitGoXpub: true });
    if (!triple_1.isTriple(keys)) {
        throw new Error(`expected key triple`);
    }
    const walletKeys = new bitgo_1.RootWalletKeys(keys, [
        params.userKeyPath || bitgo_1.RootWalletKeys.defaultPrefix,
        bitgo_1.RootWalletKeys.defaultPrefix,
        bitgo_1.RootWalletKeys.defaultPrefix,
    ]);
    const unspents = (await Promise.all(bitgo_1.outputScripts.scriptTypes2Of3
        .filter((addressType) => { var _a; return coin.supportsAddressType(addressType) && !((_a = params.ignoreAddressTypes) === null || _a === void 0 ? void 0 : _a.includes(addressType)); })
        .reduce((queries, addressType) => [
        ...queries,
        queryBlockchainUnspentsPath(coin, params, walletKeys, bitgo_1.getExternalChainCode(addressType)),
        queryBlockchainUnspentsPath(coin, params, walletKeys, bitgo_1.getInternalChainCode(addressType)),
    ], []))).flat();
    // Execute the queries and gather the unspents
    const totalInputAmount = unspents.reduce((sum, u) => sum + u.value, 0);
    if (totalInputAmount <= 0) {
        throw new errors.ErrorNoInputToRecover();
    }
    // Build the transaction
    const transactionBuilder = utxolib.bitgo.createTransactionBuilderForNetwork(coin.network);
    const txInfo = {};
    const feePerByte = await getRecoveryFeePerBytes(coin, { defaultValue: 100 });
    // KRS recovery transactions have a 2nd output to pay the recovery fee, like paygo fees. Use p2wsh outputs because
    // they are the largest outputs and thus the most conservative estimate to use in calculating fees. Also use
    // segwit overhead size and p2sh inputs for the same reason.
    const outputSize = (isKrsRecovery ? 2 : 1) * unspents_1.VirtualSizes.txP2wshOutputSize;
    const approximateSize = unspents_1.VirtualSizes.txSegOverheadVSize + outputSize + unspents_1.VirtualSizes.txP2shInputSize * unspents.length;
    const approximateFee = approximateSize * feePerByte;
    // Construct a transaction
    txInfo.inputs = unspents;
    unspents.forEach((unspent) => {
        const { txid, vout } = bitgo_1.parseOutputId(unspent.id);
        transactionBuilder.addInput(txid, vout, 0xffffffff, utxolib.address.toOutputScript(unspent.address, coin.network), unspent.value);
    });
    let recoveryAmount = totalInputAmount - approximateFee;
    let krsFee;
    if (isKrsRecovery && params.krsProvider) {
        try {
            krsFee = await calculateFeeAmount(coin, {
                provider: params.krsProvider,
                amount: recoveryAmount,
            });
            recoveryAmount -= krsFee;
        }
        catch (err) {
            // Don't let this error block the recovery -
            console.dir(err);
        }
    }
    if (recoveryAmount < 0) {
        throw new Error(`this wallet\'s balance is too low to pay the fees specified by the KRS provider. 
          Existing balance on wallet: ${totalInputAmount}. Estimated network fee for the recovery transaction
          : ${approximateFee}, KRS fee to pay: ${krsFee}. After deducting fees, your total recoverable balance
          is ${recoveryAmount}`);
    }
    transactionBuilder.addOutput(params.recoveryDestination, recoveryAmount);
    if (krsProvider && krsFee > 0) {
        if (!krsProvider.feeAddresses) {
            throw new Error(`keyProvider must define feeAddresses`);
        }
        const krsFeeAddress = krsProvider.feeAddresses[coin.getChain()];
        if (!krsFeeAddress) {
            throw new Error('this KRS provider has not configured their fee structure yet - recovery cannot be completed');
        }
        transactionBuilder.addOutput(krsFeeAddress, krsFee);
    }
    if (isUnsignedSweep) {
        const txHex = transactionBuilder.buildIncomplete().toBuffer().toString('hex');
        return formatForOfflineVault(coin.getChain(), txInfo, txHex);
    }
    else {
        let transaction = sign_1.signAndVerifyWalletTransaction(transactionBuilder, unspents, new bitgo_1.WalletUnspentSigner(walletKeys, walletKeys.user, walletKeys.backup), { isLastSignature: false });
        if (!isKrsRecovery) {
            transaction = sign_1.signAndVerifyWalletTransaction(transaction, unspents, new bitgo_1.WalletUnspentSigner(walletKeys, walletKeys.backup, walletKeys.user), { isLastSignature: true });
        }
        txInfo.transactionHex = transaction.toBuffer().toString('hex');
        let transactionDetails;
        try {
            transactionDetails = await smartbitApi_1.SmartbitApi.forCoin(coin.getChain()).getTransactionDetails(transaction);
        }
        catch (e) {
            // some coins don't have a reliable third party verification endpoint, or sometimes the third party endpoint
            // could be unavailable due to service outage, so we continue without verification for those coins, but we will
            // let users know that they should verify their own
            // this message should be piped to WRW and displayed on the UI
            if (e instanceof baseApi_1.ApiNotImplementedError || e instanceof baseApi_1.ApiRequestError) {
                console.log('Please verify your transaction by decoding the tx hex using a third-party api of your choice');
            }
            else {
                throw e;
            }
        }
        if (transactionDetails) {
            /**
             * Verify that the txhex user signs correspond to the correct tx they intended
             * by 1) getting back the decoded transaction based on the txhex
             * and then 2) compute the txid (hash), h1 of the decoded transaction 3) compare h1
             * to the txid (hash) of the transaction (including unspent info) we constructed
             */
            if (transactionDetails.TxId !== transaction.getId()) {
                console.log('txhash/txid returned by blockexplorer: ', transactionDetails.TxId);
                console.log('txhash/txid of the transaction bitgo constructed', transaction.getId());
                throw new Error('inconsistent recovery transaction id');
            }
            txInfo.tx = transactionDetails;
        }
    }
    if (isKrsRecovery) {
        txInfo.coin = coin.getChain();
        txInfo.backupKey = params.backupKey;
        txInfo.recoveryAmount = recoveryAmount;
    }
    return txInfo;
}
exports.backupKeyRecovery = backupKeyRecovery;
//# sourceMappingURL=data:application/json;base64,