"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hbar = void 0;
/**
 * @prettier
 */
const statics_1 = require("@bitgo/statics");
const bitgoAccountLib = require("@bitgo/account-lib");
const baseCoin_1 = require("../baseCoin");
const errors_1 = require("../../errors");
const stellar = require("stellar-sdk");
const seedValidator_1 = require("../internal/seedValidator");
class Hbar extends baseCoin_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    getChain() {
        return this._staticsCoin.name;
    }
    getFamily() {
        return this._staticsCoin.family;
    }
    getFullName() {
        return this._staticsCoin.fullName;
    }
    getBaseFactor() {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    }
    static createInstance(bitgo, staticsCoin) {
        return new Hbar(bitgo, staticsCoin);
    }
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed() {
        return false;
    }
    /**
     * Checks if this is a valid base58 or hex address
     * @param address
     */
    isValidAddress(address) {
        try {
            return bitgoAccountLib.Hbar.Utils.isValidAddressWithPaymentId(address);
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Generate Hedera Hashgraph key pair
     *
     * @param seed
     * @returns {Object} object with generated pub, prv
     */
    generateKeyPair(seed) {
        const keyPair = seed ? new bitgoAccountLib.Hbar.KeyPair({ seed }) : new bitgoAccountLib.Hbar.KeyPair();
        const keys = keyPair.getKeys();
        if (!keys.prv) {
            throw new Error('Keypair generation failed to generate a prv');
        }
        return {
            pub: keys.pub,
            prv: keys.prv,
        };
    }
    async parseTransaction(params) {
        return {};
    }
    /**
     * Check if address is valid, then make sure it matches the base address.
     *
     * @param {VerifyAddressOptions} params
     * @param {String} params.address - the address to verify
     * @param {String} params.baseAddress - the base address from the wallet
     */
    isWalletAddress(params) {
        const { address, baseAddress } = params;
        return bitgoAccountLib.Hbar.Utils.isSameBaseAddress(address, baseAddress);
    }
    async verifyTransaction(params) {
        return true;
    }
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {Object} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @param params.wallet.addressVersion {String} this is the version of the Algorand multisig address generation format
     * @returns Promise<SignedTransaction>
     */
    async signTransaction(params) {
        const factory = bitgoAccountLib.register(this.getChain(), bitgoAccountLib.Hbar.TransactionBuilderFactory);
        const txBuilder = factory.from(params.txPrebuild.txHex);
        txBuilder.sign({ key: params.prv });
        const transaction = await txBuilder.build();
        if (!transaction) {
            throw new Error('Invalid messaged passed to signMessage');
        }
        const response = {
            txHex: transaction.toBroadcastFormat(),
        };
        return transaction.signature.length >= 2 ? response : { halfSigned: response };
    }
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     * @return {Buffer} A signature over the given message using the given key
     */
    async signMessage(key, message) {
        const msg = Buffer.isBuffer(message) ? message.toString('utf8') : message;
        // reconstitute keys and sign
        return Buffer.from(new bitgoAccountLib.Hbar.KeyPair({ prv: key.prv }).signMessage(msg));
    }
    /**
     * Builds a funds recovery transaction without BitGo.
     * We need to do three queries during this:
     * 1) Node query - how much money is in the account
     * 2) Build transaction - build our transaction for the amount
     * 3) Send signed build - send our signed build to a public node
     * @param params
     */
    async recover(params) {
        throw new errors_1.MethodNotImplementedError();
    }
    /**
     * Explain a Hedera transaction from txHex
     * @param params
     */
    async explainTransaction(params) {
        const txHex = params.txHex || (params.halfSigned && params.halfSigned.txHex);
        if (!txHex) {
            throw new Error('missing explain tx parameters');
        }
        if (!params.feeInfo) {
            throw new Error('missing fee information');
        }
        const factory = bitgoAccountLib.register(this.getChain(), bitgoAccountLib.Hbar.TransactionBuilderFactory);
        const txBuilder = factory.from(txHex);
        const tx = await txBuilder.build();
        const txJson = tx.toJson();
        if (tx._txBody.data !== 'cryptoTransfer') {
            // don't explain this
            throw new Error('Transaction format outside of cryptoTransfer not supported for explanation.');
        }
        const displayOrder = [
            'id',
            'outputAmount',
            'changeAmount',
            'outputs',
            'changeOutputs',
            'fee',
            'timestamp',
            'expiration',
            'memo',
        ];
        // TODO(BG-24809): get the memo from the toJson
        let memo = '';
        if (params.memo) {
            memo = params.memo.value;
        }
        const outputs = [
            {
                amount: txJson.amount.toString(),
                address: txJson.to,
                memo,
            },
        ];
        return {
            displayOrder,
            id: txJson.id,
            outputs,
            outputAmount: outputs[0].amount,
            changeOutputs: [],
            changeAmount: '0',
            fee: params.feeInfo,
            timestamp: txJson.startTime,
            expiration: txJson.validDuration,
        };
    }
    isStellarSeed(seed) {
        return seedValidator_1.SeedValidator.isValidEd25519SeedForCoin(seed, statics_1.CoinFamily.XLM);
    }
    convertFromStellarSeed(seed) {
        // assume this is a trust custodial seed if its a valid ed25519 prv
        if (!this.isStellarSeed(seed) || seedValidator_1.SeedValidator.hasCompetingSeedFormats(seed)) {
            return null;
        }
        if (seedValidator_1.SeedValidator.isValidEd25519SeedForCoin(seed, statics_1.CoinFamily.XLM)) {
            const keyFromSeed = new bitgoAccountLib.Hbar.KeyPair({ seed: stellar.StrKey.decodeEd25519SecretSeed(seed) });
            const keys = keyFromSeed.getKeys();
            if (keys !== undefined && keys.prv) {
                return keys.prv;
            }
        }
        return null;
    }
    isValidPub(pub) {
        return bitgoAccountLib.Hbar.Utils.isValidPublicKey(pub);
    }
}
exports.Hbar = Hbar;
//# sourceMappingURL=data:application/json;base64,