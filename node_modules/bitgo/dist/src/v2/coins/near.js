"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Near = void 0;
const accountLib = require("@bitgo/account-lib");
const _ = require("lodash");
const errors_1 = require("../../errors");
const baseCoin_1 = require("../baseCoin");
const base58 = require("bs58");
const statics_1 = require("@bitgo/statics");
const nearUtils = accountLib.Near.Utils.default;
const HEX_REGEX = /^[0-9a-fA-F]+$/;
class Near extends baseCoin_1.BaseCoin {
    constructor(bitgo) {
        super(bitgo);
    }
    static createInstance(bitgo) {
        return new Near(bitgo);
    }
    getChain() {
        return 'near';
    }
    getBaseChain() {
        return 'near';
    }
    getFamily() {
        return 'near';
    }
    getFullName() {
        return 'Near';
    }
    getBaseFactor() {
        return 1e24;
    }
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed() {
        return false;
    }
    /**
     * Generate ed25519 key pair
     *
     * @param seed
     * @returns {Object} object with generated pub, prv
     */
    generateKeyPair(seed) {
        const keyPair = seed
            ? new accountLib.Near.KeyPair({ seed })
            : new accountLib.Near.KeyPair();
        const keys = keyPair.getKeys();
        if (!keys.prv) {
            throw new Error('Missing prv in key generation.');
        }
        return {
            pub: keys.pub,
            prv: keys.prv + keys.pub,
        };
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin.
     *
     * @param {String} pub the pub to be checked
     * @returns {Boolean} is it valid?
     */
    isValidPub(pub) {
        return nearUtils.isValidPublicKey(pub);
    }
    /**
     * Return boolean indicating whether the supplied private key is a valid near private key
     *
     * @param {String} prv the prv to be checked
     * @returns {Boolean} is it valid?
     */
    isValidPrv(prv) {
        return nearUtils.isValidPrivateKey(prv);
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin
     *
     * @param {String} address the pub to be checked
     * @returns {Boolean} is it valid?
     */
    isValidAddress(address) {
        return nearUtils.isValidAddress(address);
    }
    /** @inheritDoc */
    async signMessage(key, message) {
        const nearKeypair = new accountLib.Near.KeyPair({ prv: key.prv });
        if (Buffer.isBuffer(message)) {
            message = base58.encode(message);
        }
        return Buffer.from(nearKeypair.signMessage(message));
    }
    /**
     * Flag indicating if this coin supports TSS wallets.
     * @returns {boolean} True if TSS Wallets can be created for this coin
     */
    supportsTss() {
        return true;
    }
    /**
     * Explain/parse transaction
     * @param params
     */
    explainTransaction(params) {
        throw new errors_1.MethodNotImplementedError('Near recovery not implemented');
    }
    verifySignTransactionParams(params) {
        const prv = params.prv;
        const txHex = params.txPrebuild.txHex;
        if (_.isUndefined(txHex)) {
            throw new Error('missing txPrebuild parameter');
        }
        if (!_.isString(txHex)) {
            throw new Error(`txPrebuild must be an object, got type ${typeof txHex}`);
        }
        if (_.isUndefined(prv)) {
            throw new Error('missing prv parameter to sign transaction');
        }
        if (!_.isString(prv)) {
            throw new Error(`prv must be a string, got type ${typeof prv}`);
        }
        if (!_.has(params.txPrebuild, 'key')) {
            throw new Error('missing public key parameter to sign transaction');
        }
        // if we are receiving addresses do not try to convert them
        const signer = !nearUtils.isValidAddress(params.txPrebuild.key)
            ? new accountLib.Near.KeyPair({ pub: params.txPrebuild.key }).getAddress()
            : params.txPrebuild.key;
        return { txHex, prv, signer };
    }
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {TransactionPrebuild} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @param callback
     * @returns {Bluebird<SignedTransaction>}
     */
    async signTransaction(params) {
        const factory = accountLib.register(this.getChain(), accountLib.Near.TransactionBuilderFactory);
        const txBuilder = factory.from(params.txPrebuild.txHex);
        txBuilder.sign({ key: params.prv });
        const transaction = await txBuilder.build();
        if (!transaction) {
            throw new Error('Invalid transaction');
        }
        const serializedTx = transaction.toBroadcastFormat();
        return {
            txHex: serializedTx,
        };
    }
    /**
     * Builds a funds recovery transaction without BitGo
     * @param params
     */
    async recover(params) {
        throw new errors_1.MethodNotImplementedError('Near recovery not implemented');
    }
    parseTransaction(params) {
        throw new errors_1.MethodNotImplementedError('Near parse transaction not implemented');
    }
    isWalletAddress(params) {
        throw new errors_1.MethodNotImplementedError();
    }
    async verifyTransaction(params) {
        const coinConfig = statics_1.coins.get(this.getChain());
        const { txPrebuild: txPrebuild } = params;
        const transaction = new accountLib.Near.Transaction(coinConfig);
        const rawTx = txPrebuild.txHex;
        if (!rawTx) {
            throw new Error('missing required tx prebuild property txHex');
        }
        let rawTxBase64 = rawTx;
        if (HEX_REGEX.test(rawTx)) {
            rawTxBase64 = Buffer.from(rawTx, 'hex').toString('base64');
        }
        transaction.fromRawTransaction(rawTxBase64);
        // TO-DO: new explainTransaction to be implemented in account-lib
        return true;
    }
    getAddressFromPublicKey(Pubkey) {
        return new accountLib.Near.KeyPair({ pub: Pubkey }).getAddress();
    }
}
exports.Near = Near;
//# sourceMappingURL=data:application/json;base64,