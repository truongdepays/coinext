"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Xrp = void 0;
/**
 * @prettier
 */
const bip32 = require("bip32");
const bignumber_js_1 = require("bignumber.js");
const utxo_lib_1 = require("@bitgo/utxo-lib");
const crypto_1 = require("crypto");
const _ = require("lodash");
const url = require("url");
const querystring = require("querystring");
const rippleAddressCodec = require("ripple-address-codec");
const rippleBinaryCodec = require("ripple-binary-codec");
const hashes_1 = require("ripple-lib/dist/npm/common/hashes");
const rippleKeypairs = require("ripple-keypairs");
const baseCoin_1 = require("../baseCoin");
const errors_1 = require("../../errors");
const promise_utils_1 = require("../promise-utils");
const initiate_1 = require("../recovery/initiate");
const ripple = require('../../ripple');
class Xrp extends baseCoin_1.BaseCoin {
    constructor(bitgo) {
        super(bitgo);
    }
    static createInstance(bitgo) {
        return new Xrp(bitgo);
    }
    /**
     * Factor between the coin's base unit and its smallest subdivison
     */
    getBaseFactor() {
        return 1e6;
    }
    /**
     * Identifier for the blockchain which supports this coin
     */
    getChain() {
        return 'xrp';
    }
    /**
     * Identifier for the coin family
     */
    getFamily() {
        return 'xrp';
    }
    /**
     * Complete human-readable name of this coin
     */
    getFullName() {
        return 'Ripple';
    }
    /**
     * Parse an address string into address and destination tag
     */
    getAddressDetails(address) {
        const destinationDetails = url.parse(address);
        const destinationAddress = destinationDetails.pathname;
        if (!destinationAddress || !rippleAddressCodec.isValidClassicAddress(destinationAddress)) {
            throw new errors_1.InvalidAddressError(`destination address "${destinationAddress}" is not valid`);
        }
        // there are no other properties like destination tags
        if (destinationDetails.pathname === address) {
            return {
                address: address,
                destinationTag: undefined,
            };
        }
        if (!destinationDetails.query) {
            throw new errors_1.InvalidAddressError('no query params present');
        }
        const queryDetails = querystring.parse(destinationDetails.query);
        if (!queryDetails.dt) {
            // if there are more properties, the query details need to contain the destination tag property.
            throw new errors_1.InvalidAddressError('destination tag missing');
        }
        if (Array.isArray(queryDetails.dt)) {
            // if queryDetails.dt is an array, that means dt was given multiple times, which is not valid
            throw new errors_1.InvalidAddressError(`destination tag can appear at most once, but ${queryDetails.dt.length} destination tags were found`);
        }
        const parsedTag = parseInt(queryDetails.dt, 10);
        if (!Number.isSafeInteger(parsedTag)) {
            throw new errors_1.InvalidAddressError('invalid destination tag');
        }
        if (parsedTag > 0xffffffff || parsedTag < 0) {
            throw new errors_1.InvalidAddressError('destination tag out of range');
        }
        return {
            address: destinationAddress,
            destinationTag: parsedTag,
        };
    }
    /**
     * Construct a full, normalized address from an address and destination tag
     */
    normalizeAddress({ address, destinationTag }) {
        if (!_.isString(address)) {
            throw new errors_1.InvalidAddressError('invalid address details');
        }
        if (_.isInteger(destinationTag)) {
            return `${address}?dt=${destinationTag}`;
        }
        return address;
    }
    /**
     * Evaluates whether an address string is valid for this coin
     * @param address
     */
    isValidAddress(address) {
        try {
            const addressDetails = this.getAddressDetails(address);
            return address === this.normalizeAddress(addressDetails);
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin.
     *
     * @param {String} pub the pub to be checked
     * @returns {Boolean} is it valid?
     */
    isValidPub(pub) {
        try {
            return bip32.fromBase58(pub).isNeutered();
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Get fee info from server
     */
    async getFeeInfo() {
        return this.bitgo.get(this.url('/public/feeinfo')).result();
    }
    /**
     * Assemble keychain and half-sign prebuilt transaction
     * @param params
     * - txPrebuild
     * - prv
     * @returns Bluebird<HalfSignedTransaction>
     */
    async signTransaction({ txPrebuild, prv }) {
        if (_.isUndefined(txPrebuild) || !_.isObject(txPrebuild)) {
            if (!_.isUndefined(txPrebuild) && !_.isObject(txPrebuild)) {
                throw new Error(`txPrebuild must be an object, got type ${typeof txPrebuild}`);
            }
            throw new Error('missing txPrebuild parameter');
        }
        if (_.isUndefined(prv) || !_.isString(prv)) {
            if (!_.isUndefined(prv) && !_.isString(prv)) {
                throw new Error(`prv must be a string, got type ${typeof prv}`);
            }
            throw new Error('missing prv parameter to sign transaction');
        }
        const userKey = bip32.fromBase58(prv);
        const userPrivateKey = userKey.privateKey;
        if (!userPrivateKey) {
            throw new Error(`no privateKey`);
        }
        const userAddress = rippleKeypairs.deriveAddress(userKey.publicKey.toString('hex'));
        const rippleLib = ripple();
        const halfSigned = rippleLib.signWithPrivateKey(txPrebuild.txHex, userPrivateKey.toString('hex'), {
            signAs: userAddress,
        });
        return { halfSigned: { txHex: halfSigned.signedTransaction } };
    }
    /**
     * Ripple requires additional parameters for wallet generation to be sent to the server. The additional parameters are
     * the root public key, which is the basis of the root address, two signed, and one half-signed initialization txs
     * @param walletParams
     * - rootPrivateKey: optional hex-encoded Ripple private key
     */
    async supplementGenerateWallet(walletParams) {
        if (walletParams.rootPrivateKey) {
            if (walletParams.rootPrivateKey.length !== 64) {
                throw new Error('rootPrivateKey needs to be a hexadecimal private key string');
            }
        }
        else {
            const keyPair = utxo_lib_1.ECPair.makeRandom();
            if (!keyPair.privateKey) {
                throw new Error('no privateKey');
            }
            walletParams.rootPrivateKey = keyPair.privateKey.toString('hex');
        }
        return walletParams;
    }
    /**
     * Explain/parse transaction
     * @param params
     */
    async explainTransaction(params = {}) {
        if (!params.txHex) {
            throw new Error('missing required param txHex');
        }
        let transaction;
        let txHex;
        try {
            transaction = rippleBinaryCodec.decode(params.txHex);
            txHex = params.txHex;
        }
        catch (e) {
            try {
                transaction = JSON.parse(params.txHex);
                txHex = rippleBinaryCodec.encode(transaction);
            }
            catch (e) {
                throw new Error('txHex needs to be either hex or JSON string for XRP');
            }
        }
        const id = hashes_1.computeBinaryTransactionHash(txHex);
        if (transaction.TransactionType == 'AccountSet') {
            return {
                displayOrder: ['id', 'outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee', 'accountSet'],
                id: id,
                changeOutputs: [],
                outputAmount: 0,
                changeAmount: 0,
                outputs: [],
                fee: {
                    fee: transaction.Fee,
                    feeRate: null,
                    size: txHex.length / 2,
                },
                accountSet: {
                    messageKey: transaction.MessageKey,
                },
            };
        }
        const address = transaction.Destination + (transaction.DestinationTag >= 0 ? '?dt=' + transaction.DestinationTag : '');
        return {
            displayOrder: ['id', 'outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee'],
            id: id,
            changeOutputs: [],
            outputAmount: transaction.Amount,
            changeAmount: 0,
            outputs: [
                {
                    address,
                    amount: transaction.Amount,
                },
            ],
            fee: {
                fee: transaction.Fee,
                feeRate: null,
                size: txHex.length / 2,
            },
        };
    }
    /**
     * Verify that a transaction prebuild complies with the original intention
     * @param txParams params object passed to send
     * @param txPrebuild prebuild object returned by server
     * @param wallet
     * @returns {boolean}
     */
    async verifyTransaction({ txParams, txPrebuild }) {
        const explanation = await this.explainTransaction({
            txHex: txPrebuild.txHex,
        });
        const output = [...explanation.outputs, ...explanation.changeOutputs][0];
        const expectedOutput = txParams.recipients && txParams.recipients[0];
        const comparator = (recipient1, recipient2) => {
            if (recipient1.address !== recipient2.address) {
                return false;
            }
            const amount1 = new bignumber_js_1.BigNumber(recipient1.amount);
            const amount2 = new bignumber_js_1.BigNumber(recipient2.amount);
            return amount1.toFixed() === amount2.toFixed();
        };
        if (!comparator(output, expectedOutput)) {
            throw new Error('transaction prebuild does not match expected output');
        }
        return true;
    }
    /**
     * Check if address is a valid XRP address, and then make sure the root addresses match.
     * This prevents attacks where an attack may switch out the new address for one of their own
     * @param address {String} the address to verify
     * @param rootAddress {String} the wallet's root address
     * @return true iff address is a wallet address (based on rootAddress)
     */
    isWalletAddress({ address, rootAddress }) {
        if (!this.isValidAddress(address)) {
            throw new errors_1.InvalidAddressError(`address verification failure: address "${address}" is not valid`);
        }
        const addressDetails = this.getAddressDetails(address);
        const rootAddressDetails = this.getAddressDetails(rootAddress);
        if (addressDetails.address !== rootAddressDetails.address) {
            throw new errors_1.UnexpectedAddressError(`address validation failure: ${addressDetails.address} vs. ${rootAddressDetails.address}`);
        }
        return true;
    }
    /**
     * URL of a well-known, public facing (non-bitgo) rippled instance which can be used for recovery
     */
    getRippledUrl() {
        return 'https://s1.ripple.com:51234';
    }
    /**
     * Builds a funds recovery transaction without BitGo
     * @param params
     * - rootAddress: root XRP wallet address to recover funds from
     * - userKey: [encrypted] xprv
     * - backupKey: [encrypted] xprv, or xpub if the xprv is held by a KRS provider
     * - walletPassphrase: necessary if one of the xprvs is encrypted
     * - bitgoKey: xpub
     * - krsProvider: necessary if backup key is held by KRS
     * - recoveryDestination: target address to send recovered funds to
     */
    async recover(params) {
        const rippledUrl = this.getRippledUrl();
        const isKrsRecovery = params.backupKey.startsWith('xpub') && !params.userKey.startsWith('xpub');
        const isUnsignedSweep = params.backupKey.startsWith('xpub') && params.userKey.startsWith('xpub');
        const accountInfoParams = {
            method: 'account_info',
            params: [
                {
                    account: params.rootAddress,
                    strict: true,
                    ledger_index: 'current',
                    queue: true,
                    signer_lists: true,
                },
            ],
        };
        if (isKrsRecovery) {
            initiate_1.checkKrsProvider(this, params.krsProvider);
        }
        // Validate the destination address
        if (!this.isValidAddress(params.recoveryDestination)) {
            throw new Error('Invalid destination address!');
        }
        const keys = initiate_1.getBip32Keys(this.bitgo, params, { requireBitGoXpub: false });
        const { addressDetails, feeDetails, serverDetails } = await promise_utils_1.promiseProps({
            addressDetails: this.bitgo.post(rippledUrl).send(accountInfoParams),
            feeDetails: this.bitgo.post(rippledUrl).send({ method: 'fee' }),
            serverDetails: this.bitgo.post(rippledUrl).send({ method: 'server_info' }),
        });
        const openLedgerFee = new bignumber_js_1.BigNumber(feeDetails.body.result.drops.open_ledger_fee);
        const baseReserve = new bignumber_js_1.BigNumber(serverDetails.body.result.info.validated_ledger.reserve_base_xrp).times(this.getBaseFactor());
        const reserveDelta = new bignumber_js_1.BigNumber(serverDetails.body.result.info.validated_ledger.reserve_inc_xrp).times(this.getBaseFactor());
        const currentLedger = serverDetails.body.result.info.validated_ledger.seq;
        const sequenceId = addressDetails.body.result.account_data.Sequence;
        const balance = new bignumber_js_1.BigNumber(addressDetails.body.result.account_data.Balance);
        const signerLists = addressDetails.body.result.account_data.signer_lists;
        const accountFlags = addressDetails.body.result.account_data.Flags;
        // make sure there is only one signer list set
        if (signerLists.length !== 1) {
            throw new Error('unexpected set of signer lists');
        }
        // make sure the signers are user, backup, bitgo
        const userAddress = rippleKeypairs.deriveAddress(keys[0].publicKey.toString('hex'));
        const backupAddress = rippleKeypairs.deriveAddress(keys[1].publicKey.toString('hex'));
        const signerList = signerLists[0];
        if (signerList.SignerQuorum !== 2) {
            throw new Error('invalid minimum signature count');
        }
        const foundAddresses = {};
        const signerEntries = signerList.SignerEntries;
        if (signerEntries.length !== 3) {
            throw new Error('invalid signer list length');
        }
        for (const { SignerEntry } of signerEntries) {
            const weight = SignerEntry.SignerWeight;
            const address = SignerEntry.Account;
            if (weight !== 1) {
                throw new Error('invalid signer weight');
            }
            // if it's a dupe of an address we already know, block
            if (foundAddresses[address] >= 1) {
                throw new Error('duplicate signer address');
            }
            foundAddresses[address] = (foundAddresses[address] || 0) + 1;
        }
        if (foundAddresses[userAddress] !== 1) {
            throw new Error('unexpected incidence frequency of user signer address');
        }
        if (foundAddresses[backupAddress] !== 1) {
            throw new Error('unexpected incidence frequency of user signer address');
        }
        // make sure the flags disable the master key and enforce destination tags
        const USER_KEY_SETTING_FLAG = 65536;
        const MASTER_KEY_DEACTIVATION_FLAG = 1048576;
        const REQUIRE_DESTINATION_TAG_FLAG = 131072;
        if ((accountFlags & USER_KEY_SETTING_FLAG) !== 0) {
            throw new Error('a custom user key has been set');
        }
        if ((accountFlags & MASTER_KEY_DEACTIVATION_FLAG) !== MASTER_KEY_DEACTIVATION_FLAG) {
            throw new Error('the master key has not been deactivated');
        }
        if ((accountFlags & REQUIRE_DESTINATION_TAG_FLAG) !== REQUIRE_DESTINATION_TAG_FLAG) {
            throw new Error('the destination flag requirement has not been activated');
        }
        // recover the funds
        const reserve = baseReserve.plus(reserveDelta.times(5));
        const recoverableBalance = balance.minus(reserve);
        const rawDestination = params.recoveryDestination;
        const destinationDetails = url.parse(rawDestination);
        const destinationAddress = destinationDetails.pathname;
        // parse destination tag from query
        let destinationTag;
        if (destinationDetails.query) {
            const queryDetails = querystring.parse(destinationDetails.query);
            if (Array.isArray(queryDetails.dt)) {
                // if queryDetails.dt is an array, that means dt was given multiple times, which is not valid
                throw new errors_1.InvalidAddressError(`destination tag can appear at most once, but ${queryDetails.dt.length} destination tags were found`);
            }
            const parsedTag = parseInt(queryDetails.dt, 10);
            if (Number.isInteger(parsedTag)) {
                destinationTag = parsedTag;
            }
        }
        const transaction = {
            TransactionType: 'Payment',
            Account: params.rootAddress,
            Destination: destinationAddress,
            DestinationTag: destinationTag,
            Amount: recoverableBalance.toFixed(0),
            Flags: 2147483648,
            LastLedgerSequence: currentLedger + 1000000,
            Fee: openLedgerFee.times(3).toFixed(0),
            Sequence: sequenceId,
        };
        const txJSON = JSON.stringify(transaction);
        if (isUnsignedSweep) {
            return txJSON;
        }
        const rippleLib = ripple();
        if (!keys[0].privateKey) {
            throw new Error(`userKey is not a private key`);
        }
        const userKey = keys[0].privateKey.toString('hex');
        const userSignature = rippleLib.signWithPrivateKey(txJSON, userKey, { signAs: userAddress });
        let signedTransaction;
        if (isKrsRecovery) {
            signedTransaction = userSignature;
        }
        else {
            if (!keys[1].privateKey) {
                throw new Error(`backupKey is not a private key`);
            }
            const backupKey = keys[1].privateKey.toString('hex');
            const backupSignature = rippleLib.signWithPrivateKey(txJSON, backupKey, { signAs: backupAddress });
            signedTransaction = rippleLib.combine([userSignature.signedTransaction, backupSignature.signedTransaction]);
        }
        const transactionExplanation = (await this.explainTransaction({
            txHex: signedTransaction.signedTransaction,
        }));
        transactionExplanation.txHex = signedTransaction.signedTransaction;
        if (isKrsRecovery) {
            transactionExplanation.backupKey = params.backupKey;
            transactionExplanation.coin = this.getChain();
        }
        return transactionExplanation;
    }
    initiateRecovery(params) {
        throw new Error('deprecated method');
    }
    /**
     * Generate a new keypair for this coin.
     * @param seed Seed from which the new keypair should be generated, otherwise a random seed is used
     */
    generateKeyPair(seed) {
        if (!seed) {
            // An extended private key has both a normal 256 bit private key and a 256
            // bit chain code, both of which must be random. 512 bits is therefore the
            // maximum entropy and gives us maximum security against cracking.
            seed = crypto_1.randomBytes(512 / 8);
        }
        const extendedKey = bip32.fromSeed(seed);
        const xpub = extendedKey.neutered().toBase58();
        return {
            pub: xpub,
            prv: extendedKey.toBase58(),
        };
    }
    async parseTransaction(params) {
        return {};
    }
}
exports.Xrp = Xrp;
//# sourceMappingURL=data:application/json;base64,