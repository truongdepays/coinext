"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bch = void 0;
const utxolib = require("@bitgo/utxo-lib");
const abstractUtxoCoin_1 = require("./abstractUtxoCoin");
class Bch extends abstractUtxoCoin_1.AbstractUtxoCoin {
    constructor(bitgo, network) {
        super(bitgo, network || utxolib.networks.bitcoincash);
    }
    static createInstance(bitgo) {
        return new Bch(bitgo);
    }
    getChain() {
        return 'bch';
    }
    getFamily() {
        return 'bch';
    }
    getFullName() {
        return 'Bitcoin Cash';
    }
    getAddressPrefix() {
        return 'bitcoincash';
    }
    supportsBlockTarget() {
        return false;
    }
    /**
     * Canonicalize a Bitcoin Cash address for a specific version
     *
     * Starting on January 14th, 2018 Bitcoin Cash's bitcoin-abc node switched over to using cashaddr
     * encoding for all of their addresses in order to distinguish them from Bitcoin Core's.
     * https://www.bitcoinabc.org/cashaddr. We're sticking with the old base58 format because
     * migrating over to the new format will be laborious, and we want to see how the space evolves
     *
     * @param address
     * @param version the version of the desired address, 'base58' or 'cashaddr', defaulting to 'base58'
     * @returns {*} address string
     */
    canonicalAddress(address, version = 'base58') {
        if (version === 'base58') {
            return utxolib.addressFormat.toCanonicalFormat(address, this.network);
        }
        if (version === 'cashaddr') {
            const script = utxolib.addressFormat.toOutputScriptTryFormats(address, this.network);
            return utxolib.addressFormat.fromOutputScriptWithFormat(script, version, this.network);
        }
        throw new Error(`invalid version ${version}`);
    }
}
exports.Bch = Bch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3YyL2NvaW5zL2JjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FBMkM7QUFJM0MseURBQW1FO0FBR25FLE1BQWEsR0FBSSxTQUFRLG1DQUFnQjtJQUV2QyxZQUFzQixLQUFZLEVBQUUsT0FBcUI7UUFDdkQsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFZO1FBQ2hDLE9BQU8sSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDO0lBRUQsbUJBQW1CO1FBQ2pCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7Ozs7Ozs7OztPQVdHO0lBQ0gsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLE9BQU8sR0FBRyxRQUFRO1FBQzFDLElBQUksT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUN4QixPQUFPLE9BQU8sQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN2RTtRQUVELElBQUksT0FBTyxLQUFLLFVBQVUsRUFBRTtZQUMxQixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDckYsT0FBTyxPQUFPLENBQUMsYUFBYSxDQUFDLDBCQUEwQixDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3hGO1FBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNoRCxDQUFDO0NBQ0Y7QUF0REQsa0JBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdXR4b2xpYiBmcm9tICdAYml0Z28vdXR4by1saWInO1xuXG5pbXBvcnQgeyBCaXRHbyB9IGZyb20gJy4uLy4uL2JpdGdvJztcbmltcG9ydCB7IEJhc2VDb2luIH0gZnJvbSAnLi4vYmFzZUNvaW4nO1xuaW1wb3J0IHsgQWJzdHJhY3RVdHhvQ29pbiwgVXR4b05ldHdvcmsgfSBmcm9tICcuL2Fic3RyYWN0VXR4b0NvaW4nO1xuXG5cbmV4cG9ydCBjbGFzcyBCY2ggZXh0ZW5kcyBBYnN0cmFjdFV0eG9Db2luIHtcblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoYml0Z286IEJpdEdvLCBuZXR3b3JrPzogVXR4b05ldHdvcmspIHtcbiAgICBzdXBlcihiaXRnbywgbmV0d29yayB8fCB1dHhvbGliLm5ldHdvcmtzLmJpdGNvaW5jYXNoKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVJbnN0YW5jZShiaXRnbzogQml0R28pOiBCYXNlQ29pbiB7XG4gICAgcmV0dXJuIG5ldyBCY2goYml0Z28pO1xuICB9XG5cbiAgZ2V0Q2hhaW4oKSB7XG4gICAgcmV0dXJuICdiY2gnO1xuICB9XG5cbiAgZ2V0RmFtaWx5KCkge1xuICAgIHJldHVybiAnYmNoJztcbiAgfVxuXG4gIGdldEZ1bGxOYW1lKCkge1xuICAgIHJldHVybiAnQml0Y29pbiBDYXNoJztcbiAgfVxuXG4gIGdldEFkZHJlc3NQcmVmaXgoKSB7XG4gICAgcmV0dXJuICdiaXRjb2luY2FzaCc7XG4gIH1cblxuICBzdXBwb3J0c0Jsb2NrVGFyZ2V0KCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5vbmljYWxpemUgYSBCaXRjb2luIENhc2ggYWRkcmVzcyBmb3IgYSBzcGVjaWZpYyB2ZXJzaW9uXG4gICAqXG4gICAqIFN0YXJ0aW5nIG9uIEphbnVhcnkgMTR0aCwgMjAxOCBCaXRjb2luIENhc2gncyBiaXRjb2luLWFiYyBub2RlIHN3aXRjaGVkIG92ZXIgdG8gdXNpbmcgY2FzaGFkZHJcbiAgICogZW5jb2RpbmcgZm9yIGFsbCBvZiB0aGVpciBhZGRyZXNzZXMgaW4gb3JkZXIgdG8gZGlzdGluZ3Vpc2ggdGhlbSBmcm9tIEJpdGNvaW4gQ29yZSdzLlxuICAgKiBodHRwczovL3d3dy5iaXRjb2luYWJjLm9yZy9jYXNoYWRkci4gV2UncmUgc3RpY2tpbmcgd2l0aCB0aGUgb2xkIGJhc2U1OCBmb3JtYXQgYmVjYXVzZVxuICAgKiBtaWdyYXRpbmcgb3ZlciB0byB0aGUgbmV3IGZvcm1hdCB3aWxsIGJlIGxhYm9yaW91cywgYW5kIHdlIHdhbnQgdG8gc2VlIGhvdyB0aGUgc3BhY2UgZXZvbHZlc1xuICAgKlxuICAgKiBAcGFyYW0gYWRkcmVzc1xuICAgKiBAcGFyYW0gdmVyc2lvbiB0aGUgdmVyc2lvbiBvZiB0aGUgZGVzaXJlZCBhZGRyZXNzLCAnYmFzZTU4JyBvciAnY2FzaGFkZHInLCBkZWZhdWx0aW5nIHRvICdiYXNlNTgnXG4gICAqIEByZXR1cm5zIHsqfSBhZGRyZXNzIHN0cmluZ1xuICAgKi9cbiAgY2Fub25pY2FsQWRkcmVzcyhhZGRyZXNzLCB2ZXJzaW9uID0gJ2Jhc2U1OCcpIHtcbiAgICBpZiAodmVyc2lvbiA9PT0gJ2Jhc2U1OCcpIHtcbiAgICAgIHJldHVybiB1dHhvbGliLmFkZHJlc3NGb3JtYXQudG9DYW5vbmljYWxGb3JtYXQoYWRkcmVzcywgdGhpcy5uZXR3b3JrKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiA9PT0gJ2Nhc2hhZGRyJykge1xuICAgICAgY29uc3Qgc2NyaXB0ID0gdXR4b2xpYi5hZGRyZXNzRm9ybWF0LnRvT3V0cHV0U2NyaXB0VHJ5Rm9ybWF0cyhhZGRyZXNzLCB0aGlzLm5ldHdvcmspO1xuICAgICAgcmV0dXJuIHV0eG9saWIuYWRkcmVzc0Zvcm1hdC5mcm9tT3V0cHV0U2NyaXB0V2l0aEZvcm1hdChzY3JpcHQsIHZlcnNpb24sIHRoaXMubmV0d29yayk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIHZlcnNpb24gJHt2ZXJzaW9ufWApO1xuICB9XG59XG4iXX0=