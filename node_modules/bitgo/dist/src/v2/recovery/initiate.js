"use strict";
/**
 * @prettier
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStellarKeys = exports.getBip32Keys = exports.validateKey = exports.getIsUnsignedSweep = exports.getIsKrsRecovery = exports.checkKrsProvider = exports.getKrsProvider = void 0;
const bip32 = require("bip32");
const stellar = require("stellar-sdk");
const config = require("../../config");
/**
 * @param coin
 * @param krsProviderName
 * @param checkCoinFamilySupport - assert that krsProvider explicitly supports coin
 * @return KrsProvider
 */
function getKrsProvider(coin, krsProviderName, { checkCoinFamilySupport = true } = {}) {
    if (!krsProviderName) {
        throw new Error(`no krsProvider name`);
    }
    const krsProvider = config.krsProviders[krsProviderName];
    if (krsProvider === undefined) {
        throw new Error('unknown key recovery service provider');
    }
    if (checkCoinFamilySupport && !krsProvider.supportedCoins.includes(coin.getFamily())) {
        throw new Error('specified key recovery service does not support recoveries for this coin');
    }
    return krsProvider;
}
exports.getKrsProvider = getKrsProvider;
/**
 * Wrapper for {@see getKrsProvider} returning void
 */
function checkKrsProvider(coin, krsProviderName, options = {}) {
    getKrsProvider(coin, krsProviderName, options);
}
exports.checkKrsProvider = checkKrsProvider;
function getIsKrsRecovery({ backupKey, userKey }) {
    return backupKey.startsWith('xpub') && !userKey.startsWith('xpub');
}
exports.getIsKrsRecovery = getIsKrsRecovery;
function getIsUnsignedSweep({ backupKey, userKey }) {
    return backupKey.startsWith('xpub') && userKey.startsWith('xpub');
}
exports.getIsUnsignedSweep = getIsUnsignedSweep;
function validateKey(bitgo, { key, source, passphrase, isUnsignedSweep, isKrsRecovery }) {
    if (!key.startsWith('xprv') && !isUnsignedSweep) {
        // Try to decrypt the key
        try {
            if (source === 'user' || (source === 'backup' && !isKrsRecovery)) {
                return bip32.fromBase58(bitgo.decrypt({ password: passphrase, input: key }));
            }
        }
        catch (e) {
            throw new Error(`Failed to decrypt ${source} key with passcode - try again!`);
        }
    }
    try {
        return bip32.fromBase58(key);
    }
    catch (e) {
        throw new Error(`Failed to validate ${source} key - try again!`);
    }
}
exports.validateKey = validateKey;
function getBip32Keys(bitgo, params, { requireBitGoXpub }) {
    const isKrsRecovery = getIsKrsRecovery(params);
    const isUnsignedSweep = getIsUnsignedSweep(params);
    const keys = [
        // Box A
        validateKey(bitgo, {
            key: params.userKey,
            source: 'user',
            passphrase: params.walletPassphrase,
            isKrsRecovery,
            isUnsignedSweep,
        }),
        // Box B
        validateKey(bitgo, {
            key: params.backupKey,
            source: 'backup',
            passphrase: params.walletPassphrase,
            isKrsRecovery,
            isUnsignedSweep,
        }),
    ];
    if (requireBitGoXpub) {
        if (!params.bitgoKey) {
            throw new Error(`BitGo xpub required but not provided`);
        }
        try {
            // Box C
            keys.push(bip32.fromBase58(params.bitgoKey));
        }
        catch (e) {
            throw new Error('Failed to parse bitgo xpub!');
        }
    }
    return keys;
}
exports.getBip32Keys = getBip32Keys;
function getStellarKeys(bitgo, params) {
    const keys = [];
    let userKey = params.userKey;
    let backupKey = params.backupKey;
    // Stellar's Ed25519 public keys start with a G, while private keys start with an S
    const isKrsRecovery = backupKey.startsWith('G') && !userKey.startsWith('G');
    const isUnsignedSweep = backupKey.startsWith('G') && userKey.startsWith('G');
    try {
        if (!userKey.startsWith('S') && !userKey.startsWith('G')) {
            userKey = bitgo.decrypt({
                input: userKey,
                password: params.walletPassphrase,
            });
        }
        const userKeyPair = isUnsignedSweep ? stellar.Keypair.fromPublicKey(userKey) : stellar.Keypair.fromSecret(userKey);
        keys.push(userKeyPair);
    }
    catch (e) {
        throw new Error('Failed to decrypt user key with passcode - try again!');
    }
    try {
        if (!backupKey.startsWith('S') && !isKrsRecovery && !isUnsignedSweep) {
            backupKey = bitgo.decrypt({
                input: backupKey,
                password: params.walletPassphrase,
            });
        }
        if (isKrsRecovery || isUnsignedSweep) {
            keys.push(stellar.Keypair.fromPublicKey(backupKey));
        }
        else {
            keys.push(stellar.Keypair.fromSecret(backupKey));
        }
    }
    catch (e) {
        throw new Error('Failed to decrypt backup key with passcode - try again!');
    }
    return keys;
}
exports.getStellarKeys = getStellarKeys;
//# sourceMappingURL=data:application/json;base64,