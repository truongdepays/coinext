"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalCoinFactory = exports.CoinFactory = void 0;
/**
 * @prettier
 */
const statics_1 = require("@bitgo/statics");
const coins_1 = require("./coins");
const config_1 = require("../config");
const errors = require("../errors");
const bcha_1 = require("./coins/bcha");
const tbcha_1 = require("./coins/tbcha");
const dot_1 = require("./coins/dot");
const tdot_1 = require("./coins/tdot");
const near_1 = require("./coins/near");
const tnear_1 = require("./coins/tnear");
class CoinFactory {
    constructor() {
        this.coinConstructors = new Map();
    }
    /**
     *
     * @param bitgo
     * @param name
     * @throws CoinNotDefinedError
     * @throws UnsupportedCoinError
     */
    getInstance(bitgo, name) {
        let staticsCoin;
        try {
            staticsCoin = statics_1.coins.get(name);
        }
        catch (e) {
            if (!(e instanceof statics_1.CoinNotDefinedError)) {
                throw e;
            }
        }
        const constructor = this.coinConstructors.get(name);
        if (constructor) {
            return constructor(bitgo, staticsCoin);
        }
        const ethConstructor = this.coinConstructors.get('eth');
        if (ethConstructor) {
            const ethCoin = ethConstructor(bitgo, staticsCoin);
            if (ethCoin.isValidAddress(name)) {
                const unknownTokenConstructor = coins_1.Erc20Token.createTokenConstructor({
                    type: 'unknown',
                    coin: 'eth',
                    network: 'Mainnet',
                    name: 'Unknown',
                    tokenContractAddress: name,
                    decimalPlaces: 0,
                });
                return unknownTokenConstructor(bitgo);
            }
        }
        throw new errors.UnsupportedCoinError(name);
    }
    registerCoinConstructor(name, constructor) {
        if (this.coinConstructors.has(name)) {
            throw new Error(`coin '${name}' is already defined`);
        }
        this.coinConstructors.set(name, constructor);
    }
}
exports.CoinFactory = CoinFactory;
exports.GlobalCoinFactory = new CoinFactory();
exports.GlobalCoinFactory.registerCoinConstructor('btc', coins_1.Btc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tbtc', coins_1.Tbtc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('bch', coins_1.Bch.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tbch', coins_1.Tbch.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('bcha', bcha_1.Bcha.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tbcha', tbcha_1.Tbcha.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('bsv', coins_1.Bsv.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tbsv', coins_1.Tbsv.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('btg', coins_1.Btg.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('dot', dot_1.Dot.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tdot', tdot_1.Tdot.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('ltc', coins_1.Ltc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tltc', coins_1.Tltc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('eos', coins_1.Eos.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('teos', coins_1.Teos.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('eth', coins_1.Eth.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('teth', coins_1.Teth.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('gteth', coins_1.Gteth.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('eth2', coins_1.Eth2.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('teth2', coins_1.Teth2.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('etc', coins_1.Etc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tetc', coins_1.Tetc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('rbtc', coins_1.Rbtc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('trbtc', coins_1.Trbtc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('celo', coins_1.Celo.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tcelo', coins_1.Tcelo.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('avaxc', coins_1.AvaxC.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tavaxc', coins_1.TavaxC.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('xrp', coins_1.Xrp.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('txrp', coins_1.Txrp.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('xlm', coins_1.Xlm.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('txlm', coins_1.Txlm.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('dash', coins_1.Dash.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tdash', coins_1.Tdash.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('zec', coins_1.Zec.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tzec', coins_1.Tzec.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('algo', coins_1.Algo.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('talgo', coins_1.Talgo.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('trx', coins_1.Trx.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('ttrx', coins_1.Ttrx.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('xtz', coins_1.Xtz.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('txtz', coins_1.Txtz.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('hbar', coins_1.Hbar.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('thbar', coins_1.Thbar.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('ofc', coins_1.Ofc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('susd', coins_1.Susd.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tsusd', coins_1.Tsusd.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('cspr', coins_1.Cspr.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tcspr', coins_1.Tcspr.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('stx', coins_1.Stx.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tstx', coins_1.Tstx.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('sol', coins_1.Sol.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tsol', coins_1.Tsol.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('near', near_1.Near.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tnear', tnear_1.TNear.createInstance);
for (const token of [...config_1.tokens.bitcoin.eth.tokens, ...config_1.tokens.testnet.eth.tokens]) {
    const tokenConstructor = coins_1.Erc20Token.createTokenConstructor(token);
    exports.GlobalCoinFactory.registerCoinConstructor(token.type, tokenConstructor);
    exports.GlobalCoinFactory.registerCoinConstructor(token.tokenContractAddress, tokenConstructor);
}
for (const token of [...config_1.tokens.bitcoin.xlm.tokens, ...config_1.tokens.testnet.xlm.tokens]) {
    const tokenConstructor = coins_1.StellarToken.createTokenConstructor(token);
    exports.GlobalCoinFactory.registerCoinConstructor(token.type, tokenConstructor);
}
for (const ofcToken of [...config_1.tokens.bitcoin.ofc.tokens, ...config_1.tokens.testnet.ofc.tokens]) {
    const tokenConstructor = coins_1.OfcToken.createTokenConstructor(ofcToken);
    exports.GlobalCoinFactory.registerCoinConstructor(ofcToken.type, tokenConstructor);
}
for (const token of [...config_1.tokens.bitcoin.celo.tokens, ...config_1.tokens.testnet.celo.tokens]) {
    const tokenConstructor = coins_1.CeloToken.createTokenConstructor(token);
    exports.GlobalCoinFactory.registerCoinConstructor(token.type, tokenConstructor);
    exports.GlobalCoinFactory.registerCoinConstructor(token.tokenContractAddress, tokenConstructor);
}
for (const token of [...config_1.tokens.bitcoin.eos.tokens, ...config_1.tokens.testnet.eos.tokens]) {
    const tokenConstructor = coins_1.EosToken.createTokenConstructor(token);
    exports.GlobalCoinFactory.registerCoinConstructor(token.type, tokenConstructor);
    exports.GlobalCoinFactory.registerCoinConstructor(token.tokenContractAddress, tokenConstructor);
}
for (const token of [...config_1.tokens.bitcoin.algo.tokens, ...config_1.tokens.testnet.algo.tokens]) {
    const tokenConstructor = coins_1.AlgoToken.createTokenConstructor(token);
    exports.GlobalCoinFactory.registerCoinConstructor(token.type, tokenConstructor);
    if (token.alias) {
        exports.GlobalCoinFactory.registerCoinConstructor(token.alias, tokenConstructor);
    }
}
for (const token of [...config_1.tokens.bitcoin.avaxc.tokens, ...config_1.tokens.testnet.avaxc.tokens]) {
    const tokenConstructor = coins_1.AvaxCToken.createTokenConstructor(token);
    exports.GlobalCoinFactory.registerCoinConstructor(token.type, tokenConstructor);
    exports.GlobalCoinFactory.registerCoinConstructor(token.tokenContractAddress, tokenConstructor);
}
for (const token of [...config_1.tokens.bitcoin.fiat.tokens, ...config_1.tokens.testnet.fiat.tokens]) {
    const tokenConstructor = coins_1.FiatToken.createTokenConstructor(token);
    exports.GlobalCoinFactory.registerCoinConstructor(token.type, tokenConstructor);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29pbkZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdjIvY29pbkZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0dBRUc7QUFDSCw0Q0FBeUY7QUFHekYsbUNBMERpQjtBQUNqQixzQ0FBbUM7QUFDbkMsb0NBQW9DO0FBQ3BDLHVDQUFvQztBQUNwQyx5Q0FBc0M7QUFDdEMscUNBQWtDO0FBQ2xDLHVDQUFvQztBQUNwQyx1Q0FBb0M7QUFDcEMseUNBQXNDO0FBSXRDLE1BQWEsV0FBVztJQUF4QjtRQUNVLHFCQUFnQixHQUFHLElBQUksR0FBRyxFQUEyQixDQUFDO0lBaURoRSxDQUFDO0lBL0NDOzs7Ozs7T0FNRztJQUNJLFdBQVcsQ0FBQyxLQUFZLEVBQUUsSUFBWTtRQUMzQyxJQUFJLFdBQVcsQ0FBQztRQUNoQixJQUFJO1lBQ0YsV0FBVyxHQUFHLGVBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDL0I7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSw2QkFBbUIsQ0FBQyxFQUFFO2dCQUN2QyxNQUFNLENBQUMsQ0FBQzthQUNUO1NBQ0Y7UUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BELElBQUksV0FBVyxFQUFFO1lBQ2YsT0FBTyxXQUFXLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3hDO1FBRUQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4RCxJQUFJLGNBQWMsRUFBRTtZQUNsQixNQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ25ELElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTtn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dUJBQXVCLENBQUMsS0FBSyxDQUFDLG9CQUFvQixFQUFFLGdCQUFnQixDQUFDLENBQUM7Q0FDekY7QUFFRCxLQUFLLE1BQU0sS0FBSyxJQUFJLENBQUMsR0FBRyxlQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxlQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtJQUNsRixNQUFNLGdCQUFnQixHQUFHLGlCQUFTLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakUseUJBQWlCLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0NBQ3pFIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0IHsgY29pbnMsIEJhc2VDb2luIGFzIFN0YXRpY3NCYXNlQ29pbiwgQ29pbk5vdERlZmluZWRFcnJvciB9IGZyb20gJ0BiaXRnby9zdGF0aWNzJztcbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vYml0Z28nO1xuaW1wb3J0IHsgQmFzZUNvaW4gfSBmcm9tICcuL2Jhc2VDb2luJztcbmltcG9ydCB7XG4gIEFsZ28sXG4gIEF2YXhDLFxuICBCY2gsXG4gIEJzdixcbiAgQnRjLFxuICBCdGcsXG4gIENlbG8sXG4gIENzcHIsXG4gIERhc2gsXG4gIEVvcyxcbiAgRXRjLFxuICBFdGgsXG4gIEV0aDIsXG4gIEhiYXIsXG4gIEx0YyxcbiAgT2ZjLFxuICBSYnRjLFxuICBTb2wsXG4gIFN0eCxcbiAgU3VzZCxcbiAgVGFsZ28sXG4gIFRhdmF4QyxcbiAgVGJjaCxcbiAgVGJzdixcbiAgVGJ0YyxcbiAgVGNlbG8sXG4gIFRjc3ByLFxuICBUZGFzaCxcbiAgVGVvcyxcbiAgVGV0YyxcbiAgVGV0aCxcbiAgVGV0aDIsXG4gIEd0ZXRoLFxuICBUaGJhcixcbiAgVGx0YyxcbiAgVHJidGMsXG4gIFRyeCxcbiAgVHNvbCxcbiAgVHN0eCxcbiAgVHN1c2QsXG4gIFR0cngsXG4gIFh0eixcbiAgVHh0eixcbiAgVHhsbSxcbiAgVHhycCxcbiAgVHplYyxcbiAgWGxtLFxuICBYcnAsXG4gIEVyYzIwVG9rZW4sXG4gIENlbG9Ub2tlbixcbiAgU3RlbGxhclRva2VuLFxuICBBbGdvVG9rZW4sXG4gIE9mY1Rva2VuLFxuICBaZWMsXG4gIEVvc1Rva2VuLFxuICBBdmF4Q1Rva2VuLFxuICBGaWF0VG9rZW4sXG59IGZyb20gJy4vY29pbnMnO1xuaW1wb3J0IHsgdG9rZW5zIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCAqIGFzIGVycm9ycyBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgQmNoYSB9IGZyb20gJy4vY29pbnMvYmNoYSc7XG5pbXBvcnQgeyBUYmNoYSB9IGZyb20gJy4vY29pbnMvdGJjaGEnO1xuaW1wb3J0IHsgRG90IH0gZnJvbSAnLi9jb2lucy9kb3QnO1xuaW1wb3J0IHsgVGRvdCB9IGZyb20gJy4vY29pbnMvdGRvdCc7XG5pbXBvcnQgeyBOZWFyIH0gZnJvbSAnLi9jb2lucy9uZWFyJztcbmltcG9ydCB7IFROZWFyIH0gZnJvbSAnLi9jb2lucy90bmVhcic7XG5cbmV4cG9ydCB0eXBlIENvaW5Db25zdHJ1Y3RvciA9IChiaXRnbzogQml0R28sIHN0YXRpY3NDb2luPzogUmVhZG9ubHk8U3RhdGljc0Jhc2VDb2luPikgPT4gQmFzZUNvaW47XG5cbmV4cG9ydCBjbGFzcyBDb2luRmFjdG9yeSB7XG4gIHByaXZhdGUgY29pbkNvbnN0cnVjdG9ycyA9IG5ldyBNYXA8c3RyaW5nLCBDb2luQ29uc3RydWN0b3I+KCk7XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBiaXRnb1xuICAgKiBAcGFyYW0gbmFtZVxuICAgKiBAdGhyb3dzIENvaW5Ob3REZWZpbmVkRXJyb3JcbiAgICogQHRocm93cyBVbnN1cHBvcnRlZENvaW5FcnJvclxuICAgKi9cbiAgcHVibGljIGdldEluc3RhbmNlKGJpdGdvOiBCaXRHbywgbmFtZTogc3RyaW5nKTogQmFzZUNvaW4ge1xuICAgIGxldCBzdGF0aWNzQ29pbjtcbiAgICB0cnkge1xuICAgICAgc3RhdGljc0NvaW4gPSBjb2lucy5nZXQobmFtZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKCEoZSBpbnN0YW5jZW9mIENvaW5Ob3REZWZpbmVkRXJyb3IpKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29uc3RydWN0b3IgPSB0aGlzLmNvaW5Db25zdHJ1Y3RvcnMuZ2V0KG5hbWUpO1xuICAgIGlmIChjb25zdHJ1Y3Rvcikge1xuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yKGJpdGdvLCBzdGF0aWNzQ29pbik7XG4gICAgfVxuXG4gICAgY29uc3QgZXRoQ29uc3RydWN0b3IgPSB0aGlzLmNvaW5Db25zdHJ1Y3RvcnMuZ2V0KCdldGgnKTtcbiAgICBpZiAoZXRoQ29uc3RydWN0b3IpIHtcbiAgICAgIGNvbnN0IGV0aENvaW4gPSBldGhDb25zdHJ1Y3RvcihiaXRnbywgc3RhdGljc0NvaW4pO1xuICAgICAgaWYgKGV0aENvaW4uaXNWYWxpZEFkZHJlc3MobmFtZSkpIHtcbiAgICAgICAgY29uc3QgdW5rbm93blRva2VuQ29uc3RydWN0b3IgPSBFcmMyMFRva2VuLmNyZWF0ZVRva2VuQ29uc3RydWN0b3Ioe1xuICAgICAgICAgIHR5cGU6ICd1bmtub3duJyxcbiAgICAgICAgICBjb2luOiAnZXRoJyxcbiAgICAgICAgICBuZXR3b3JrOiAnTWFpbm5ldCcsXG4gICAgICAgICAgbmFtZTogJ1Vua25vd24nLFxuICAgICAgICAgIHRva2VuQ29udHJhY3RBZGRyZXNzOiBuYW1lLFxuICAgICAgICAgIGRlY2ltYWxQbGFjZXM6IDAsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdW5rbm93blRva2VuQ29uc3RydWN0b3IoYml0Z28pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IG5ldyBlcnJvcnMuVW5zdXBwb3J0ZWRDb2luRXJyb3IobmFtZSk7XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXJDb2luQ29uc3RydWN0b3IobmFtZTogc3RyaW5nLCBjb25zdHJ1Y3RvcjogQ29pbkNvbnN0cnVjdG9yKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY29pbkNvbnN0cnVjdG9ycy5oYXMobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgY29pbiAnJHtuYW1lfScgaXMgYWxyZWFkeSBkZWZpbmVkYCk7XG4gICAgfVxuICAgIHRoaXMuY29pbkNvbnN0cnVjdG9ycy5zZXQobmFtZSwgY29uc3RydWN0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBHbG9iYWxDb2luRmFjdG9yeTogQ29pbkZhY3RvcnkgPSBuZXcgQ29pbkZhY3RvcnkoKTtcblxuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ2J0YycsIEJ0Yy5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigndGJ0YycsIFRidGMuY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ2JjaCcsIEJjaC5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigndGJjaCcsIFRiY2guY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ2JjaGEnLCBCY2hhLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0YmNoYScsIFRiY2hhLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCdic3YnLCBCc3YuY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3Ric3YnLCBUYnN2LmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCdidGcnLCBCdGcuY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ2RvdCcsIERvdC5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigndGRvdCcsIFRkb3QuY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ2x0YycsIEx0Yy5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigndGx0YycsIFRsdGMuY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ2VvcycsIEVvcy5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigndGVvcycsIFRlb3MuY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ2V0aCcsIEV0aC5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigndGV0aCcsIFRldGguY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ2d0ZXRoJywgR3RldGguY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ2V0aDInLCBFdGgyLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0ZXRoMicsIFRldGgyLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCdldGMnLCBFdGMuY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3RldGMnLCBUZXRjLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCdyYnRjJywgUmJ0Yy5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigndHJidGMnLCBUcmJ0Yy5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcignY2VsbycsIENlbG8uY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3RjZWxvJywgVGNlbG8uY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ2F2YXhjJywgQXZheEMuY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3RhdmF4YycsIFRhdmF4Qy5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigneHJwJywgWHJwLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0eHJwJywgVHhycC5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigneGxtJywgWGxtLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0eGxtJywgVHhsbS5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcignZGFzaCcsIERhc2guY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3RkYXNoJywgVGRhc2guY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3plYycsIFplYy5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigndHplYycsIFR6ZWMuY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ2FsZ28nLCBBbGdvLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0YWxnbycsIFRhbGdvLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0cngnLCBUcnguY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3R0cngnLCBUdHJ4LmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd4dHonLCBYdHouY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3R4dHonLCBUeHR6LmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCdoYmFyJywgSGJhci5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigndGhiYXInLCBUaGJhci5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3Rvcignb2ZjJywgT2ZjLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCdzdXNkJywgU3VzZC5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigndHN1c2QnLCBUc3VzZC5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcignY3NwcicsIENzcHIuY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3Rjc3ByJywgVGNzcHIuY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3N0eCcsIFN0eC5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigndHN0eCcsIFRzdHguY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ3NvbCcsIFNvbC5jcmVhdGVJbnN0YW5jZSk7XG5HbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3RvcigndHNvbCcsIFRzb2wuY3JlYXRlSW5zdGFuY2UpO1xuR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IoJ25lYXInLCBOZWFyLmNyZWF0ZUluc3RhbmNlKTtcbkdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKCd0bmVhcicsIFROZWFyLmNyZWF0ZUluc3RhbmNlKTtcblxuZm9yIChjb25zdCB0b2tlbiBvZiBbLi4udG9rZW5zLmJpdGNvaW4uZXRoLnRva2VucywgLi4udG9rZW5zLnRlc3RuZXQuZXRoLnRva2Vuc10pIHtcbiAgY29uc3QgdG9rZW5Db25zdHJ1Y3RvciA9IEVyYzIwVG9rZW4uY3JlYXRlVG9rZW5Db25zdHJ1Y3Rvcih0b2tlbik7XG4gIEdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKHRva2VuLnR5cGUsIHRva2VuQ29uc3RydWN0b3IpO1xuICBHbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3Rvcih0b2tlbi50b2tlbkNvbnRyYWN0QWRkcmVzcywgdG9rZW5Db25zdHJ1Y3Rvcik7XG59XG5cbmZvciAoY29uc3QgdG9rZW4gb2YgWy4uLnRva2Vucy5iaXRjb2luLnhsbS50b2tlbnMsIC4uLnRva2Vucy50ZXN0bmV0LnhsbS50b2tlbnNdKSB7XG4gIGNvbnN0IHRva2VuQ29uc3RydWN0b3IgPSBTdGVsbGFyVG9rZW4uY3JlYXRlVG9rZW5Db25zdHJ1Y3Rvcih0b2tlbik7XG4gIEdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKHRva2VuLnR5cGUsIHRva2VuQ29uc3RydWN0b3IpO1xufVxuXG5mb3IgKGNvbnN0IG9mY1Rva2VuIG9mIFsuLi50b2tlbnMuYml0Y29pbi5vZmMudG9rZW5zLCAuLi50b2tlbnMudGVzdG5ldC5vZmMudG9rZW5zXSkge1xuICBjb25zdCB0b2tlbkNvbnN0cnVjdG9yID0gT2ZjVG9rZW4uY3JlYXRlVG9rZW5Db25zdHJ1Y3RvcihvZmNUb2tlbik7XG4gIEdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKG9mY1Rva2VuLnR5cGUsIHRva2VuQ29uc3RydWN0b3IpO1xufVxuXG5mb3IgKGNvbnN0IHRva2VuIG9mIFsuLi50b2tlbnMuYml0Y29pbi5jZWxvLnRva2VucywgLi4udG9rZW5zLnRlc3RuZXQuY2Vsby50b2tlbnNdKSB7XG4gIGNvbnN0IHRva2VuQ29uc3RydWN0b3IgPSBDZWxvVG9rZW4uY3JlYXRlVG9rZW5Db25zdHJ1Y3Rvcih0b2tlbik7XG4gIEdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKHRva2VuLnR5cGUsIHRva2VuQ29uc3RydWN0b3IpO1xuICBHbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3Rvcih0b2tlbi50b2tlbkNvbnRyYWN0QWRkcmVzcywgdG9rZW5Db25zdHJ1Y3Rvcik7XG59XG5cbmZvciAoY29uc3QgdG9rZW4gb2YgWy4uLnRva2Vucy5iaXRjb2luLmVvcy50b2tlbnMsIC4uLnRva2Vucy50ZXN0bmV0LmVvcy50b2tlbnNdKSB7XG4gIGNvbnN0IHRva2VuQ29uc3RydWN0b3IgPSBFb3NUb2tlbi5jcmVhdGVUb2tlbkNvbnN0cnVjdG9yKHRva2VuKTtcbiAgR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IodG9rZW4udHlwZSwgdG9rZW5Db25zdHJ1Y3Rvcik7XG4gIEdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKHRva2VuLnRva2VuQ29udHJhY3RBZGRyZXNzLCB0b2tlbkNvbnN0cnVjdG9yKTtcbn1cblxuZm9yIChjb25zdCB0b2tlbiBvZiBbLi4udG9rZW5zLmJpdGNvaW4uYWxnby50b2tlbnMsIC4uLnRva2Vucy50ZXN0bmV0LmFsZ28udG9rZW5zXSkge1xuICBjb25zdCB0b2tlbkNvbnN0cnVjdG9yID0gQWxnb1Rva2VuLmNyZWF0ZVRva2VuQ29uc3RydWN0b3IodG9rZW4pO1xuICBHbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3Rvcih0b2tlbi50eXBlLCB0b2tlbkNvbnN0cnVjdG9yKTtcbiAgaWYgKHRva2VuLmFsaWFzKSB7XG4gICAgR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IodG9rZW4uYWxpYXMsIHRva2VuQ29uc3RydWN0b3IpO1xuICB9XG59XG5cbmZvciAoY29uc3QgdG9rZW4gb2YgWy4uLnRva2Vucy5iaXRjb2luLmF2YXhjLnRva2VucywgLi4udG9rZW5zLnRlc3RuZXQuYXZheGMudG9rZW5zXSkge1xuICBjb25zdCB0b2tlbkNvbnN0cnVjdG9yID0gQXZheENUb2tlbi5jcmVhdGVUb2tlbkNvbnN0cnVjdG9yKHRva2VuKTtcbiAgR2xvYmFsQ29pbkZhY3RvcnkucmVnaXN0ZXJDb2luQ29uc3RydWN0b3IodG9rZW4udHlwZSwgdG9rZW5Db25zdHJ1Y3Rvcik7XG4gIEdsb2JhbENvaW5GYWN0b3J5LnJlZ2lzdGVyQ29pbkNvbnN0cnVjdG9yKHRva2VuLnRva2VuQ29udHJhY3RBZGRyZXNzLCB0b2tlbkNvbnN0cnVjdG9yKTtcbn1cblxuZm9yIChjb25zdCB0b2tlbiBvZiBbLi4udG9rZW5zLmJpdGNvaW4uZmlhdC50b2tlbnMsIC4uLnRva2Vucy50ZXN0bmV0LmZpYXQudG9rZW5zXSkge1xuICBjb25zdCB0b2tlbkNvbnN0cnVjdG9yID0gRmlhdFRva2VuLmNyZWF0ZVRva2VuQ29uc3RydWN0b3IodG9rZW4pO1xuICBHbG9iYWxDb2luRmFjdG9yeS5yZWdpc3RlckNvaW5Db25zdHJ1Y3Rvcih0b2tlbi50eXBlLCB0b2tlbkNvbnN0cnVjdG9yKTtcbn1cbiJdfQ==