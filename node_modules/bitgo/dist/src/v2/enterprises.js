"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Enterprises = void 0;
/**
 * @prettier
 */
const _ = require("lodash");
const enterprise_1 = require("./enterprise");
class Enterprises {
    constructor(bitgo, baseCoin) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
    }
    /**
     * List all enterprises available to the current user
     * @param params unused
     */
    async list(params = {}) {
        const response = (await this.bitgo.get(this.bitgo.url('/enterprise')).result());
        return response.enterprises.map((e) => {
            // instantiate a new object for each enterprise
            return new enterprise_1.Enterprise(this.bitgo, this.baseCoin, e);
        });
    }
    /**
     * Fetch an enterprise from BitGo
     * @param params
     */
    async get(params = {}) {
        const enterpriseId = params.id;
        if (_.isUndefined(enterpriseId)) {
            throw new Error('id must not be empty');
        }
        if (!_.isString(enterpriseId)) {
            throw new Error('id must be hexadecimal enterprise ID');
        }
        const enterpriseData = (await this.bitgo.get(this.bitgo.url(`/enterprise/${enterpriseId}`)).result());
        return new enterprise_1.Enterprise(this.bitgo, this.baseCoin, enterpriseData);
    }
    /**
     * Create a new enterprise
     * @param params
     */
    // TODO: (CT-686) Flesh out params object with valid enterprise creation parameters
    async create(params = {}) {
        const enterpriseData = (await this.bitgo.post(this.bitgo.url(`/enterprise`)).send(params).result());
        return new enterprise_1.Enterprise(this.bitgo, this.baseCoin, enterpriseData);
    }
}
exports.Enterprises = Enterprises;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50ZXJwcmlzZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdjIvZW50ZXJwcmlzZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0dBRUc7QUFDSCw0QkFBNEI7QUFJNUIsNkNBQTBDO0FBTTFDLE1BQWEsV0FBVztJQUl0QixZQUFZLEtBQVksRUFBRSxRQUFrQjtRQUMxQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFnQyxFQUFFO1FBQ2xELE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFRLENBQUM7UUFDdkYsT0FBTyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3BDLCtDQUErQztZQUMvQyxPQUFPLElBQUksdUJBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUErQixFQUFFO1FBQ2hELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztTQUN6QztRQUNELElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztTQUN6RDtRQUVELE1BQU0sY0FBYyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxlQUFlLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBUSxDQUFDO1FBQzdHLE9BQU8sSUFBSSx1QkFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsbUZBQW1GO0lBQzVFLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBYyxFQUFFO1FBQ2xDLE1BQU0sY0FBYyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBUSxDQUFDO1FBQzNHLE9BQU8sSUFBSSx1QkFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNuRSxDQUFDO0NBQ0Y7QUEvQ0Qsa0NBK0NDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgQml0R28gfSBmcm9tICcuLi9iaXRnbyc7XG5cbmltcG9ydCB7IEJhc2VDb2luIH0gZnJvbSAnLi9iYXNlQ29pbic7XG5pbXBvcnQgeyBFbnRlcnByaXNlIH0gZnJvbSAnLi9lbnRlcnByaXNlJztcblxuZXhwb3J0IGludGVyZmFjZSBHZXRFbnRlcnByaXNlT3B0aW9ucyB7XG4gIGlkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgRW50ZXJwcmlzZXMge1xuICBwcml2YXRlIHJlYWRvbmx5IGJpdGdvOiBCaXRHbztcbiAgcHJpdmF0ZSByZWFkb25seSBiYXNlQ29pbjogQmFzZUNvaW47XG5cbiAgY29uc3RydWN0b3IoYml0Z286IEJpdEdvLCBiYXNlQ29pbjogQmFzZUNvaW4pIHtcbiAgICB0aGlzLmJpdGdvID0gYml0Z287XG4gICAgdGhpcy5iYXNlQ29pbiA9IGJhc2VDb2luO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgYWxsIGVudGVycHJpc2VzIGF2YWlsYWJsZSB0byB0aGUgY3VycmVudCB1c2VyXG4gICAqIEBwYXJhbSBwYXJhbXMgdW51c2VkXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgbGlzdChwYXJhbXM6IFJlY29yZDxzdHJpbmcsIG5ldmVyPiA9IHt9KTogUHJvbWlzZTxFbnRlcnByaXNlW10+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IChhd2FpdCB0aGlzLmJpdGdvLmdldCh0aGlzLmJpdGdvLnVybCgnL2VudGVycHJpc2UnKSkucmVzdWx0KCkpIGFzIGFueTtcbiAgICByZXR1cm4gcmVzcG9uc2UuZW50ZXJwcmlzZXMubWFwKChlKSA9PiB7XG4gICAgICAvLyBpbnN0YW50aWF0ZSBhIG5ldyBvYmplY3QgZm9yIGVhY2ggZW50ZXJwcmlzZVxuICAgICAgcmV0dXJuIG5ldyBFbnRlcnByaXNlKHRoaXMuYml0Z28sIHRoaXMuYmFzZUNvaW4sIGUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGFuIGVudGVycHJpc2UgZnJvbSBCaXRHb1xuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZ2V0KHBhcmFtczogR2V0RW50ZXJwcmlzZU9wdGlvbnMgPSB7fSk6IFByb21pc2U8RW50ZXJwcmlzZT4ge1xuICAgIGNvbnN0IGVudGVycHJpc2VJZCA9IHBhcmFtcy5pZDtcbiAgICBpZiAoXy5pc1VuZGVmaW5lZChlbnRlcnByaXNlSWQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2lkIG11c3Qgbm90IGJlIGVtcHR5Jyk7XG4gICAgfVxuICAgIGlmICghXy5pc1N0cmluZyhlbnRlcnByaXNlSWQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2lkIG11c3QgYmUgaGV4YWRlY2ltYWwgZW50ZXJwcmlzZSBJRCcpO1xuICAgIH1cblxuICAgIGNvbnN0IGVudGVycHJpc2VEYXRhID0gKGF3YWl0IHRoaXMuYml0Z28uZ2V0KHRoaXMuYml0Z28udXJsKGAvZW50ZXJwcmlzZS8ke2VudGVycHJpc2VJZH1gKSkucmVzdWx0KCkpIGFzIGFueTtcbiAgICByZXR1cm4gbmV3IEVudGVycHJpc2UodGhpcy5iaXRnbywgdGhpcy5iYXNlQ29pbiwgZW50ZXJwcmlzZURhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBlbnRlcnByaXNlXG4gICAqIEBwYXJhbSBwYXJhbXNcbiAgICovXG4gIC8vIFRPRE86IChDVC02ODYpIEZsZXNoIG91dCBwYXJhbXMgb2JqZWN0IHdpdGggdmFsaWQgZW50ZXJwcmlzZSBjcmVhdGlvbiBwYXJhbWV0ZXJzXG4gIHB1YmxpYyBhc3luYyBjcmVhdGUocGFyYW1zOiBhbnkgPSB7fSk6IFByb21pc2U8RW50ZXJwcmlzZT4ge1xuICAgIGNvbnN0IGVudGVycHJpc2VEYXRhID0gKGF3YWl0IHRoaXMuYml0Z28ucG9zdCh0aGlzLmJpdGdvLnVybChgL2VudGVycHJpc2VgKSkuc2VuZChwYXJhbXMpLnJlc3VsdCgpKSBhcyBhbnk7XG4gICAgcmV0dXJuIG5ldyBFbnRlcnByaXNlKHRoaXMuYml0Z28sIHRoaXMuYmFzZUNvaW4sIGVudGVycHJpc2VEYXRhKTtcbiAgfVxufVxuIl19