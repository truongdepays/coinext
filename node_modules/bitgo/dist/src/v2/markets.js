"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Markets = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const { validateParams } = sdk_core_1.common;
class Markets {
    constructor(bitgo, baseCoin) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
    }
    /**
     * Get the latest price data
     * @param params {}
     * @returns {*} an object containing price and volume data from the
     * current day in a number of currencies
     **/
    async latest(params) {
        return await this.bitgo.get(this.baseCoin.url('/market/latest')).result();
    }
    /**
     * Get yesterday's price data
     * @param params {}
     * @returns {*} an object containing price and volume data from the
     * previous day in a number of currencies
     */
    async yesterday(params) {
        return await this.bitgo.get(this.baseCoin.url('/market/yesterday')).result();
    }
    /**
     * Get price data from up to 90 days prior to today
     * @param params { currencyName: the code for the desired currency, for example USD }
     * @returns {*} an object containing average prices from a number of previous days
     */
    async lastDays(params) {
        validateParams(params, ['currencyName'], []);
        const days = params.days && !isNaN(parseInt(params.days, 10)) ? parseInt(params.days, 10) : 90;
        if (days && days < 0) {
            throw new Error('must use a non-negative number of days');
        }
        return this.bitgo.get(this.baseCoin.url('/market/last/' + days + '/' + params.currencyName)).result();
    }
}
exports.Markets = Markets;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2V0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92Mi9tYXJrZXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQVVBLDhDQUF5QztBQUd6QyxNQUFNLEVBQUUsY0FBYyxFQUFFLEdBQUcsaUJBQU0sQ0FBQztBQWVsQyxNQUFhLE9BQU87SUFJbEIsWUFBbUIsS0FBWSxFQUFFLFFBQWtCO1FBQ2pELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7Ozs7UUFLSTtJQUNKLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBcUI7UUFDaEMsT0FBTyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM1RSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQXdCO1FBQ3RDLE9BQU8sTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDL0UsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQXVCO1FBQ3BDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUU3QyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFL0YsSUFBSSxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7U0FDM0Q7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3hHLENBQUM7Q0FDRjtBQTdDRCwwQkE2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1hcmtldHMgT2JqZWN0XG4gKiBCaXRHbyBhY2Nlc3NvciB0byBCaXRjb2luIG1hcmtldCBkYXRhLlxuICpcbiAqIENvcHlyaWdodCAyMDIyLCBCaXRHbywgSW5jLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0IHsgQml0R28gfSBmcm9tICcuLi9iaXRnbyc7XG5cbmltcG9ydCB7IGNvbW1vbiB9IGZyb20gJ0BiaXRnby9zZGstY29yZSc7XG5pbXBvcnQgeyBCYXNlQ29pbiB9IGZyb20gJy4vYmFzZUNvaW4nO1xuXG5jb25zdCB7IHZhbGlkYXRlUGFyYW1zIH0gPSBjb21tb247XG5cbi8vIFRPRE8gKFNES1QtOSk6IHJldmVyc2UgZW5naW5lZXIgYW5kIGFkZCBvcHRpb25zXG4vLyBleHBvcnQgaW50ZXJmYWNlIExhdGVzdE9wdGlvbnMge31cbmV4cG9ydCB0eXBlIExhdGVzdE9wdGlvbnMgPSBhbnk7XG5cbi8vIFRPRE8gKFNES1QtOSk6IHJldmVyc2UgZW5naW5lZXIgYW5kIGFkZCBvcHRpb25zXG4vLyBleHBvcnQgaW50ZXJmYWNlIFllc3RlcmRheU9wdGlvbnMge31cbmV4cG9ydCB0eXBlIFllc3RlcmRheU9wdGlvbnMgPSBhbnk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGFzdERheXNPcHRpb25zIHtcbiAgY3VycmVuY3lOYW1lOiBzdHJpbmc7XG4gIGRheXM/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBNYXJrZXRzIHtcbiAgcHJpdmF0ZSByZWFkb25seSBiaXRnbzogQml0R287XG4gIHByaXZhdGUgcmVhZG9ubHkgYmFzZUNvaW46IEJhc2VDb2luO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihiaXRnbzogQml0R28sIGJhc2VDb2luOiBCYXNlQ29pbikge1xuICAgIHRoaXMuYml0Z28gPSBiaXRnbztcbiAgICB0aGlzLmJhc2VDb2luID0gYmFzZUNvaW47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBsYXRlc3QgcHJpY2UgZGF0YVxuICAgKiBAcGFyYW0gcGFyYW1zIHt9XG4gICAqIEByZXR1cm5zIHsqfSBhbiBvYmplY3QgY29udGFpbmluZyBwcmljZSBhbmQgdm9sdW1lIGRhdGEgZnJvbSB0aGVcbiAgICogY3VycmVudCBkYXkgaW4gYSBudW1iZXIgb2YgY3VycmVuY2llc1xuICAgKiovXG4gIGFzeW5jIGxhdGVzdChwYXJhbXM6IExhdGVzdE9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmJpdGdvLmdldCh0aGlzLmJhc2VDb2luLnVybCgnL21hcmtldC9sYXRlc3QnKSkucmVzdWx0KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHllc3RlcmRheSdzIHByaWNlIGRhdGFcbiAgICogQHBhcmFtIHBhcmFtcyB7fVxuICAgKiBAcmV0dXJucyB7Kn0gYW4gb2JqZWN0IGNvbnRhaW5pbmcgcHJpY2UgYW5kIHZvbHVtZSBkYXRhIGZyb20gdGhlXG4gICAqIHByZXZpb3VzIGRheSBpbiBhIG51bWJlciBvZiBjdXJyZW5jaWVzXG4gICAqL1xuICBhc3luYyB5ZXN0ZXJkYXkocGFyYW1zOiBZZXN0ZXJkYXlPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5iaXRnby5nZXQodGhpcy5iYXNlQ29pbi51cmwoJy9tYXJrZXQveWVzdGVyZGF5JykpLnJlc3VsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBwcmljZSBkYXRhIGZyb20gdXAgdG8gOTAgZGF5cyBwcmlvciB0byB0b2RheVxuICAgKiBAcGFyYW0gcGFyYW1zIHsgY3VycmVuY3lOYW1lOiB0aGUgY29kZSBmb3IgdGhlIGRlc2lyZWQgY3VycmVuY3ksIGZvciBleGFtcGxlIFVTRCB9XG4gICAqIEByZXR1cm5zIHsqfSBhbiBvYmplY3QgY29udGFpbmluZyBhdmVyYWdlIHByaWNlcyBmcm9tIGEgbnVtYmVyIG9mIHByZXZpb3VzIGRheXNcbiAgICovXG4gIGFzeW5jIGxhc3REYXlzKHBhcmFtczogTGFzdERheXNPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICB2YWxpZGF0ZVBhcmFtcyhwYXJhbXMsIFsnY3VycmVuY3lOYW1lJ10sIFtdKTtcblxuICAgIGNvbnN0IGRheXMgPSBwYXJhbXMuZGF5cyAmJiAhaXNOYU4ocGFyc2VJbnQocGFyYW1zLmRheXMsIDEwKSkgPyBwYXJzZUludChwYXJhbXMuZGF5cywgMTApIDogOTA7XG5cbiAgICBpZiAoZGF5cyAmJiBkYXlzIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtdXN0IHVzZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIgb2YgZGF5cycpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmJpdGdvLmdldCh0aGlzLmJhc2VDb2luLnVybCgnL21hcmtldC9sYXN0LycgKyBkYXlzICsgJy8nICsgcGFyYW1zLmN1cnJlbmN5TmFtZSkpLnJlc3VsdCgpO1xuICB9XG59XG4iXX0=