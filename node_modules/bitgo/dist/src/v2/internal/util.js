"use strict";
/**
 * @prettier
 * @hidden
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Util = exports.RequestTracer = void 0;
/**
 */
const bip32 = require("bip32");
const Big = require("big.js");
const _ = require("lodash");
const crypto_1 = require("crypto");
const debugLib = require("debug");
const errors_1 = require("../../errors");
const debug = debugLib('bitgo:v2:util');
let ethUtil;
let isEthAvailable = false;
const ethImport = 'ethereumjs-util';
Promise.resolve().then(() => require('ethereumjs-util')).then((eth) => {
    ethUtil = eth;
    isEthAvailable = true;
})
    .catch((e) => {
    // ethereum currently not supported
    debug('unable to load ethereumjs-util:');
    debug(e.stack);
});
/**
 * Create a request tracer for tracing workflows which involve multiple round trips to the server
 */
class RequestTracer {
    constructor() {
        this._seq = 0;
        this._seed = crypto_1.randomBytes(10);
    }
    inc() {
        this._seq++;
    }
    toString() {
        return `${this._seed.toString('hex')}-${_.padStart(this._seq.toString(16), 4, '0')}`;
    }
}
exports.RequestTracer = RequestTracer;
class Util {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    constructor() { }
    /**
     * @deprecated
     */
    static isEthAvailable() {
        return isEthAvailable;
    }
    /**
     * Convert a big.js big number to an array of unsigned bytes
     * @param bn
     * @deprecated
     */
    static bnToByteArrayUnsigned(bn) {
        let ba = bn.abs().toByteArray();
        if (ba.length) {
            if (ba[0] === 0) {
                ba = ba.slice(1);
            }
            return ba.map(function (v) {
                return v < 0 ? v + 256 : v;
            });
        }
        else {
            // Empty array, nothing to do
            return ba;
        }
    }
    /**
     * Utility method for handling arguments of pageable queries
     * @param params
     * @deprecated
     */
    static preparePageableQuery(params = {}) {
        const query = {};
        if (params.limit) {
            if (!_.isNumber(params.limit)) {
                throw new Error('invalid limit argument, expecting number');
            }
            query.limit = params.limit;
        }
        if (params.skip) {
            if (!_.isNumber(params.skip)) {
                throw new Error('invalid skip argument, expecting number');
            }
            query.skip = params.skip;
        }
        return query;
    }
    /**
     * Create a request identifier for tracing multi-request workflows
     */
    static createRequestId() {
        return new RequestTracer();
    }
    /**
     * Convert a BTC xpub to an Ethereum address (with 0x prefix)
     * @param xpub
     * @deprecated
     */
    static xpubToEthAddress(xpub) {
        if (!isEthAvailable) {
            throw new errors_1.EthereumLibraryUnavailableError(ethImport);
        }
        return ethUtil.bufferToHex(ethUtil.publicToAddress(bip32.fromBase58(xpub).publicKey, true /* sanitize */));
    }
    /**
     * Convert a BTC xpriv to an Ethereum private key (without 0x prefix)
     * @param xprv
     * @deprecated
     */
    static xprvToEthPrivateKey(xprv) {
        const node = bip32.fromBase58(xprv);
        if (!node.privateKey) {
            throw new Error(`no privateKey`);
        }
        return node.privateKey.toString('hex');
    }
    /**
     * Sign a message using Ethereum's ECsign method and return the signature string
     * @param msgHash
     * @param privKey
     * @deprecated
     */
    static ethSignMsgHash(msgHash, privKey) {
        if (!isEthAvailable) {
            throw new errors_1.EthereumLibraryUnavailableError(ethImport);
        }
        const signatureInParts = ethUtil.ecsign(Buffer.from(ethUtil.stripHexPrefix(msgHash), 'hex'), Buffer.from(privKey, 'hex'));
        // Assemble strings from r, s and v
        const r = ethUtil.setLengthLeft(signatureInParts.r, 32).toString('hex');
        const s = ethUtil.setLengthLeft(signatureInParts.s, 32).toString('hex');
        const v = ethUtil.stripHexPrefix(ethUtil.intToHex(signatureInParts.v));
        // Concatenate the r, s and v parts to make the signature string
        return ethUtil.addHexPrefix(r.concat(s, v));
    }
    /**
     * Convert from wei string (or BN) to Ether (multiply by 1e18)
     * @param wei
     * @deprecated
     */
    static weiToEtherString(wei) {
        if (!isEthAvailable) {
            throw new errors_1.EthereumLibraryUnavailableError(ethImport);
        }
        let bn = wei;
        if (!(wei instanceof ethUtil.BN)) {
            bn = new ethUtil.BN(wei);
        }
        Big.E_POS = 256;
        Big.E_NEG = -18;
        const weiString = bn.toString(10);
        const big = new Big(weiString);
        // 10^18
        const ether = big.div('1000000000000000000');
        return ether.toPrecision();
    }
    /**
     * Recover an ethereum address from a signature and message hash
     * @param msgHash
     * @param signature
     * @deprecated
     */
    static ecRecoverEthAddress(msgHash, signature) {
        msgHash = ethUtil.stripHexPrefix(msgHash);
        signature = ethUtil.stripHexPrefix(signature);
        const v = parseInt(signature.slice(128, 130), 16);
        const r = Buffer.from(signature.slice(0, 64), 'hex');
        const s = Buffer.from(signature.slice(64, 128), 'hex');
        const pubKey = ethUtil.ecrecover(Buffer.from(msgHash, 'hex'), v, r, s);
        return ethUtil.bufferToHex(ethUtil.pubToAddress(pubKey));
    }
}
exports.Util = Util;
//# sourceMappingURL=data:application/json;base64,