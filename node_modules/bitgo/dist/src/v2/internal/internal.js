"use strict";
/**
 * @prettier
 * @hidden
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFirstPendingTransaction = void 0;
const lodash_1 = require("lodash");
/**
 * Internal function to centralize this route for wallet-scoped and enterprise-scoped queries
 * Params must contain either walletId or enterpriseId
 * @param params Id to query for pending transaction
 * @param baseCoin The coin object
 * @param bitgo The BitGo object
 * @returns result of the query
 */
async function getFirstPendingTransaction(params, baseCoin, bitgo) {
    // These errors should never happen when this is called from wallet.js or enterprise.js
    if (lodash_1.isUndefined(baseCoin)) {
        throw new Error('Must provide baseCoin');
    }
    if (lodash_1.isUndefined(bitgo)) {
        throw new Error('Must provide BitGo object');
    }
    if (lodash_1.isUndefined(params.walletId) && lodash_1.isUndefined(params.enterpriseId)) {
        throw new Error('Must provide either walletId or enterpriseId');
    }
    return await bitgo.get(baseCoin.url('/tx/pending/first')).query(params).result();
}
exports.getFirstPendingTransaction = getFirstPendingTransaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdjIvaW50ZXJuYWwvaW50ZXJuYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBTUgsbUNBQXFDO0FBRXJDOzs7Ozs7O0dBT0c7QUFDSSxLQUFLLFVBQVUsMEJBQTBCLENBQzlDLE1BQW9ELEVBQ3BELFFBQWtCLEVBQ2xCLEtBQVk7SUFFWix1RkFBdUY7SUFDdkYsSUFBSSxvQkFBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztLQUMxQztJQUNELElBQUksb0JBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7S0FDOUM7SUFDRCxJQUFJLG9CQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLG9CQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFO1FBQ3BFLE1BQU0sSUFBSSxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztLQUNqRTtJQUNELE9BQU8sTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNuRixDQUFDO0FBaEJELGdFQWdCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByZXR0aWVyXG4gKiBAaGlkZGVuXG4gKi9cblxuLyoqXG4gKi9cbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vLi4vYml0Z28nO1xuaW1wb3J0IHsgQmFzZUNvaW4gfSBmcm9tICcuLi9iYXNlQ29pbic7XG5pbXBvcnQgeyBpc1VuZGVmaW5lZCB9IGZyb20gJ2xvZGFzaCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZnVuY3Rpb24gdG8gY2VudHJhbGl6ZSB0aGlzIHJvdXRlIGZvciB3YWxsZXQtc2NvcGVkIGFuZCBlbnRlcnByaXNlLXNjb3BlZCBxdWVyaWVzXG4gKiBQYXJhbXMgbXVzdCBjb250YWluIGVpdGhlciB3YWxsZXRJZCBvciBlbnRlcnByaXNlSWRcbiAqIEBwYXJhbSBwYXJhbXMgSWQgdG8gcXVlcnkgZm9yIHBlbmRpbmcgdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSBiYXNlQ29pbiBUaGUgY29pbiBvYmplY3RcbiAqIEBwYXJhbSBiaXRnbyBUaGUgQml0R28gb2JqZWN0XG4gKiBAcmV0dXJucyByZXN1bHQgb2YgdGhlIHF1ZXJ5XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRGaXJzdFBlbmRpbmdUcmFuc2FjdGlvbihcbiAgcGFyYW1zOiB7IHdhbGxldElkPzogc3RyaW5nOyBlbnRlcnByaXNlSWQ/OiBzdHJpbmcgfSxcbiAgYmFzZUNvaW46IEJhc2VDb2luLFxuICBiaXRnbzogQml0R29cbik6IFByb21pc2U8YW55PiB7XG4gIC8vIFRoZXNlIGVycm9ycyBzaG91bGQgbmV2ZXIgaGFwcGVuIHdoZW4gdGhpcyBpcyBjYWxsZWQgZnJvbSB3YWxsZXQuanMgb3IgZW50ZXJwcmlzZS5qc1xuICBpZiAoaXNVbmRlZmluZWQoYmFzZUNvaW4pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgYmFzZUNvaW4nKTtcbiAgfVxuICBpZiAoaXNVbmRlZmluZWQoYml0Z28pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgQml0R28gb2JqZWN0Jyk7XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKHBhcmFtcy53YWxsZXRJZCkgJiYgaXNVbmRlZmluZWQocGFyYW1zLmVudGVycHJpc2VJZCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSBlaXRoZXIgd2FsbGV0SWQgb3IgZW50ZXJwcmlzZUlkJyk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IGJpdGdvLmdldChiYXNlQ29pbi51cmwoJy90eC9wZW5kaW5nL2ZpcnN0JykpLnF1ZXJ5KHBhcmFtcykucmVzdWx0KCk7XG59XG4iXX0=