"use strict";
/**
 * @hidden
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 */
//
// TravelRule Object
// BitGo accessor for a specific enterprise
//
// Copyright 2014, BitGo, Inc.  All Rights Reserved.
//
const bip32 = require("bip32");
const utxolib = require("@bitgo/utxo-lib");
const Bluebird = require("bluebird");
const _ = require("lodash");
const sdk_core_1 = require("@bitgo/sdk-core");
const bitcoin_1 = require("./bitcoin");
const sdk_api_1 = require("@bitgo/sdk-api");
const ecdh_1 = require("./ecdh");
//
// Constructor
//
const TravelRule = function (bitgo) {
    this.bitgo = bitgo;
};
TravelRule.prototype.url = function (extra) {
    extra = extra || '';
    return this.bitgo.url('/travel/' + extra);
};
/**
  * Get available travel-rule info recipients for a transaction
  * @param params
  *  txid: transaction id
  * @param callback
  * @returns {*}
  */
TravelRule.prototype.getRecipients = function (params, callback) {
    params = params || {};
    params.txid = params.txid || params.hash;
    sdk_core_1.common.validateParams(params, ['txid'], [], callback);
    const url = this.url(params.txid + '/recipients');
    return Bluebird.resolve(this.bitgo.get(url).result('recipients')).nodeify(callback);
};
TravelRule.prototype.validateTravelInfo = function (info) {
    const fields = {
        amount: { type: 'number' },
        toAddress: { type: 'string' },
        toEnterprise: { type: 'string' },
        fromUserName: { type: 'string' },
        fromUserAccount: { type: 'string' },
        fromUserAddress: { type: 'string' },
        toUserName: { type: 'string' },
        toUserAccount: { type: 'string' },
        toUserAddress: { type: 'string' },
        extra: { type: 'object' },
    };
    _.forEach(fields, function (field, fieldName) {
        // No required fields yet -- should there be?
        if (field.required) {
            if (info[fieldName] === undefined) {
                throw new Error('missing required field ' + fieldName + ' in travel info');
            }
        }
        if (info[fieldName] && typeof (info[fieldName]) !== field.type) {
            throw new Error('incorrect type for field ' + fieldName + ' in travel info, expected ' + field.type);
        }
    });
    // Strip out any other fields we don't know about
    const result = _.pick(info, _.keys(fields));
    if (_.isEmpty(result)) {
        throw new Error('empty travel data');
    }
    return result;
};
/**
 * Takes a transaction object as returned by getTransaction or listTransactions, along
 * with a keychain (or hdnode object), and attempts to decrypt any encrypted travel
 * info included in the transaction's receivedTravelInfo field.
 * Parameters:
 *   tx: a transaction object
 *   keychain: keychain object (with xprv)
 * Returns:
 *   the tx object, augmented with decrypted travelInfo fields
 */
TravelRule.prototype.decryptReceivedTravelInfo = function (params = {}) {
    const tx = params.tx;
    if (!_.isObject(tx)) {
        throw new Error('expecting tx param to be object');
    }
    if (!tx.receivedTravelInfo || !tx.receivedTravelInfo.length) {
        return tx;
    }
    const keychain = params.keychain;
    if (!_.isObject(keychain) || !_.isString(keychain.xprv)) {
        throw new Error('expecting keychain param with xprv');
    }
    const hdNode = bip32.fromBase58(keychain.xprv);
    tx.receivedTravelInfo.forEach((info) => {
        const key = hdNode.derivePath(sdk_api_1.sanitizeLegacyPath(info.toPubKeyPath));
        const secret = ecdh_1.getSharedSecret(key, Buffer.from(info.fromPubKey, 'hex')).toString('hex');
        try {
            const decrypted = this.bitgo.decrypt({
                input: info.encryptedTravelInfo,
                password: secret,
            });
            info.travelInfo = JSON.parse(decrypted);
        }
        catch (err) {
            console.error('failed to decrypt or parse travel info for ', info.transactionId + ':' + info.outputIndex);
        }
    });
    return tx;
};
TravelRule.prototype.prepareParams = function (params) {
    params = params || {};
    params.txid = params.txid || params.hash;
    sdk_core_1.common.validateParams(params, ['txid'], ['fromPrivateInfo']);
    const txid = params.txid;
    const recipient = params.recipient;
    let travelInfo = params.travelInfo;
    if (!recipient || !_.isObject(recipient)) {
        throw new Error('invalid or missing recipient');
    }
    if (!travelInfo || !_.isObject(travelInfo)) {
        throw new Error('invalid or missing travelInfo');
    }
    if (!params.noValidate) {
        travelInfo = this.validateTravelInfo(travelInfo);
    }
    // Fill in toEnterprise if not already filled
    if (!travelInfo.toEnterprise && recipient.enterprise) {
        travelInfo.toEnterprise = recipient.enterprise;
    }
    // If a key was not provided, create a new random key
    let fromKey = params.fromKey && utxolib.ECPair.fromWIF(params.fromKey, bitcoin_1.getNetwork());
    if (!fromKey) {
        fromKey = bitcoin_1.makeRandomKey();
    }
    // Compute the shared key for encryption
    const sharedSecret = ecdh_1.getSharedSecret(fromKey, Buffer.from(recipient.pubKey, 'hex')).toString('hex');
    // JSON-ify and encrypt the payload
    const travelInfoJSON = JSON.stringify(travelInfo);
    const encryptedTravelInfo = this.bitgo.encrypt({
        input: travelInfoJSON,
        password: sharedSecret,
    });
    const result = {
        txid: txid,
        outputIndex: recipient.outputIndex,
        toPubKey: recipient.pubKey,
        fromPubKey: fromKey.publicKey.toString('hex'),
        encryptedTravelInfo: encryptedTravelInfo,
        fromPrivateInfo: undefined,
    };
    if (params.fromPrivateInfo) {
        result.fromPrivateInfo = params.fromPrivateInfo;
    }
    return result;
};
/**
 * Send travel data to the server for a transaction
 */
TravelRule.prototype.send = function (params, callback) {
    params = params || {};
    params.txid = params.txid || params.hash;
    sdk_core_1.common.validateParams(params, ['txid', 'toPubKey', 'encryptedTravelInfo'], ['fromPubKey', 'fromPrivateInfo'], callback);
    if (!_.isNumber(params.outputIndex)) {
        throw new Error('invalid outputIndex');
    }
    return Bluebird.resolve(this.bitgo.post(this.url(params.txid + '/' + params.outputIndex)).send(params).result()).nodeify(callback);
};
/**
 * Send multiple travel rule infos for the outputs of a single transaction.
 * Parameters:
 *   - txid (or hash): txid of the transaction (must be a sender of the tx)
 *   - travelInfos: array of travelInfo objects which look like the following:
 *     {
 *       outputIndex: number,     // tx output index
 *       fromUserName: string,    // name of the sending user
 *       fromUserAccount: string, // account id of the sending user
 *       fromUserAddress: string, // mailing address of the sending user
 *       toUserName: string,      // name of the receiving user
 *       toUserAccount: string,   // account id of the receiving user
 *       toUserAddress: string    // mailing address of the receiving user
 *     }
 *     All fields aside from outputIndex are optional, but at least one must
 *     be defined.
 *
 *  It is not necessary to provide travelInfo for all output indices.
 *  End-to-end encryption of the travel info is handled automatically by this method.
 *
 */
TravelRule.prototype.sendMany = function (params, callback) {
    params = params || {};
    params.txid = params.txid || params.hash;
    sdk_core_1.common.validateParams(params, ['txid'], callback);
    const travelInfos = params.travelInfos;
    if (!_.isArray(travelInfos)) {
        throw new Error('expected parameter travelInfos to be array');
    }
    const self = this;
    const travelInfoMap = _(travelInfos)
        .keyBy('outputIndex')
        .mapValues(function (travelInfo) {
        return self.validateTravelInfo(travelInfo);
    })
        .value();
    return self.getRecipients({ txid: params.txid })
        .then(function (recipients) {
        // Build up data to post
        const sendParamsList = [];
        // don't regenerate a new random key for each recipient
        const fromKey = params.fromKey || bitcoin_1.makeRandomKey().toWIF();
        recipients.forEach(function (recipient) {
            const outputIndex = recipient.outputIndex;
            const info = travelInfoMap[outputIndex];
            if (info) {
                if (info.amount && info.amount !== recipient.amount) {
                    throw new Error('amount did not match for output index ' + outputIndex);
                }
                const sendParams = self.prepareParams({
                    txid: params.txid,
                    recipient: recipient,
                    travelInfo: info,
                    fromKey: fromKey,
                    noValidate: true, // don't re-validate
                });
                sendParamsList.push(sendParams);
            }
        });
        const result = {
            matched: sendParamsList.length,
            results: [],
        };
        const sendSerial = function () {
            const sendParams = sendParamsList.shift();
            if (!sendParams) {
                return result;
            }
            return self.send(sendParams)
                .then(function (res) {
                result.results.push({ result: res });
                return sendSerial();
            })
                .catch(function (err) {
                result.results.push({ error: err.toString() });
                return sendSerial();
            });
        };
        return sendSerial();
    });
};
module.exports = TravelRule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhdmVsUnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmF2ZWxSdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFFSDtHQUNHO0FBQ0gsRUFBRTtBQUNGLG9CQUFvQjtBQUNwQiwyQ0FBMkM7QUFDM0MsRUFBRTtBQUNGLG9EQUFvRDtBQUNwRCxFQUFFO0FBRUYsK0JBQStCO0FBQy9CLDJDQUEyQztBQUMzQyxxQ0FBcUM7QUFDckMsNEJBQTRCO0FBRTVCLDhDQUF5QztBQUN6Qyx1Q0FBc0Q7QUFDdEQsNENBQW9EO0FBQ3BELGlDQUF5QztBQXlCekMsRUFBRTtBQUNGLGNBQWM7QUFDZCxFQUFFO0FBQ0YsTUFBTSxVQUFVLEdBQUcsVUFBVSxLQUFLO0lBQ2hDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLENBQUMsQ0FBQztBQUVGLFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFVBQVUsS0FBSztJQUN4QyxLQUFLLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztJQUNwQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUM1QyxDQUFDLENBQUM7QUFHRjs7Ozs7O0lBTUk7QUFDSixVQUFVLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxVQUFVLE1BQU0sRUFBRSxRQUFRO0lBQzdELE1BQU0sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO0lBQ3RCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ3pDLGlCQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUV0RCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcs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QztZQUMxQyxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNmLE9BQU8sTUFBTSxDQUFDO2FBQ2Y7WUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO2lCQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHO2dCQUNqQixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUNyQyxPQUFPLFVBQVUsRUFBRSxDQUFDO1lBQ3RCLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsVUFBVSxHQUFHO2dCQUNsQixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUMvQyxPQUFPLFVBQVUsRUFBRSxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDO1FBRUYsT0FBTyxVQUFVLEVBQUUsQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaGlkZGVuXG4gKi9cblxuLyoqXG4gKi9cbi8vXG4vLyBUcmF2ZWxSdWxlIE9iamVjdFxuLy8gQml0R28gYWNjZXNzb3IgZm9yIGEgc3BlY2lmaWMgZW50ZXJwcmlzZVxuLy9cbi8vIENvcHlyaWdodCAyMDE0LCBCaXRHbywgSW5jLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG5cbmltcG9ydCAqIGFzIGJpcDMyIGZyb20gJ2JpcDMyJztcbmltcG9ydCAqIGFzIHV0eG9saWIgZnJvbSAnQGJpdGdvL3V0eG8tbGliJztcbmltcG9ydCAqIGFzIEJsdWViaXJkIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgY29tbW9uIH0gZnJvbSAnQGJpdGdvL3Nkay1jb3JlJztcbmltcG9ydCB7IGdldE5ldHdvcmssIG1ha2VSYW5kb21LZXkgfSBmcm9tICcuL2JpdGNvaW4nO1xuaW1wb3J0IHsgc2FuaXRpemVMZWdhY3lQYXRoIH0gZnJvbSAnQGJpdGdvL3Nkay1hcGknO1xuaW1wb3J0IHsgZ2V0U2hhcmVkU2VjcmV0IH0gZnJvbSAnLi9lY2RoJztcblxuaW50ZXJmYWNlIERlY3J5cHRSZWNlaXZlZFRyYXZlbFJ1bGVPcHRpb25zIHtcbiAgdHg/OiB7XG4gICAgcmVjZWl2ZWRUcmF2ZWxJbmZvPzoge1xuICAgICAgdG9QdWJLZXlQYXRoOiBzdHJpbmc7XG4gICAgICBmcm9tUHViS2V5OiBzdHJpbmc7XG4gICAgICBlbmNyeXB0ZWRUcmF2ZWxJbmZvOiBzdHJpbmc7XG4gICAgICB0cmF2ZWxJbmZvOiBzdHJpbmc7XG4gICAgICB0cmFuc2FjdGlvbklkOiBzdHJpbmc7XG4gICAgICBvdXRwdXRJbmRleDogbnVtYmVyO1xuICAgIH1bXTtcbiAgfTtcbiAga2V5Y2hhaW4/OiB7XG4gICAgeHBydj86IHN0cmluZztcbiAgfTtcbiAgaGRub2RlPzogYmlwMzIuQklQMzJJbnRlcmZhY2U7XG59XG5cbmludGVyZmFjZSBSZWNpcGllbnQge1xuICBlbnRlcnByaXNlOiBzdHJpbmc7XG4gIHB1YktleTogc3RyaW5nO1xuICBvdXRwdXRJbmRleDogc3RyaW5nO1xufVxuXG4vL1xuLy8gQ29uc3RydWN0b3Jcbi8vXG5jb25zdCBUcmF2ZWxSdWxlID0gZnVuY3Rpb24gKGJpdGdvKSB7XG4gIHRoaXMuYml0Z28gPSBiaXRnbztcbn07XG5cblRyYXZlbFJ1bGUucHJvdG90eXBlLnVybCA9IGZ1bmN0aW9uIChleHRyYSkge1xuICBleHRyYSA9IGV4dHJhIHx8ICcnO1xuICByZXR1cm4gdGhpcy5iaXRnby51cmwoJy90cmF2ZWwvJyArIGV4dHJhKTtcbn07XG5cblxuLyoqXG4gICogR2V0IGF2YWlsYWJsZSB0cmF2ZWwtcnVsZSBpbmZvIHJlY2lwaWVudHMgZm9yIGEgdHJhbnNhY3Rpb25cbiAgKiBAcGFyYW0gcGFyYW1zXG4gICogIHR4aWQ6IHRyYW5zYWN0aW9uIGlkXG4gICogQHBhcmFtIGNhbGxiYWNrXG4gICogQHJldHVybnMgeyp9XG4gICovXG5UcmF2ZWxSdWxlLnByb3RvdHlwZS5nZXRSZWNpcGllbnRzID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuICBwYXJhbXMudHhpZCA9IHBhcmFtcy50eGlkIHx8IHBhcmFtcy5oYXNoO1xuICBjb21tb24udmFsaWRhdGVQYXJhbXMocGFyYW1zLCBbJ3R4aWQnXSwgW10sIGNhbGxiYWNrKTtcblxuICBjb25zdCB1cmwgPSB0aGlzLnVybChwYXJhbXMudHhpZCArICcvcmVjaXBpZW50cycpO1xuICByZXR1cm4gQmx1ZWJpcmQucmVzb2x2ZShcbiAgICB0aGlzLmJpdGdvLmdldCh1cmwpLnJlc3VsdCgncmVjaXBpZW50cycpXG4gICkubm9kZWlmeShjYWxsYmFjayk7XG59O1xuXG5UcmF2ZWxSdWxlLnByb3RvdHlwZS52YWxpZGF0ZVRyYXZlbEluZm8gPSBmdW5jdGlvbiAoaW5mbykge1xuICBjb25zdCBmaWVsZHMgPSB7XG4gICAgYW1vdW50OiB7IHR5cGU6ICdudW1iZXInIH0sXG4gICAgdG9BZGRyZXNzOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgdG9FbnRlcnByaXNlOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgZnJvbVVzZXJOYW1lOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgZnJvbVVzZXJBY2NvdW50OiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgZnJvbVVzZXJBZGRyZXNzOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgdG9Vc2VyTmFtZTogeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgIHRvVXNlckFjY291bnQ6IHsgdHlwZTogJ3N0cmluZycgfSxcbiAgICB0b1VzZXJBZGRyZXNzOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgZXh0cmE6IHsgdHlwZTogJ29iamVjdCcgfSxcbiAgfTtcblxuICBfLmZvckVhY2goZmllbGRzLCBmdW5jdGlvbiAoZmllbGQ6IGFueSwgZmllbGROYW1lKSB7XG4gICAgLy8gTm8gcmVxdWlyZWQgZmllbGRzIHlldCAtLSBzaG91bGQgdGhlcmUgYmU/XG4gICAgaWYgKGZpZWxkLnJlcXVpcmVkKSB7XG4gICAgICBpZiAoaW5mb1tmaWVsZE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIHJlcXVpcmVkIGZpZWxkICcgKyBmaWVsZE5hbWUgKyAnIGluIHRyYXZlbCBpbmZvJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbmZvW2ZpZWxkTmFtZV0gJiYgdHlwZW9mKGluZm9bZmllbGROYW1lXSkgIT09IGZpZWxkLnR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW5jb3JyZWN0IHR5cGUgZm9yIGZpZWxkICcgKyBmaWVsZE5hbWUgKyAnIGluIHRyYXZlbCBpbmZvLCBleHBlY3RlZCAnICsgZmllbGQudHlwZSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBTdHJpcCBvdXQgYW55IG90aGVyIGZpZWxkcyB3ZSBkb24ndCBrbm93IGFib3V0XG4gIGNvbnN0IHJlc3VsdCA9IF8ucGljayhpbmZvLCBfLmtleXMoZmllbGRzKSk7XG4gIGlmIChfLmlzRW1wdHkocmVzdWx0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZW1wdHkgdHJhdmVsIGRhdGEnKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBUYWtlcyBhIHRyYW5zYWN0aW9uIG9iamVjdCBhcyByZXR1cm5lZCBieSBnZXRUcmFuc2FjdGlvbiBvciBsaXN0VHJhbnNhY3Rpb25zLCBhbG9uZ1xuICogd2l0aCBhIGtleWNoYWluIChvciBoZG5vZGUgb2JqZWN0KSwgYW5kIGF0dGVtcHRzIHRvIGRlY3J5cHQgYW55IGVuY3J5cHRlZCB0cmF2ZWxcbiAqIGluZm8gaW5jbHVkZWQgaW4gdGhlIHRyYW5zYWN0aW9uJ3MgcmVjZWl2ZWRUcmF2ZWxJbmZvIGZpZWxkLlxuICogUGFyYW1ldGVyczpcbiAqICAgdHg6IGEgdHJhbnNhY3Rpb24gb2JqZWN0XG4gKiAgIGtleWNoYWluOiBrZXljaGFpbiBvYmplY3QgKHdpdGggeHBydilcbiAqIFJldHVybnM6XG4gKiAgIHRoZSB0eCBvYmplY3QsIGF1Z21lbnRlZCB3aXRoIGRlY3J5cHRlZCB0cmF2ZWxJbmZvIGZpZWxkc1xuICovXG5UcmF2ZWxSdWxlLnByb3RvdHlwZS5kZWNyeXB0UmVjZWl2ZWRUcmF2ZWxJbmZvID0gZnVuY3Rpb24gKHBhcmFtczogRGVjcnlwdFJlY2VpdmVkVHJhdmVsUnVsZU9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB0eCA9IHBhcmFtcy50eDtcbiAgaWYgKCFfLmlzT2JqZWN0KHR4KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZXhwZWN0aW5nIHR4IHBhcmFtIHRvIGJlIG9iamVjdCcpO1xuICB9XG5cbiAgaWYgKCF0eC5yZWNlaXZlZFRyYXZlbEluZm8gfHwgIXR4LnJlY2VpdmVkVHJhdmVsSW5mby5sZW5ndGgpIHtcbiAgICByZXR1cm4gdHg7XG4gIH1cblxuICBjb25zdCBrZXljaGFpbiA9IHBhcmFtcy5rZXljaGFpbjtcbiAgaWYgKCFfLmlzT2JqZWN0KGtleWNoYWluKSB8fCAhXy5pc1N0cmluZyhrZXljaGFpbi54cHJ2KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZXhwZWN0aW5nIGtleWNoYWluIHBhcmFtIHdpdGggeHBydicpO1xuICB9XG4gIGNvbnN0IGhkTm9kZSA9IGJpcDMyLmZyb21CYXNlNTgoa2V5Y2hhaW4ueHBydik7XG5cbiAgdHgucmVjZWl2ZWRUcmF2ZWxJbmZvLmZvckVhY2goKGluZm8pID0+IHtcbiAgICBjb25zdCBrZXkgPSBoZE5vZGUuZGVyaXZlUGF0aChzYW5pdGl6ZUxlZ2FjeVBhdGgoaW5mby50b1B1YktleVBhdGgpKTtcbiAgICBjb25zdCBzZWNyZXQgPSBnZXRTaGFyZWRTZWNyZXQoa2V5LCBCdWZmZXIuZnJvbShpbmZvLmZyb21QdWJLZXksICdoZXgnKSkudG9TdHJpbmcoJ2hleCcpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkZWNyeXB0ZWQgPSB0aGlzLmJpdGdvLmRlY3J5cHQoe1xuICAgICAgICBpbnB1dDogaW5mby5lbmNyeXB0ZWRUcmF2ZWxJbmZvLFxuICAgICAgICBwYXNzd29yZDogc2VjcmV0LFxuICAgICAgfSk7XG4gICAgICBpbmZvLnRyYXZlbEluZm8gPSBKU09OLnBhcnNlKGRlY3J5cHRlZCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdmYWlsZWQgdG8gZGVjcnlwdCBvciBwYXJzZSB0cmF2ZWwgaW5mbyBmb3IgJywgaW5mby50cmFuc2FjdGlvbklkICsgJzonICsgaW5mby5vdXRwdXRJbmRleCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdHg7XG59O1xuXG5UcmF2ZWxSdWxlLnByb3RvdHlwZS5wcmVwYXJlUGFyYW1zID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gIHBhcmFtcy50eGlkID0gcGFyYW1zLnR4aWQgfHwgcGFyYW1zLmhhc2g7XG4gIGNvbW1vbi52YWxpZGF0ZVBhcmFtcyhwYXJhbXMsIFsndHhpZCddLCBbJ2Zyb21Qcml2YXRlSW5mbyddKTtcbiAgY29uc3QgdHhpZCA9IHBhcmFtcy50eGlkO1xuICBjb25zdCByZWNpcGllbnQ6IFJlY2lwaWVudCB8IHVuZGVmaW5lZCA9IHBhcmFtcy5yZWNpcGllbnQ7XG4gIGxldCB0cmF2ZWxJbmZvID0gcGFyYW1zLnRyYXZlbEluZm87XG4gIGlmICghcmVjaXBpZW50IHx8ICFfLmlzT2JqZWN0KHJlY2lwaWVudCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgb3IgbWlzc2luZyByZWNpcGllbnQnKTtcbiAgfVxuICBpZiAoIXRyYXZlbEluZm8gfHwgIV8uaXNPYmplY3QodHJhdmVsSW5mbykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgb3IgbWlzc2luZyB0cmF2ZWxJbmZvJyk7XG4gIH1cbiAgaWYgKCFwYXJhbXMubm9WYWxpZGF0ZSkge1xuICAgIHRyYXZlbEluZm8gPSB0aGlzLnZhbGlkYXRlVHJhdmVsSW5mbyh0cmF2ZWxJbmZvKTtcbiAgfVxuXG4gIC8vIEZpbGwgaW4gdG9FbnRlcnByaXNlIGlmIG5vdCBhbHJlYWR5IGZpbGxlZFxuICBpZiAoIXRyYXZlbEluZm8udG9FbnRlcnByaXNlICYmIHJlY2lwaWVudC5lbnRlcnByaXNlKSB7XG4gICAgdHJhdmVsSW5mby50b0VudGVycHJpc2UgPSByZWNpcGllbnQuZW50ZXJwcmlzZTtcbiAgfVxuXG4gIC8vIElmIGEga2V5IHdhcyBub3QgcHJvdmlkZWQsIGNyZWF0ZSBhIG5ldyByYW5kb20ga2V5XG4gIGxldCBmcm9tS2V5ID0gcGFyYW1zLmZyb21LZXkgJiYgdXR4b2xpYi5FQ1BhaXIuZnJvbVdJRihwYXJhbXMuZnJvbUtleSwgZ2V0TmV0d29yaygpIGFzIHV0eG9saWIuQml0Y29pbkpTTmV0d29yayk7XG4gIGlmICghZnJvbUtleSkge1xuICAgIGZyb21LZXkgPSBtYWtlUmFuZG9tS2V5KCk7XG4gIH1cblxuICAvLyBDb21wdXRlIHRoZSBzaGFyZWQga2V5IGZvciBlbmNyeXB0aW9uXG4gIGNvbnN0IHNoYXJlZFNlY3JldCA9IGdldFNoYXJlZFNlY3JldChmcm9tS2V5LCBCdWZmZXIuZnJvbShyZWNpcGllbnQucHViS2V5LCAnaGV4JykpLnRvU3RyaW5nKCdoZXgnKTtcblxuICAvLyBKU09OLWlmeSBhbmQgZW5jcnlwdCB0aGUgcGF5bG9hZFxuICBjb25zdCB0cmF2ZWxJbmZvSlNPTiA9IEpTT04uc3RyaW5naWZ5KHRyYXZlbEluZm8pO1xuICBjb25zdCBlbmNyeXB0ZWRUcmF2ZWxJbmZvID0gdGhpcy5iaXRnby5lbmNyeXB0KHtcbiAgICBpbnB1dDogdHJhdmVsSW5mb0pTT04sXG4gICAgcGFzc3dvcmQ6IHNoYXJlZFNlY3JldCxcbiAgfSk7XG5cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR4aWQ6IHR4aWQsXG4gICAgb3V0cHV0SW5kZXg6IHJlY2lwaWVudC5vdXRwdXRJbmRleCxcbiAgICB0b1B1YktleTogcmVjaXBpZW50LnB1YktleSxcbiAgICBmcm9tUHViS2V5OiBmcm9tS2V5LnB1YmxpY0tleS50b1N0cmluZygnaGV4JyksXG4gICAgZW5jcnlwdGVkVHJhdmVsSW5mbzogZW5jcnlwdGVkVHJhdmVsSW5mbyxcbiAgICBmcm9tUHJpdmF0ZUluZm86IHVuZGVmaW5lZCxcbiAgfTtcblxuICBpZiAocGFyYW1zLmZyb21Qcml2YXRlSW5mbykge1xuICAgIHJlc3VsdC5mcm9tUHJpdmF0ZUluZm8gPSBwYXJhbXMuZnJvbVByaXZhdGVJbmZvO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogU2VuZCB0cmF2ZWwgZGF0YSB0byB0aGUgc2VydmVyIGZvciBhIHRyYW5zYWN0aW9uXG4gKi9cblRyYXZlbFJ1bGUucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xuICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gIHBhcmFtcy50eGlkID0gcGFyYW1zLnR4aWQgfHwgcGFyYW1zLmhhc2g7XG4gIGNvbW1vbi52YWxpZGF0ZVBhcmFtcyhwYXJhbXMsIFsndHhpZCcsICd0b1B1YktleScsICdlbmNyeXB0ZWRUcmF2ZWxJbmZvJ10sIFsnZnJvbVB1YktleScsICdmcm9tUHJpdmF0ZUluZm8nXSwgY2FsbGJhY2spO1xuXG4gIGlmICghXy5pc051bWJlcihwYXJhbXMub3V0cHV0SW5kZXgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIG91dHB1dEluZGV4Jyk7XG4gIH1cblxuICByZXR1cm4gQmx1ZWJpcmQucmVzb2x2ZShcbiAgICB0aGlzLmJpdGdvLnBvc3QodGhpcy51cmwocGFyYW1zLnR4aWQgKyAnLycgKyBwYXJhbXMub3V0cHV0SW5kZXgpKS5zZW5kKHBhcmFtcykucmVzdWx0KClcbiAgKS5ub2RlaWZ5KGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogU2VuZCBtdWx0aXBsZSB0cmF2ZWwgcnVsZSBpbmZvcyBmb3IgdGhlIG91dHB1dHMgb2YgYSBzaW5nbGUgdHJhbnNhY3Rpb24uXG4gKiBQYXJhbWV0ZXJzOlxuICogICAtIHR4aWQgKG9yIGhhc2gpOiB0eGlkIG9mIHRoZSB0cmFuc2FjdGlvbiAobXVzdCBiZSBhIHNlbmRlciBvZiB0aGUgdHgpXG4gKiAgIC0gdHJhdmVsSW5mb3M6IGFycmF5IG9mIHRyYXZlbEluZm8gb2JqZWN0cyB3aGljaCBsb29rIGxpa2UgdGhlIGZvbGxvd2luZzpcbiAqICAgICB7XG4gKiAgICAgICBvdXRwdXRJbmRleDogbnVtYmVyLCAgICAgLy8gdHggb3V0cHV0IGluZGV4XG4gKiAgICAgICBmcm9tVXNlck5hbWU6IHN0cmluZywgICAgLy8gbmFtZSBvZiB0aGUgc2VuZGluZyB1c2VyXG4gKiAgICAgICBmcm9tVXNlckFjY291bnQ6IHN0cmluZywgLy8gYWNjb3VudCBpZCBvZiB0aGUgc2VuZGluZyB1c2VyXG4gKiAgICAgICBmcm9tVXNlckFkZHJlc3M6IHN0cmluZywgLy8gbWFpbGluZyBhZGRyZXNzIG9mIHRoZSBzZW5kaW5nIHVzZXJcbiAqICAgICAgIHRvVXNlck5hbWU6IHN0cmluZywgICAgICAvLyBuYW1lIG9mIHRoZSByZWNlaXZpbmcgdXNlclxuICogICAgICAgdG9Vc2VyQWNjb3VudDogc3RyaW5nLCAgIC8vIGFjY291bnQgaWQgb2YgdGhlIHJlY2VpdmluZyB1c2VyXG4gKiAgICAgICB0b1VzZXJBZGRyZXNzOiBzdHJpbmcgICAgLy8gbWFpbGluZyBhZGRyZXNzIG9mIHRoZSByZWNlaXZpbmcgdXNlclxuICogICAgIH1cbiAqICAgICBBbGwgZmllbGRzIGFzaWRlIGZyb20gb3V0cHV0SW5kZXggYXJlIG9wdGlvbmFsLCBidXQgYXQgbGVhc3Qgb25lIG11c3RcbiAqICAgICBiZSBkZWZpbmVkLlxuICpcbiAqICBJdCBpcyBub3QgbmVjZXNzYXJ5IHRvIHByb3ZpZGUgdHJhdmVsSW5mbyBmb3IgYWxsIG91dHB1dCBpbmRpY2VzLlxuICogIEVuZC10by1lbmQgZW5jcnlwdGlvbiBvZiB0aGUgdHJhdmVsIGluZm8gaXMgaGFuZGxlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoaXMgbWV0aG9kLlxuICpcbiAqL1xuVHJhdmVsUnVsZS5wcm90b3R5cGUuc2VuZE1hbnkgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xuICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gIHBhcmFtcy50eGlkID0gcGFyYW1zLnR4aWQgfHwgcGFyYW1zLmhhc2g7XG4gIGNvbW1vbi52YWxpZGF0ZVBhcmFtcyhwYXJhbXMsIFsndHhpZCddLCBjYWxsYmFjayk7XG5cbiAgY29uc3QgdHJhdmVsSW5mb3MgPSBwYXJhbXMudHJhdmVsSW5mb3M7XG4gIGlmICghXy5pc0FycmF5KHRyYXZlbEluZm9zKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZXhwZWN0ZWQgcGFyYW1ldGVyIHRyYXZlbEluZm9zIHRvIGJlIGFycmF5Jyk7XG4gIH1cblxuICBjb25zdCBzZWxmID0gdGhpcztcbiAgY29uc3QgdHJhdmVsSW5mb01hcCA9IF8odHJhdmVsSW5mb3MpXG4gICAgLmtleUJ5KCdvdXRwdXRJbmRleCcpXG4gICAgLm1hcFZhbHVlcyhmdW5jdGlvbiAodHJhdmVsSW5mbykge1xuICAgICAgcmV0dXJuIHNlbGYudmFsaWRhdGVUcmF2ZWxJbmZvKHRyYXZlbEluZm8pO1xuICAgIH0pXG4gICAgLnZhbHVlKCk7XG5cbiAgcmV0dXJuIHNlbGYuZ2V0UmVjaXBpZW50cyh7IHR4aWQ6IHBhcmFtcy50eGlkIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlY2lwaWVudHMpIHtcblxuICAgICAgLy8gQnVpbGQgdXAgZGF0YSB0byBwb3N0XG4gICAgICBjb25zdCBzZW5kUGFyYW1zTGlzdDogYW55W10gPSBbXTtcbiAgICAgIC8vIGRvbid0IHJlZ2VuZXJhdGUgYSBuZXcgcmFuZG9tIGtleSBmb3IgZWFjaCByZWNpcGllbnRcbiAgICAgIGNvbnN0IGZyb21LZXkgPSBwYXJhbXMuZnJvbUtleSB8fCBtYWtlUmFuZG9tS2V5KCkudG9XSUYoKTtcblxuICAgICAgcmVjaXBpZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNpcGllbnQpIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0SW5kZXggPSByZWNpcGllbnQub3V0cHV0SW5kZXg7XG4gICAgICAgIGNvbnN0IGluZm8gPSB0cmF2ZWxJbmZvTWFwW291dHB1dEluZGV4XTtcbiAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICBpZiAoaW5mby5hbW91bnQgJiYgaW5mby5hbW91bnQgIT09IHJlY2lwaWVudC5hbW91bnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYW1vdW50IGRpZCBub3QgbWF0Y2ggZm9yIG91dHB1dCBpbmRleCAnICsgb3V0cHV0SW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBzZW5kUGFyYW1zID0gc2VsZi5wcmVwYXJlUGFyYW1zKHtcbiAgICAgICAgICAgIHR4aWQ6IHBhcmFtcy50eGlkLFxuICAgICAgICAgICAgcmVjaXBpZW50OiByZWNpcGllbnQsXG4gICAgICAgICAgICB0cmF2ZWxJbmZvOiBpbmZvLFxuICAgICAgICAgICAgZnJvbUtleTogZnJvbUtleSxcbiAgICAgICAgICAgIG5vVmFsaWRhdGU6IHRydWUsIC8vIGRvbid0IHJlLXZhbGlkYXRlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2VuZFBhcmFtc0xpc3QucHVzaChzZW5kUGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdDoge1xuICAgICAgbWF0Y2hlZDogbnVtYmVyO1xuICAgICAgcmVzdWx0czoge1xuICAgICAgICByZXN1bHQ/OiBhbnk7XG4gICAgICAgIGVycm9yPzogc3RyaW5nO1xuICAgICAgfVtdO1xuICAgIH0gPSB7XG4gICAgICBtYXRjaGVkOiBzZW5kUGFyYW1zTGlzdC5sZW5ndGgsXG4gICAgICByZXN1bHRzOiBbXSxcbiAgICB9O1xuXG4gICAgICBjb25zdCBzZW5kU2VyaWFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBzZW5kUGFyYW1zID0gc2VuZFBhcmFtc0xpc3Quc2hpZnQoKTtcbiAgICAgICAgaWYgKCFzZW5kUGFyYW1zKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZi5zZW5kKHNlbmRQYXJhbXMpXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgcmVzdWx0LnJlc3VsdHMucHVzaCh7IHJlc3VsdDogcmVzIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHNlbmRTZXJpYWwoKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICByZXN1bHQucmVzdWx0cy5wdXNoKHsgZXJyb3I6IGVyci50b1N0cmluZygpIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHNlbmRTZXJpYWwoKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBzZW5kU2VyaWFsKCk7XG4gICAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYXZlbFJ1bGU7XG4iXX0=