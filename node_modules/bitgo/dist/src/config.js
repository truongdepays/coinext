"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultConstants = exports.krsProviders = exports.supportedCrossChainRecoveries = exports.defaults = exports.testnetTokens = exports.mainnetTokens = exports.tokens = exports.ethGasConfigs = void 0;
const _ = require("lodash");
const statics_1 = require("@bitgo/statics");
const sdk_core_1 = require("@bitgo/sdk-core");
// Get the list of ERC-20 tokens from statics and format it properly
const formattedErc20Tokens = statics_1.coins.reduce((acc, coin) => {
    if (coin instanceof statics_1.Erc20Coin) {
        let baseCoin;
        switch (coin.network) {
            case statics_1.Networks.main.ethereum:
                baseCoin = 'eth';
                break;
            case statics_1.Networks.test.kovan:
                baseCoin = 'teth';
                break;
            case statics_1.Networks.test.goerli:
                baseCoin = 'gteth';
                break;
            default:
                throw new Error(`Erc20 token ${coin.name} has an unsupported network`);
        }
        acc.push({
            type: coin.name,
            coin: baseCoin,
            network: coin.network.type === statics_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractAddress.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
exports.ethGasConfigs = {
    minimumGasPrice: 1000000000,
    defaultGasPrice: 20000000000,
    maximumGasPrice: 2500000000000,
    defaultGasLimit: 500000,
    defaultGasLimitTokenSend: 1000000,
    minimumGasLimit: 30000,
    maximumGasLimit: 20000000, // Customers cannot set gas limits beyond this amount
};
// Get the list of Stellar tokens from statics and format it properly
const formattedStellarTokens = statics_1.coins.reduce((acc, coin) => {
    if (coin instanceof statics_1.StellarCoin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === statics_1.NetworkType.MAINNET ? 'xlm' : 'txlm',
            network: coin.network.type === statics_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
// Get the list of Stellar tokens from statics and format it properly
const formattedAlgoTokens = statics_1.coins.reduce((acc, coin) => {
    if (coin instanceof statics_1.AlgoCoin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === statics_1.NetworkType.MAINNET ? 'algo' : 'talgo',
            alias: coin.alias,
            network: coin.network.type === statics_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
// Get the list of OFC tokens from statics and format it properly
const formattedOfcCoins = statics_1.coins.reduce((acc, coin) => {
    if (coin instanceof statics_1.OfcCoin) {
        acc.push({
            type: coin.name,
            coin: 'ofc',
            backingCoin: coin.asset,
            name: coin.fullName,
            decimalPlaces: coin.decimalPlaces,
            isFiat: coin.kind === statics_1.CoinKind.FIAT,
        });
    }
    return acc;
}, []);
const formattedCeloTokens = statics_1.coins.reduce((acc, coin) => {
    if (coin instanceof statics_1.CeloCoin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === statics_1.NetworkType.MAINNET ? 'celo' : 'tcelo',
            network: coin.network.type === statics_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractAddress.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedEosTokens = statics_1.coins.reduce((acc, coin) => {
    if (coin instanceof statics_1.EosCoin) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === statics_1.NetworkType.MAINNET ? 'eos' : 'teos',
            network: coin.network.type === statics_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractName.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedFiatTokens = statics_1.coins.reduce((acc, coin) => {
    if (coin instanceof statics_1.FiatToken) {
        acc.push({
            name: coin.fullName,
            type: coin.name,
            coin: coin.network.type === statics_1.NetworkType.MAINNET ? 'fiat' : 'tfiat',
            network: coin.network.type === statics_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
const formattedAvaxCTokens = statics_1.coins.reduce((acc, coin) => {
    if (coin instanceof statics_1.AvaxERC20Token) {
        acc.push({
            type: coin.name,
            coin: coin.network.type === statics_1.NetworkType.MAINNET ? 'avaxc' : 'tavaxc',
            network: coin.network.type === statics_1.NetworkType.MAINNET ? 'Mainnet' : 'Testnet',
            name: coin.fullName,
            tokenContractAddress: coin.contractAddress.toString().toLowerCase(),
            decimalPlaces: coin.decimalPlaces,
        });
    }
    return acc;
}, []);
exports.tokens = {
    // network name for production environments
    bitcoin: {
        eth: {
            tokens: formattedErc20Tokens.filter(token => token.network === 'Mainnet'),
        },
        xlm: {
            tokens: formattedStellarTokens.filter(token => token.network === 'Mainnet'),
        },
        algo: {
            tokens: formattedAlgoTokens.filter(token => token.network === 'Mainnet'),
        },
        ofc: {
            tokens: formattedOfcCoins.filter(token => statics_1.coins.get(token.type).network.type === statics_1.NetworkType.MAINNET),
        },
        celo: {
            tokens: formattedCeloTokens.filter(token => token.network === 'Mainnet'),
        },
        eos: {
            tokens: formattedEosTokens.filter(token => token.network === 'Mainnet'),
        },
        avaxc: {
            tokens: formattedAvaxCTokens.filter(token => token.network === 'Mainnet'),
        },
        fiat: {
            tokens: formattedFiatTokens.filter(token => token.network === 'Mainnet'),
        },
    },
    // network name for test environments
    testnet: {
        eth: {
            tokens: formattedErc20Tokens.filter(token => token.network === 'Testnet'),
        },
        xlm: {
            tokens: formattedStellarTokens.filter(token => token.network === 'Testnet'),
        },
        algo: {
            tokens: formattedAlgoTokens.filter(token => token.network === 'Testnet'),
        },
        ofc: {
            tokens: formattedOfcCoins.filter(token => statics_1.coins.get(token.type).network.type === statics_1.NetworkType.TESTNET),
        },
        celo: {
            tokens: formattedCeloTokens.filter(token => token.network === 'Testnet'),
        },
        eos: {
            tokens: formattedEosTokens.filter(token => token.network === 'Testnet'),
        },
        avaxc: {
            tokens: formattedAvaxCTokens.filter(token => token.network === 'Testnet'),
        },
        fiat: {
            tokens: formattedFiatTokens.filter(token => token.network === 'Testnet'),
        },
    },
};
/**
 * Verify mainnet or testnet tokens
 * @param tokens
 */
const verifyTokens = function (tokens) {
    const verifiedTokens = {};
    _.forEach(tokens, function (token) {
        if (verifiedTokens[token.type]) {
            throw new Error('token : ' + token.type + ' duplicated.');
        }
        verifiedTokens[token.type] = true;
        if (token.tokenContractAddress && token.tokenContractAddress !== _.toLower(token.tokenContractAddress)) {
            throw new Error('token contract: ' + token.type + ' is not all lower case: ' + token.tokenContractAddress);
        }
    });
    return verifiedTokens;
};
const mainnetErc20Tokens = verifyTokens(exports.tokens.bitcoin.eth.tokens);
const mainnetStellarTokens = verifyTokens(exports.tokens.bitcoin.xlm.tokens);
exports.mainnetTokens = _.assign({}, mainnetErc20Tokens, mainnetStellarTokens);
const testnetErc20Tokens = verifyTokens(exports.tokens.testnet.eth.tokens);
const testnetStellarTokens = verifyTokens(exports.tokens.testnet.xlm.tokens);
exports.testnetTokens = _.assign({}, testnetErc20Tokens, testnetStellarTokens);
exports.defaults = {
    maxFee: 0.1e8,
    maxFeeRate: 1000000,
    minFeeRate: 5000,
    fallbackFeeRate: 50000,
    minOutputSize: 2730,
    minInstantFeeRate: 10000,
    bitgoEthAddress: '0x0f47ea803926926f299b7f1afc8460888d850f47',
};
// Supported cross-chain recovery routes. The coin to be recovered is the index, the valid coins for recipient wallets
// are listed in the array.
exports.supportedCrossChainRecoveries = {
    btc: ['bch', 'ltc', 'bsv'],
    bch: ['btc', 'ltc', 'bsv'],
    ltc: ['btc', 'bch', 'bsv'],
    bsv: ['btc', 'ltc', 'bch'],
};
// KRS providers and their fee structures
exports.krsProviders = {
    keyternal: {
        feeType: 'flatUsd',
        feeAmount: 99,
        supportedCoins: ['btc', 'eth'],
        feeAddresses: {
            btc: '', // TODO [BG-6965] Get address from Keyternal - recovery will fail for now until Keyternal is ready
        },
    },
    bitgoKRSv2: {
        feeType: 'flatUsd',
        feeAmount: 0,
        supportedCoins: ['btc', 'eth'],
    },
    dai: {
        feeType: 'flatUsd',
        feeAmount: 0,
        supportedCoins: ['btc', 'eth', 'xlm', 'xrp', 'dash', 'zec', 'ltc', 'bch', 'bsv', 'bcha'],
    },
};
// TODO: once server starts returning eth address keychains, remove bitgoEthAddress
/**
 * Get the default (hardcoded) constants for a particular network.
 *
 * Note that this may not be the complete set of constants, and additional constants may get fetched
 * from BitGo during the lifespan of a BitGo object.
 * @param env
 */
const defaultConstants = (env) => {
    if (sdk_core_1.Environments[env] === undefined) {
        throw Error(`invalid environment ${env}`);
    }
    const network = sdk_core_1.Environments[env].network;
    return _.merge({}, exports.defaults, exports.tokens[network]);
};
exports.defaultConstants = defaultConstants;
//# sourceMappingURL=data:application/json;base64,