/**
 * @prettier
 */
import { BitGo } from '../../bitgo';
import { TradingAccount } from './tradingAccount';
export declare enum TradingPartnerStatus {
    ACCEPTED = "accepted",
    REJECTED = "rejected",
    CANCELED = "canceled",
    PENDING = "pending"
}
export declare enum TradingPartnerType {
    DIRECT = "direct",
    AGENCY = "agency"
}
export declare class TradingPartner {
    private bitgo;
    private enterpriseId;
    private currentAccount;
    id: string;
    primaryEnterpriseName: string;
    primaryAccountId: string;
    secondaryEnterpriseName: string;
    secondaryAccountId: string;
    requesterAccountId: string;
    status: TradingPartnerStatus;
    type: TradingPartnerType;
    constructor(tradingPartnerData: any, bitgo: BitGo, enterpriseId: string, currentAccount: TradingAccount);
    /**
     * Check if a trading partner has enough funds to cover the cost of a trade.
     * @param currency the currency to check
     * @param amount the amount of currency to check, represented in base units (such as cents, satoshi, or wei)
     */
    checkBalance(currency: string, amount: string): Promise<boolean>;
}
//# sourceMappingURL=tradingPartner.d.ts.map