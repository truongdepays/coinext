/**
 * User webhook handler for v2 coins and tokens
 *
 * @prettier
 */
import { BitGo } from '../bitgo';
import { BaseCoin } from './baseCoin';
export interface AddOptions {
    url: string;
    type: 'block' | 'wallet_confirmation';
    label?: string;
    numConfirmations?: number;
}
export interface RemoveOptions {
    url: string;
    type: 'block' | 'wallet_confirmation';
}
export interface ListNotificationsOptions {
    prevId?: string;
    limit?: number;
}
export interface SimulateOptions {
    webhookId: string;
    blockId: string;
}
export declare class Webhooks {
    private bitgo;
    private baseCoin;
    constructor(bitgo: BitGo, baseCoin: BaseCoin);
    /**
     * Fetch list of user webhooks
     *
     * @returns {*}
     */
    list(): Promise<any>;
    /**
     * Add new user webhook
     *
     * @param params
     * @returns {*}
     */
    add({ url, type, label, numConfirmations }: AddOptions): Promise<any>;
    /**
     * Remove user webhook
     *
     * @param params
     * @returns {*}
     */
    remove(params: RemoveOptions): Promise<any>;
    /**
     * Fetch list of webhook notifications for the user
     *
     * @param params
     * @returns {*}
     */
    listNotifications(params?: ListNotificationsOptions): Promise<any>;
    /**
     * Simulate a user webhook
     *
     * @param params
     * @returns {*}
     */
    simulate(params: SimulateOptions): Promise<any>;
}
//# sourceMappingURL=webhooks.d.ts.map