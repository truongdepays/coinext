/**
 * @prettier
 */
import { SerializedKeyPair } from 'openpgp';
import { BitGo } from '../../bitgo';
import { BaseCoin, KeychainsTriplet } from '../baseCoin';
import { Keychain } from '../keychains';
export interface MpcKeyShare {
    publicShare: string;
    privateShare: string;
}
export declare abstract class MpcUtils {
    protected bitgo: BitGo;
    protected baseCoin: BaseCoin;
    constructor(bitgo: BitGo, baseCoin: BaseCoin);
    protected decryptPrivateShare(privateShare: string, userGpgKey: SerializedKeyPair<string>): Promise<string>;
    protected createBitgoKeychainInWP(userGpgKey: SerializedKeyPair<string>, userKeyShare: MpcKeyShare, backupKeyShare: MpcKeyShare, keyType: string, enterprise?: string): Promise<Keychain>;
    /**
     * Creates User, Backup, and BitGo MPC Keychains.
     *
     * @param params.passphrase - passphrase used to encrypt signing materials created for User and Backup
     * @param params.enterprise - optional enterprise id that will be attached to the BitGo Keychain
     * @param params.originalPasscodeEncryptionCode - optional encryption code used to reset the user's password, if absent, password recovery will not work
     */
    abstract createKeychains(params: {
        passphrase: string;
        enterprise?: string;
        originalPasscodeEncryptionCode?: string;
    }): Promise<KeychainsTriplet>;
}
//# sourceMappingURL=mpcUtils.d.ts.map