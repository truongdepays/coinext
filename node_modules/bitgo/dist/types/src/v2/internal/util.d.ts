/**
 * @prettier
 * @hidden
 */
import { IRequestTracer } from '@bitgo/sdk-api';
/**
 * Create a request tracer for tracing workflows which involve multiple round trips to the server
 */
export declare class RequestTracer implements IRequestTracer {
    private _seq;
    private readonly _seed;
    constructor();
    inc(): void;
    toString(): string;
}
export declare class Util {
    private constructor();
    /**
     * @deprecated
     */
    static isEthAvailable(): boolean;
    /**
     * Convert a big.js big number to an array of unsigned bytes
     * @param bn
     * @deprecated
     */
    static bnToByteArrayUnsigned(bn: any): any;
    /**
     * Utility method for handling arguments of pageable queries
     * @param params
     * @deprecated
     */
    static preparePageableQuery(params?: {
        limit?: number;
        skip?: number;
    }): {
        limit?: number;
        skip?: number;
    };
    /**
     * Create a request identifier for tracing multi-request workflows
     */
    static createRequestId(): RequestTracer;
    /**
     * Convert a BTC xpub to an Ethereum address (with 0x prefix)
     * @param xpub
     * @deprecated
     */
    static xpubToEthAddress(xpub: string): string;
    /**
     * Convert a BTC xpriv to an Ethereum private key (without 0x prefix)
     * @param xprv
     * @deprecated
     */
    static xprvToEthPrivateKey(xprv: string): string;
    /**
     * Sign a message using Ethereum's ECsign method and return the signature string
     * @param msgHash
     * @param privKey
     * @deprecated
     */
    static ethSignMsgHash(msgHash: string, privKey: string): string;
    /**
     * Convert from wei string (or BN) to Ether (multiply by 1e18)
     * @param wei
     * @deprecated
     */
    static weiToEtherString(wei: any): string;
    /**
     * Recover an ethereum address from a signature and message hash
     * @param msgHash
     * @param signature
     * @deprecated
     */
    static ecRecoverEthAddress(msgHash: string, signature: string): string;
}
//# sourceMappingURL=util.d.ts.map