/**
 * @prettier
 */
/// <reference types="node" />
import { BaseCoin as StaticsBaseCoin, CoinFamily } from '@bitgo/statics';
import { BaseCoin, KeyPair, ParsedTransaction as BaseParsedTransaction, ParseTransactionOptions as BaseParseTransactionOptions, SignedTransaction, TransactionExplanation, TransactionRecipient, VerifyAddressOptions, VerifyTransactionOptions, SignTransactionOptions, TransactionPrebuild as BaseTransactionPrebuild, PresignTransactionOptions } from '../baseCoin';
import { BitGo } from '../../bitgo';
import { Memo } from '../wallet';
export interface TransactionFee {
    fee: string;
}
export declare type SolTransactionExplanation = TransactionExplanation;
export interface ExplainTransactionOptions {
    txBase64: string;
    feeInfo: TransactionFee;
    tokenAccountRentExemptAmount?: string;
}
export interface TxInfo {
    recipients: TransactionRecipient[];
    from: string;
    txid: string;
}
export interface SolSignTransactionOptions extends SignTransactionOptions {
    txPrebuild: TransactionPrebuild;
    prv: string | string[];
    pubKeys?: string[];
}
export interface TransactionPrebuild extends BaseTransactionPrebuild {
    txBase64: string;
    txInfo: TxInfo;
    source: string;
}
export interface SolVerifyTransactionOptions extends VerifyTransactionOptions {
    memo?: Memo;
    feePayer: string;
    blockhash: string;
    durableNonce?: {
        walletNonceAddress: string;
        authWalletAddress: number;
    };
}
interface TransactionOutput {
    address: string;
    amount: number | string;
}
declare type TransactionInput = TransactionOutput;
export interface SolParsedTransaction extends BaseParsedTransaction {
    inputs: TransactionInput[];
    outputs: TransactionOutput[];
}
export interface SolParseTransactionOptions extends BaseParseTransactionOptions {
    txBase64: string;
    feeInfo: TransactionFee;
    tokenAccountRentExemptAmount?: string;
}
export declare class Sol extends BaseCoin {
    protected readonly _staticsCoin: Readonly<StaticsBaseCoin>;
    constructor(bitgo: BitGo, staticsCoin?: Readonly<StaticsBaseCoin>);
    static createInstance(bitgo: BitGo, staticsCoin?: Readonly<StaticsBaseCoin>): BaseCoin;
    allowsAccountConsolidations(): boolean;
    supportsTss(): boolean;
    getChain(): string;
    getFamily(): CoinFamily;
    getFullName(): string;
    getBaseFactor(): string | number;
    verifyTransaction(params: SolVerifyTransactionOptions): Promise<any>;
    isWalletAddress(params: VerifyAddressOptions): boolean;
    /**
     * Generate Solana key pair
     *
     * @param {Buffer} seed - Seed from which the new keypair should be generated, otherwise a random seed is used
     * @returns {Object} object with generated pub and prv
     */
    generateKeyPair(seed?: Buffer | undefined): KeyPair;
    /**
     * Return boolean indicating whether input is valid public key for the coin
     *
     * @param {string} pub the prv to be checked
     * @returns is it valid?
     */
    isValidPub(pub: string): boolean;
    /**
     * Return boolean indicating whether input is valid private key for the coin
     *
     * @param {string} prv the prv to be checked
     * @returns is it valid?
     */
    isValidPrv(prv: string): boolean;
    isValidAddress(address: string): boolean;
    signMessage(key: KeyPair, message: string | Buffer): Promise<Buffer>;
    /**
     * Signs Solana transaction
     * @param params
     * @param callback
     */
    signTransaction(params: SolSignTransactionOptions): Promise<SignedTransaction>;
    parseTransaction(params: SolParseTransactionOptions): Promise<SolParsedTransaction>;
    /**
     * Explain a Solana transaction from txBase64
     * @param params
     */
    explainTransaction(params: ExplainTransactionOptions): Promise<SolTransactionExplanation>;
    /** @inheritDoc */
    getSignablePayload(serializedTx: string): Promise<Buffer>;
    /** @inheritDoc */
    presignTransaction(params: PresignTransactionOptions): Promise<PresignTransactionOptions>;
}
export {};
//# sourceMappingURL=sol.d.ts.map