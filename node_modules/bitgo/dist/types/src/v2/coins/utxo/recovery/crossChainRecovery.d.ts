import { BitGo } from '../../../../bitgo';
import { AbstractUtxoCoin, TransactionInfo } from '../../abstractUtxoCoin';
import { Wallet } from '../../../wallet';
export interface ExplorerTxInfo {
    input: {
        address: string;
    }[];
    outputs: {
        address: string;
    }[];
}
export interface BuildRecoveryTransactionOptions {
    wallet: string;
    faultyTxId: string;
    recoveryAddress: string;
}
declare type FeeInfo = {
    size: number;
    feeRate: number;
    fee: number;
    payGoFee: number;
};
export interface CrossChainRecoveryUnsigned {
    txHex: string;
    txInfo: TransactionInfo;
    walletId: string;
    feeInfo: FeeInfo;
    address: string;
    coin: string;
}
export interface CrossChainRecoverySigned {
    version: 1 | 2;
    txHex: string;
    txInfo: TransactionInfo;
    walletId: string;
    sourceCoin: string;
    recoveryCoin: string;
    recoveryAddress?: string;
    recoveryAmount?: number;
}
declare type WalletV1 = {
    keychains: {
        xpub: string;
    }[];
    address({ address: string }: {
        address: any;
    }): Promise<{
        chain: number;
        index: number;
    }>;
    getEncryptedUserKeychain(): Promise<{
        encryptedXprv: string;
    }>;
};
export declare function getWallet(bitgo: BitGo, coin: AbstractUtxoCoin, walletId: string): Promise<Wallet | WalletV1>;
declare type RecoverParams = {
    /** Wallet ID (can be v1 wallet or v2 wallet) */
    walletId: string;
    /** Coin to create the transaction for */
    sourceCoin: AbstractUtxoCoin;
    /** Coin that wallet keys were set up for */
    recoveryCoin: AbstractUtxoCoin;
    /** Source coin transaction to recover outputs from (sourceCoin) */
    txid: string;
    /** Source coin address to send the funds to */
    recoveryAddress: string;
    /** If set, decrypts private key and signs transaction */
    walletPassphrase?: string;
    /** If set, signs transaction */
    xprv?: string;
};
/**
 * Recover wallet deposits that were received on the wrong blockchain
 * (for instance bitcoin deposits that were received for a litecoin wallet).
 *
 * Fetches the unspent data from BitGo's public blockchain API and the script data from the user's
 * wallet.
 *
 * @param {BitGo} bitgo
 * @param {RecoverParams} params
 */
export declare function recoverCrossChain(bitgo: BitGo, params: RecoverParams): Promise<CrossChainRecoverySigned | CrossChainRecoveryUnsigned>;
export {};
//# sourceMappingURL=crossChainRecovery.d.ts.map