/**
 * @prettier
 */
import * as utxolib from '@bitgo/utxo-lib';
import { RootWalletKeys, Unspent, WalletUnspentSigner } from '@bitgo/utxo-lib/dist/src/bitgo';
export declare class InputSigningError extends Error {
    inputIndex: number;
    unspent: Unspent;
    reason: Error | string;
    static expectedWalletUnspent(inputIndex: number, unspent: Unspent): InputSigningError;
    constructor(inputIndex: number, unspent: Unspent, reason: Error | string);
}
export declare class TransactionSigningError extends Error {
    constructor(signErrors: InputSigningError[], verifyError: InputSigningError[]);
}
/**
 * Sign all inputs of a wallet transaction and verify signatures after signing.
 * Collects and logs signing errors and verification errors, throws error in the end if any of them
 * failed.
 *
 * @param transaction - wallet transaction (builder) to be signed
 * @param unspents - transaction unspents
 * @param walletSigner - signing parameters
 * @param isLastSignature - Returns full-signed transaction when true. Builds half-signed when false.
 */
export declare function signAndVerifyWalletTransaction(transaction: utxolib.bitgo.UtxoTransaction | utxolib.bitgo.UtxoTransactionBuilder, unspents: Unspent[], walletSigner: WalletUnspentSigner<RootWalletKeys>, { isLastSignature }: {
    isLastSignature: boolean;
}): utxolib.bitgo.UtxoTransaction;
//# sourceMappingURL=sign.d.ts.map