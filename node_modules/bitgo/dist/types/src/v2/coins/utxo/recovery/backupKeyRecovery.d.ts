/**
 * @prettier
 */
import { WalletUnspent, outputScripts } from '@bitgo/utxo-lib/dist/src/bitgo';
import { BitGo } from '../../../../bitgo';
import { AbstractUtxoCoin } from '../../abstractUtxoCoin';
import { RecoveryProvider } from './RecoveryProvider';
export interface OfflineVaultTxInfo {
    inputs: WalletUnspent[];
}
export interface FormattedOfflineVaultTxInfo {
    txInfo: {
        unspents: WalletUnspent[];
    };
    txHex: string;
    feeInfo: Record<string, never>;
    coin: string;
}
export interface RecoverParams {
    scan?: number;
    userKey: string;
    backupKey: string;
    bitgoKey: string;
    recoveryDestination: string;
    krsProvider?: string;
    ignoreAddressTypes: outputScripts.ScriptType2Of3[];
    walletPassphrase?: string;
    apiKey?: string;
    userKeyPath?: string;
    recoveryProvider?: RecoveryProvider;
}
export declare type BackupKeyRecoveryTransansaction = {
    inputs: WalletUnspent[];
    transactionHex: string;
    coin: string;
    backupKey: string;
    recoveryAmount: number;
    tx?: unknown;
};
/**
 * Builds a funds recovery transaction without BitGo
 * @param coin
 * @param bitgo
 * @param params
 * - userKey: [encrypted] xprv, or xpub
 * - backupKey: [encrypted] xprv, or xpub if the xprv is held by a KRS provider
 * - walletPassphrase: necessary if one of the xprvs is encrypted
 * - bitgoKey: xpub
 * - krsProvider: necessary if backup key is held by KRS
 * - recoveryDestination: target address to send recovered funds to
 * - scan: the amount of consecutive addresses without unspents to scan through before stopping
 * - ignoreAddressTypes: (optional) scripts to ignore
 *        for example: ['p2shP2wsh', 'p2wsh'] will prevent code from checking for wrapped-segwit and native-segwit chains on the public block explorers
 */
export declare function backupKeyRecovery(coin: AbstractUtxoCoin, bitgo: BitGo, params: RecoverParams): Promise<BackupKeyRecoveryTransansaction | FormattedOfflineVaultTxInfo>;
//# sourceMappingURL=backupKeyRecovery.d.ts.map