/// <reference types="node" />
/**
 * @prettier
 */
import { CoinFamily, BaseCoin as StaticsBaseCoin } from '@bitgo/statics';
import { Eth } from '@bitgo/account-lib';
import { BaseCoin, FullySignedTransaction, HalfSignedAccountTransaction, KeyPair, ParsedTransaction, ParseTransactionOptions, SignTransactionOptions, VerifyTransactionOptions, TransactionFee, TransactionRecipient as Recipient, TransactionPrebuild as BaseTransactionPrebuild, TransactionExplanation } from '../baseCoin';
import { BitGo } from '../../bitgo';
export interface EthSignTransactionOptions extends SignTransactionOptions {
    txPrebuild: TransactionPrebuild;
    prv: string;
}
export interface TxInfo {
    recipients: Recipient[];
    from: string;
    txid: string;
}
export interface TransactionPrebuild extends BaseTransactionPrebuild {
    txHex: string;
    txInfo: TxInfo;
    feeInfo: EthTransactionFee;
    source: string;
    dataToSign: string;
    nextContractSequenceId?: string;
    expireTime?: number;
}
export interface EthTransactionFee {
    fee: string;
    gasLimit?: string;
}
export interface ExplainTransactionOptions {
    txHex?: string;
    halfSigned?: {
        txHex: string;
    };
    feeInfo: TransactionFee;
}
export interface HalfSignedEthLikeTransaction extends HalfSignedAccountTransaction {
    halfSigned?: {
        txHex?: never;
        recipients: Recipient[];
        expiration?: number;
    };
}
export declare type SignedEthLikeTransaction = HalfSignedEthLikeTransaction | FullySignedTransaction;
export declare abstract class AbstractEthLikeCoin extends BaseCoin {
    protected readonly _staticsCoin: Readonly<StaticsBaseCoin>;
    protected constructor(bitgo: BitGo, staticsCoin?: Readonly<StaticsBaseCoin>);
    getChain(): string;
    /**
     * Get the base chain that the coin exists on.
     */
    getBaseChain(): string;
    getFamily(): CoinFamily;
    getFullName(): string;
    getBaseFactor(): number;
    valuelessTransferAllowed(): boolean;
    isValidAddress(address: string): boolean;
    generateKeyPair(seed?: Buffer): KeyPair;
    parseTransaction(params: ParseTransactionOptions): Promise<ParsedTransaction>;
    isWalletAddress(): boolean;
    verifyTransaction(params: VerifyTransactionOptions): Promise<boolean>;
    signTransaction(params: EthSignTransactionOptions): Promise<SignedEthLikeTransaction>;
    isValidPub(pub: string): boolean;
    /**
     * Builds a funds recovery transaction without BitGo.
     * We need to do three queries during this:
     * 1) Node query - how much money is in the account
     * 2) Build transaction - build our transaction for the amount
     * 3) Send signed build - send our signed build to a public node
     * @param params The options with which to recover
     */
    recover(params: any): Promise<any>;
    /**
     * Explain a transaction from txHex
     * @param params The options with which to explain the transaction
     */
    explainTransaction(params: ExplainTransactionOptions): Promise<TransactionExplanation>;
    /**
     * Create a new transaction builder for the current chain
     * @return a new transaction builder
     */
    protected getTransactionBuilder(): Eth.TransactionBuilder;
}
//# sourceMappingURL=abstractEthLikeCoin.d.ts.map