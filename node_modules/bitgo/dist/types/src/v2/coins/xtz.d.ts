/// <reference types="node" />
import { CoinFamily, BaseCoin as StaticsBaseCoin } from '@bitgo/statics';
import { BaseCoin, KeyPair, ParsedTransaction, ParseTransactionOptions, SignedTransaction, SignTransactionOptions, VerifyAddressOptions, VerifyTransactionOptions, TransactionFee, TransactionRecipient as Recipient, TransactionPrebuild as BaseTransactionPrebuild, TransactionExplanation } from '../baseCoin';
import { BitGo } from '../../bitgo';
export interface XtzSignTransactionOptions extends SignTransactionOptions {
    txPrebuild: TransactionPrebuild;
    prv: string;
}
export interface TxInfo {
    recipients: Recipient[];
    from: string;
    txid: string;
}
export interface AddressInfo {
    address: string;
    chain: number;
    index: number;
}
export interface TransactionPrebuild extends BaseTransactionPrebuild {
    txHex: string;
    txInfo: TxInfo;
    addressInfo: AddressInfo;
    feeInfo: XtzTransactionFee;
    source: string;
    dataToSign: string;
}
export interface XtzTransactionFee {
    fee: string;
    gasLimit?: string;
    storageLimit?: string;
}
export interface ExplainTransactionOptions {
    txHex?: string;
    halfSigned?: {
        txHex: string;
    };
    feeInfo: TransactionFee;
}
export declare class Xtz extends BaseCoin {
    protected readonly _staticsCoin: Readonly<StaticsBaseCoin>;
    constructor(bitgo: BitGo, staticsCoin?: Readonly<StaticsBaseCoin>);
    getChain(): string;
    getFamily(): CoinFamily;
    getFullName(): string;
    getBaseFactor(): number;
    static createInstance(bitgo: BitGo, staticsCoin?: Readonly<StaticsBaseCoin>): BaseCoin;
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed(): boolean;
    /**
     * Xtz supports transfers to consolidate balance from receive address to the wallet contract
     */
    allowsAccountConsolidations(): boolean;
    /**
     * Checks if this is a valid base58 or hex address
     * @param address
     */
    isValidAddress(address: string): boolean;
    /**
     * Generate Tezos key pair - BitGo xpub format
     *
     * @param seed
     * @returns {Object} object with generated xpub, xprv
     */
    generateKeyPair(seed?: Buffer): KeyPair;
    parseTransaction(params: ParseTransactionOptions): Promise<ParsedTransaction>;
    isWalletAddress(params: VerifyAddressOptions): boolean;
    verifyTransaction(params: VerifyTransactionOptions): Promise<boolean>;
    /**
     * Derive a user key using the chain path of the address
     * @param key
     * @param path
     * @returns {string} derived private key
     */
    deriveKeyWithPath({ key, path }: {
        key: string;
        path: string;
    }): string;
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {Object} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @param params.wallet.addressVersion {String} this is the version of the Algorand multisig address generation format
     * @returns Bluebird<SignedTransaction>
     */
    signTransaction(params: XtzSignTransactionOptions): Promise<SignedTransaction>;
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     */
    signMessage(key: KeyPair, message: string | Buffer): Promise<Buffer>;
    /**
     * Builds a funds recovery transaction without BitGo.
     * We need to do three queries during this:
     * 1) Node query - how much money is in the account
     * 2) Build transaction - build our transaction for the amount
     * 3) Send signed build - send our signed build to a public node
     * @param params
     */
    recover(params: any): Promise<any>;
    /**
     * Explain a Tezos transaction from txHex
     * @param params
     */
    explainTransaction(params: ExplainTransactionOptions): Promise<TransactionExplanation>;
    isValidPub(pub: string): boolean;
}
//# sourceMappingURL=xtz.d.ts.map