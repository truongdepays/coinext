/**
 * @prettier
 */
import { BitGo } from '../../bitgo';
import { AvaxC, TransactionPrebuild } from './avaxc';
import { CoinConstructor } from '../coinFactory';
export interface AvaxcTokenConfig {
    name: string;
    type: string;
    coin: string;
    network: string;
    tokenContractAddress: string;
    decimalPlaces: number;
}
export declare class AvaxCToken extends AvaxC {
    readonly tokenConfig: AvaxcTokenConfig;
    constructor(bitgo: BitGo, tokenConfig: AvaxcTokenConfig);
    static createTokenConstructor(config: AvaxcTokenConfig): CoinConstructor;
    get type(): string;
    get name(): string;
    get coin(): string;
    get network(): string;
    get tokenContractAddress(): string;
    get decimalPlaces(): number;
    getChain(): string;
    getBaseChain(): string;
    getFullName(): string;
    getBaseFactor(): number;
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed(): boolean;
    /**
     * Flag for sending data along with transactions
     * @returns {boolean} True if okay to send tx data (AVAXC), false otherwise
     */
    transactionDataAllowed(): boolean;
    isToken(): boolean;
    verifyCoin(txPrebuild: TransactionPrebuild): boolean;
}
//# sourceMappingURL=avaxcToken.d.ts.map