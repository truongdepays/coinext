import { BitGo } from '../bitgo';
import { BaseCoin } from './baseCoin';
import { Wallet } from './wallet';
import { Settlements } from './trading/settlements';
import { Affirmations } from './trading/affirmations';
export declare class Enterprise {
    private readonly bitgo;
    private readonly baseCoin;
    readonly id: string;
    readonly name: string;
    constructor(bitgo: BitGo, baseCoin: BaseCoin, enterpriseData: {
        id: string;
        name: string;
    });
    /**
     * Enterprise URL for v1 methods, such as getting users
     * @param query
     */
    url(query?: string): string;
    /**
     * Enterprise URL for v2 methods, such as getting fee address balances
     * @param query
     */
    coinUrl(query?: string): string;
    /**
     * Get the wallets associated with this Enterprise
     * @param params
     */
    coinWallets(params?: Record<string, never>): Promise<Wallet[]>;
    /**
     * Get the users associated with this Enterprise
     * @param params
     */
    users(params?: Record<string, never>): Promise<any>;
    /**
     * Get the fee address balance for this Enterprise
     * @param params
     */
    getFeeAddressBalance(params?: Record<string, never>): Promise<any>;
    /**
     * Add a user to this Enterprise
     * @param params
     */
    addUser(params?: any): Promise<any>;
    /**
     * Remove a user from this Enterprise
     * @param params
     */
    removeUser(params?: any): Promise<any>;
    /**
     * Get the first pending transaction for this Enterprise
     * @param params
     */
    getFirstPendingTransaction(params?: Record<string, never>): Promise<any>;
    /**
     * Manage settlements for an enterprise
     */
    settlements(): Settlements;
    /**
     * Manage affirmations for an enterprise
     */
    affirmations(): Affirmations;
}
//# sourceMappingURL=enterprise.d.ts.map