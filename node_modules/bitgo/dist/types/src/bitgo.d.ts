import * as utxolib from '@bitgo/utxo-lib';
import { BaseCoin } from './v2/baseCoin';
import { BitGoAPI, BitGoAPIOptions } from '@bitgo/sdk-api';
export declare type BitGoOptions = BitGoAPIOptions;
/**
 * @deprecated
 */
export interface DeprecatedVerifyAddressOptions {
    address?: string;
}
export interface SplitSecretOptions {
    seed: string;
    passwords: string[];
    m: number;
}
export interface SplitSecret {
    xpub: string;
    m: number;
    n: number;
    seedShares: any;
}
export interface ReconstituteSecretOptions {
    shards: string[];
    passwords: string[];
}
export interface ReconstitutedSecret {
    xpub: string;
    xprv: string;
    seed: string;
}
export interface VerifyShardsOptions {
    shards: string[];
    passwords: string[];
    m: number;
    xpub: string;
}
export interface GetEcdhSecretOptions {
    otherPubKeyHex: string;
    eckey: utxolib.ECPair.ECPairInterface;
}
export interface ChangePasswordOptions {
    oldPassword: string;
    newPassword: string;
}
/**
 * @deprecated
 */
export interface EstimateFeeOptions {
    numBlocks?: number;
    maxFee?: number;
    inputs?: string[];
    txSize?: number;
    cpfpAware?: boolean;
}
/**
 * @deprecated
 */
export interface WebhookOptions {
    url: string;
    type: string;
}
export interface ListWebhookNotificationsOptions {
    prevId?: string;
    limit?: number;
}
export interface BitGoSimulateWebhookOptions {
    webhookId: string;
    blockId: string;
}
export interface AuthenticateWithAuthCodeOptions {
    authCode: string;
}
/**
 * @deprecated
 */
export interface VerifyPushTokenOptions {
    pushVerificationToken: string;
}
/**
 * @deprecated
 */
export interface RegisterPushTokenOptions {
    pushToken: unknown;
    operatingSystem: unknown;
}
export declare class BitGo extends BitGoAPI {
    private _keychains;
    private _wallets;
    private _markets?;
    private _blockchain?;
    private _travelRule?;
    private _pendingApprovals?;
    /**
     * Constructor for BitGo Object
     */
    constructor(params?: BitGoAPIOptions);
    /**
     * Create a basecoin object
     * @param coinName
     */
    coin(coinName: string): BaseCoin;
    /**
     * Create a basecoin object for a virtual token
     * @param tokenName
     */
    token(tokenName: string): Promise<BaseCoin>;
    /**
     * Verify a Bitcoin address is a valid base58 address
     * @deprecated
     */
    verifyAddress(params?: DeprecatedVerifyAddressOptions): boolean;
    /**
     * Split a secret into shards using Shamir Secret Sharing.
     * @param seed A hexadecimal secret to split
     * @param passwords An array of the passwords used to encrypt each share
     * @param m The threshold number of shards necessary to reconstitute the secret
     */
    splitSecret({ seed, passwords, m }: SplitSecretOptions): SplitSecret;
    /**
     * Reconstitute a secret which was sharded with `splitSecret`.
     * @param shards
     * @param passwords
     */
    reconstituteSecret({ shards, passwords }: ReconstituteSecretOptions): ReconstitutedSecret;
    /**
     *
     * @param shards
     * @param passwords
     * @param m
     * @param xpub Optional xpub to verify the results against
     */
    verifyShards({ shards, passwords, m, xpub }: VerifyShardsOptions): boolean;
    /**
     * @deprecated - use `getSharedSecret()`
     */
    getECDHSecret({ otherPubKeyHex, eckey }: GetEcdhSecretOptions): string;
    /**
     * Gets the user's private keychain, used for receiving shares
     */
    getECDHSharingKeychain(): Promise<any>;
    /**
     * Get bitcoin market data
     *
     * @deprecated
     */
    markets(): any;
    /**
     * Get the latest bitcoin prices
     * (Deprecated: Will be removed in the future) use `bitgo.markets().latest()`
     * @deprecated
     */
    market(): Promise<any>;
    /**
     * Get market data from yesterday
     * (Deprecated: Will be removed in the future) use bitgo.markets().yesterday()
     * @deprecated
     */
    yesterday(): Promise<any>;
    /**
     * @param params
     * - operatingSystem: one of ios, android
     * - pushToken: hex-formatted token for the respective native push notification service
     * @returns {*}
     * @deprecated
     */
    registerPushToken(params: RegisterPushTokenOptions): Promise<any>;
    /**
     * @param params
     * - pushVerificationToken: the token received via push notification to confirm the device's mobility
     * @deprecated
     */
    verifyPushToken(params: VerifyPushTokenOptions): Promise<any>;
    /**
     * Login to the bitgo system using an authcode generated via Oauth
     */
    authenticateWithAuthCode(params: AuthenticateWithAuthCodeOptions): Promise<any>;
    /**
     * Change the password of the currently logged in user.
     * Also change all v1 and v2 keychain passwords if they match the
     * given oldPassword. Returns nothing on success.
     * @param oldPassword {String} - the current password
     * @param newPassword {String} - the new password
     */
    changePassword({ oldPassword, newPassword }: ChangePasswordOptions): Promise<any>;
    /**
     * Get the blockchain object.
     * @deprecated
     */
    blockchain(): any;
    /**
     * Get the user's keychains object.
     * @deprecated
     */
    keychains(): any;
    /**
     * Get the user's wallets object.
     * @deprecated
     */
    wallets(): any;
    /**
     * Get the travel rule object
     * @deprecated
     */
    travelRule(): any;
    /**
     * Get pending approvals that can be approved/ or rejected
     * @deprecated
     */
    pendingApprovals(): any;
    /**
     * A factory method to create a new Wallet object, initialized with the wallet params
     * Can be used to reconstitute a wallet from cached data
     * @param walletParams
     * @deprecated
     */
    newWalletObject(walletParams: any): any;
    /**
     * Get all the address labels on all of the user's wallets
     *
     * @deprecated
     */
    labels(): Promise<any>;
    /**
     * Estimates approximate fee per kb needed for a tx to get into a block
     * @param {number} params.numBlocks target blocks for the transaction to be confirmed
     * @param {number} params.maxFee maximum fee willing to be paid (for safety)
     * @param {array[string]} params.inputs list of unconfirmed txIds from which this transaction uses inputs
     * @param {number} params.txSize estimated transaction size in bytes, optional parameter used for CPFP estimation.
     * @param {boolean} params.cpfpAware flag indicating fee should take into account CPFP
     * @deprecated
     */
    estimateFee(params?: EstimateFeeOptions): Promise<any>;
    /**
     * Get BitGo's guarantee using an instant id
     * @param params
     * @deprecated
     */
    instantGuarantee(params: {
        id: string;
    }): Promise<any>;
    /**
     * Get a target address for payment of a BitGo fee
     * @deprecated
     */
    getBitGoFeeAddress(): Promise<any>;
    /**
     * Gets an address object (including the wallet id) for a given address.
     * @param {string} params.address The address to look up.
     * @deprecated
     */
    getWalletAddress({ address }: {
        address: string;
    }): Promise<any>;
    /**
     * Fetch list of user webhooks
     *
     * @returns {*}
     * @deprecated
     */
    listWebhooks(): Promise<any>;
    /**
     * Add new user webhook
     *
     * @param params
     * @returns {*}
     * @deprecated
     */
    addWebhook(params: WebhookOptions): Promise<any>;
    /**
     * Remove user webhook
     *
     * @param params
     * @returns {*}
     * @deprecated
     */
    removeWebhook(params: WebhookOptions): Promise<any>;
    /**
     * Fetch list of webhook notifications for the user
     *
     * @param params
     * @returns {*}
     */
    listWebhookNotifications(params?: ListWebhookNotificationsOptions): Promise<any>;
    /**
     * Simulate a user webhook
     *
     * @param params
     * @returns {*}
     */
    simulateWebhook(params: BitGoSimulateWebhookOptions): Promise<any>;
    /**
     * Synchronously get constants which are relevant to the client.
     *
     * Note: This function has a known race condition. It may return different values over time,
     * especially if called shortly after creation of the BitGo object.
     *
     * New code should call fetchConstants() directly instead.
     *
     * @deprecated
     * @return {Object} The client constants object
     */
    getConstants(): any;
    /**
     * V1 method for calculating miner fee amounts, given the number and
     * type of transaction inputs, along with a fee rate in satoshis per vkB.
     *
     * This method should not be used for new code.
     *
     * @deprecated
     * @param params
     * @return {any}
     */
    calculateMinerFeeInfo(params: any): Promise<any>;
}
//# sourceMappingURL=bitgo.d.ts.map