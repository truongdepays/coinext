import { OfcTokenConfig } from './v2/coins/ofcToken';
import { Erc20TokenConfig } from './v2/coins/erc20Token';
import { StellarTokenConfig } from './v2/coins/stellarToken';
import { CeloTokenConfig } from './v2/coins/celoToken';
import { EosTokenConfig } from './v2/coins/eosToken';
import { AlgoTokenConfig } from './v2/coins/algoToken';
import { AvaxcTokenConfig } from './v2/coins/avaxcToken';
import { FiatTokenConfig } from './v2/coins/fiatToken';
import { EnvironmentName } from '@bitgo/sdk-core';
export interface Tokens {
    bitcoin: {
        eth: {
            tokens: Erc20TokenConfig[];
        };
        xlm: {
            tokens: StellarTokenConfig[];
        };
        algo: {
            tokens: AlgoTokenConfig[];
        };
        ofc: {
            tokens: OfcTokenConfig[];
        };
        celo: {
            tokens: CeloTokenConfig[];
        };
        eos: {
            tokens: EosTokenConfig[];
        };
        avaxc: {
            tokens: AvaxcTokenConfig[];
        };
        fiat: {
            tokens: FiatTokenConfig[];
        };
    };
    testnet: {
        eth: {
            tokens: Erc20TokenConfig[];
        };
        xlm: {
            tokens: StellarTokenConfig[];
        };
        algo: {
            tokens: AlgoTokenConfig[];
        };
        ofc: {
            tokens: OfcTokenConfig[];
        };
        celo: {
            tokens: CeloTokenConfig[];
        };
        eos: {
            tokens: EosTokenConfig[];
        };
        avaxc: {
            tokens: AvaxcTokenConfig[];
        };
        fiat: {
            tokens: FiatTokenConfig[];
        };
    };
}
export declare const ethGasConfigs: {
    minimumGasPrice: number;
    defaultGasPrice: number;
    maximumGasPrice: number;
    defaultGasLimit: number;
    defaultGasLimitTokenSend: number;
    minimumGasLimit: number;
    maximumGasLimit: number;
};
export declare const tokens: Tokens;
export declare const mainnetTokens: {};
export declare const testnetTokens: {};
export declare const defaults: {
    maxFee: number;
    maxFeeRate: number;
    minFeeRate: number;
    fallbackFeeRate: number;
    minOutputSize: number;
    minInstantFeeRate: number;
    bitgoEthAddress: string;
};
export declare const supportedCrossChainRecoveries: {
    btc: string[];
    bch: string[];
    ltc: string[];
    bsv: string[];
};
export declare type KrsProvider = {
    feeType: 'flatUsd';
    feeAmount: number;
    supportedCoins: string[];
    feeAddresses?: Record<string, string>;
};
export declare const krsProviders: Record<string, KrsProvider>;
/**
 * Get the default (hardcoded) constants for a particular network.
 *
 * Note that this may not be the complete set of constants, and additional constants may get fetched
 * from BitGo during the lifespan of a BitGo object.
 * @param env
 */
export declare const defaultConstants: (env: EnvironmentName) => {
    maxFee: number;
    maxFeeRate: number;
    minFeeRate: number;
    fallbackFeeRate: number;
    minOutputSize: number;
    minInstantFeeRate: number;
    bitgoEthAddress: string;
} & ({
    eth: {
        tokens: Erc20TokenConfig[];
    };
    xlm: {
        tokens: StellarTokenConfig[];
    };
    algo: {
        tokens: AlgoTokenConfig[];
    };
    ofc: {
        tokens: OfcTokenConfig[];
    };
    celo: {
        tokens: CeloTokenConfig[];
    };
    eos: {
        tokens: EosTokenConfig[];
    };
    avaxc: {
        tokens: AvaxcTokenConfig[];
    };
    fiat: {
        tokens: FiatTokenConfig[];
    };
} | {
    eth: {
        tokens: Erc20TokenConfig[];
    };
    xlm: {
        tokens: StellarTokenConfig[];
    };
    algo: {
        tokens: AlgoTokenConfig[];
    };
    ofc: {
        tokens: OfcTokenConfig[];
    };
    celo: {
        tokens: CeloTokenConfig[];
    };
    eos: {
        tokens: EosTokenConfig[];
    };
    avaxc: {
        tokens: AvaxcTokenConfig[];
    };
    fiat: {
        tokens: FiatTokenConfig[];
    };
});
export declare type Config = {
    krsProviders: Record<string, KrsProvider>;
};
//# sourceMappingURL=config.d.ts.map