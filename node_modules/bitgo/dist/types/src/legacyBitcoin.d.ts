/// <reference types="node" />
/**
 * This file contains a compatability layer for some deprecated types and helper methods
 *
 * @prettier
 */
import * as utxolib from '@bitgo/utxo-lib';
import * as bip32 from 'bip32';
interface ECPairCompat extends utxolib.ECPairInterface {
    getPublicKeyBuffer(): Buffer;
}
export declare function makeRandomKey(): ECPairCompat;
/**
 * Implementation of legacy "HDNode" class as used by certain components
 */
export declare class HDNode {
    private bip32;
    constructor(bip32: bip32.BIP32Interface);
    get publicKey(): Buffer;
    get privateKey(): Buffer | undefined;
    static fromSeedBuffer(buf: Buffer): HDNode;
    static fromBase58(str: string): HDNode;
    isNeutered(): boolean;
    neutered(): HDNode;
    toBase58(): string;
    derivePath(p: string): HDNode;
}
export interface Derivable {
    deriveKey(path: string): ECPairCompat;
    derive(path: string): HDNode;
}
export declare function hdPath(hdNode: HDNode): Derivable;
export declare const networks: Record<utxolib.NetworkName, utxolib.Network>;
export declare const address: {
    fromBase58Check(addr: string): {
        hash: Buffer;
        version: number;
    };
    toBase58Check(hash: Buffer, version: number): string;
};
export {};
//# sourceMappingURL=legacyBitcoin.d.ts.map