import { BitGoJsError } from '@bitgo/sdk-core';
export { BitGoJsError };
export declare class TlsConfigurationError extends BitGoJsError {
    constructor(message?: string);
}
export declare class NodeEnvironmentError extends BitGoJsError {
    constructor(message?: string);
}
export declare class UnsupportedCoinError extends BitGoJsError {
    constructor(coin: string);
}
export declare class AddressTypeChainMismatchError extends BitGoJsError {
    constructor(addressType: string, chain: number | string);
}
export declare class P2shP2wshUnsupportedError extends BitGoJsError {
    constructor(message?: string);
}
export declare class P2wshUnsupportedError extends BitGoJsError {
    constructor(message?: string);
}
export declare class P2trUnsupportedError extends BitGoJsError {
    constructor(message?: string);
}
export declare class UnsupportedAddressTypeError extends BitGoJsError {
    constructor(message?: string);
}
export declare class InvalidAddressError extends BitGoJsError {
    constructor(message?: string);
}
export declare class InvalidAddressVerificationObjectPropertyError extends BitGoJsError {
    constructor(message?: string);
}
export declare class UnexpectedAddressError extends BitGoJsError {
    constructor(message?: string);
}
export declare class InvalidAddressDerivationPropertyError extends BitGoJsError {
    constructor(message?: string);
}
export declare class WalletRecoveryUnsupported extends BitGoJsError {
    constructor(message?: string);
}
export declare class MethodNotImplementedError extends BitGoJsError {
    constructor(message?: string);
}
export declare class BlockExplorerUnavailable extends BitGoJsError {
    constructor(message?: string);
}
export declare class InvalidMemoIdError extends InvalidAddressError {
    constructor(message?: string);
}
export declare class InvalidPaymentIdError extends InvalidAddressError {
    constructor(message?: string);
}
export declare class KeyRecoveryServiceError extends BitGoJsError {
    constructor(message?: string);
}
export declare class AddressGenerationError extends BitGoJsError {
    constructor(message?: string);
}
export declare class EthereumLibraryUnavailableError extends BitGoJsError {
    constructor(packageName: string);
}
export declare class StellarFederationUserNotFoundError extends BitGoJsError {
    constructor(message?: string);
}
export declare class ErrorNoInputToRecover extends BitGoJsError {
    constructor(message?: string);
}
export declare class InvalidKeyPathError extends BitGoJsError {
    constructor(keyPath: string);
}
export declare class InvalidTransactionError extends BitGoJsError {
    constructor(message?: string);
}
export declare class ApiResponseError<ResponseBodyType = any> extends BitGoJsError {
    message: string;
    status: number;
    result?: ResponseBodyType;
    invalidToken?: boolean;
    needsOTP?: boolean;
    constructor(message: string, status: number, result?: ResponseBodyType, invalidToken?: boolean, needsOTP?: boolean);
}
//# sourceMappingURL=errors.d.ts.map