import { GetRegistryOptsCore, PolkadotSS58Format, TypeRegistry } from '@substrate/txwrapper-core';
import { methods as substrateMethods } from '@substrate/txwrapper-substrate';
import * as polkadotMethods from './methods';
export declare const methods: {
    balances: typeof substrateMethods.balances;
    utility: typeof substrateMethods.utility;
    proxy: typeof substrateMethods.proxy;
    democracy: typeof substrateMethods.democracy;
    session: typeof substrateMethods.session;
    staking: typeof substrateMethods.staking;
    system: typeof substrateMethods.system;
    vesting: typeof substrateMethods.vesting;
    multisig: typeof substrateMethods.multisig;
    crowdloan: typeof polkadotMethods.crowdloan;
    assets: typeof substrateMethods.assets;
};
export * from '@substrate/txwrapper-core';
/**
 * `ChainProperties` for networks that txwrapper-polkadot supports. These are normally returned
 * by `system_properties` call, but since they don't change much, it's pretty safe to hardcode them.
 */
declare const KNOWN_CHAIN_PROPERTIES: {
    kusama: {
        ss58Format: PolkadotSS58Format;
        tokenDecimals: number;
        tokenSymbol: string;
    };
    polkadot: {
        ss58Format: PolkadotSS58Format;
        tokenDecimals: number;
        tokenSymbol: string;
    };
    westend: {
        ss58Format: PolkadotSS58Format;
        tokenDecimals: number;
        tokenSymbol: string;
    };
    statemint: {
        ss58Format: PolkadotSS58Format;
        tokenDecimals: number;
        tokenSymbol: string;
    };
    statemine: {
        ss58Format: PolkadotSS58Format;
        tokenDecimals: number;
        tokenSymbol: string;
    };
};
/**
 * Options for txwrapper-polkadot's `getRegistry` function.
 */
export interface GetRegistryOpts extends GetRegistryOptsCore {
    specName: keyof typeof KNOWN_CHAIN_PROPERTIES;
}
/**
 * Get a type registry for networks that txwrapper-polkadot supports.
 *
 * @param GetRegistryOptions specName, chainName, specVersion, and metadataRpc of the current runtime
 */
export declare function getRegistry({ specName, chainName, specVersion, metadataRpc, properties, asCallsOnlyArg, signedExtensions, userExtensions, }: GetRegistryOpts): TypeRegistry;
