/// <reference types="node" />
import type { Buffer as NodeJSBuffer } from 'buffer';
import BN from 'bn.js';
declare const AvailableBufferModule: typeof NodeJSBuffer;
export { AvailableBufferModule as Buffer };
export declare const BLOCKSTACK_HANDLER = "blockstack";
export declare function nextYear(): Date;
export declare function nextMonth(): Date;
export declare function nextHour(): Date;
export declare function megabytesToBytes(megabytes: number): number;
export declare function getAesCbcOutputLength(inputByteLength: number): number;
export declare function getBase64OutputLength(inputByteLength: number): number;
export declare function updateQueryStringParameter(uri: string, key: string, value: string): string;
export declare function isLaterVersion(v1: string, v2: string): boolean;
export declare function makeUUID4(): string;
export declare function isSameOriginAbsoluteUrl(uri1: string, uri2: string): boolean;
export declare function getGlobalScope(): Window;
interface GetGlobalObjectOptions {
    throwIfUnavailable?: boolean;
    usageDesc?: string;
    returnEmptyObject?: boolean;
}
export declare function getGlobalObject<K extends Extract<keyof Window, string>>(name: K, { throwIfUnavailable, usageDesc, returnEmptyObject }?: GetGlobalObjectOptions): Window[K] | undefined;
export declare function getGlobalObjects<K extends Extract<keyof Window, string>>(names: K[], { throwIfUnavailable, usageDesc, returnEmptyObject }?: GetGlobalObjectOptions): Pick<Window, K>;
export declare type IntegerType = number | string | bigint | Uint8Array | BN;
export declare function intToBytes(value: IntegerType, signed: boolean, byteLength: number): Buffer;
export declare function intToBN(value: IntegerType, signed: boolean): BN;
export declare function intToBigInt(value: IntegerType, signed: boolean): bigint;
export declare function with0x(value: string): string;
