"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.REQUIRE_UINT8ARRAY_ERROR = exports.REQUIRE_STRING_OR_UINT8ARRAY_ERROR = exports.REQUIRE_STRING_ERROR = exports.REQUIRE_NON_NULL_ERROR = void 0;
exports.isNonNull = isNonNull;
exports.isString = isString;
exports.isStringOrUint8Array = isStringOrUint8Array;
exports.isUint8Array = isUint8Array;
exports.requireNonNull = requireNonNull;
exports.requireString = requireString;
exports.requireStringOrUint8Array = requireStringOrUint8Array;
exports.requireUint8Array = requireUint8Array;

/**
 * Utility Error Messages
 */
const REQUIRE_NON_NULL_ERROR = "This value cannot be null | undefined.";
exports.REQUIRE_NON_NULL_ERROR = REQUIRE_NON_NULL_ERROR;
const REQUIRE_STRING_ERROR = "This value must be a string.";
exports.REQUIRE_STRING_ERROR = REQUIRE_STRING_ERROR;
const REQUIRE_UINT8ARRAY_ERROR = "This value must be a Uint8Array.";
exports.REQUIRE_UINT8ARRAY_ERROR = REQUIRE_UINT8ARRAY_ERROR;
const REQUIRE_STRING_OR_UINT8ARRAY_ERROR = "This value must be a string or Uint8Array.";
/**
 * Takes any param and returns false if null or undefined.
 *
 * @param {any | null | undefined} variable
 * @returns {boolean}
 */

exports.REQUIRE_STRING_OR_UINT8ARRAY_ERROR = REQUIRE_STRING_OR_UINT8ARRAY_ERROR;

function isNonNull(variable) {
  if (variable == null || variable == undefined) {
    return false;
  } else {
    return true;
  }
}
/**
 * Takes any param and returns true if param is not null and of type Uint8Array.
 *
 * @param {any | null | undefined} variable
 * @returns {boolean}
 */


function isUint8Array(variable) {
  return isNonNull(variable) && variable instanceof Uint8Array;
}
/**
 * Takes any param and returns true if param is not null and of type string.
 *
 * @param {any | null | undefined} variable
 * @returns {boolean}
 */


function isString(variable) {
  return isNonNull(variable) && typeof variable == "string";
}
/**
 * Takes any param and returns true if param is not null and type string or Uint8Array.
 *
 * @param {any | null | undefined} variable
 * @returns {boolean}
 */


function isStringOrUint8Array(variable) {
  return isString(variable) || isUint8Array(variable);
}
/**
 * Takes any param and throws custom error if non string.
 *
 * @param {any | null | undefined} variable
 * @returns {string}
 */


function requireString(variable) {
  if (!isString(requireNonNull(variable))) {
    throw new Error(REQUIRE_STRING_ERROR);
  } else {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return (
      /** @type {string} */
      variable
    );
  }
}
/**
 * Takes any param and throws custom error if non Uint8Array.
 *
 * @param {any | null | undefined} variable
 * @returns {Uint8Array}
 */


function requireUint8Array(variable) {
  if (!isUint8Array(requireNonNull(variable))) {
    throw new Error(REQUIRE_UINT8ARRAY_ERROR);
  } else {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return (
      /** @type {Uint8Array} */
      variable
    );
  }
}
/**
 * Takes any param and throws custom error if null or undefined.
 *
 * @param {object} variable
 * @returns {object}
 */


function requireNonNull(variable) {
  if (!isNonNull(variable)) {
    throw new Error(REQUIRE_NON_NULL_ERROR);
  } else {
    return variable;
  }
}
/**
 * Takes any param and throws custom error if null or undefined and not a string or Uint8Array.
 *
 * @param {any | null | undefined} variable
 * @returns {string | Uint8Array}
 */


function requireStringOrUint8Array(variable) {
  if (isStringOrUint8Array(variable)) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return (
      /** @type {string | Uint8Array} */
      variable
    );
  } else {
    throw new Error(REQUIRE_STRING_OR_UINT8ARRAY_ERROR);
  }
}